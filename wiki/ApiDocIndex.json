{"namespaces":[{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc","name":"clojure.contrib.accumulators","author":"Konrad Hinsen","doc":"A generic accumulator interface and implementations of various\n           accumulators."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/agent_utils.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAgentUtilsApiDoc","name":"clojure.contrib.agent-utils","author":"Christophe Grande","doc":"Miscellaneous agent utilities\n (note to other contrib members: feel free to add to this lib)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/auto_agent.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAutoAgentApiDoc","name":"clojure.contrib.auto-agent","author":"Stuart Sierra","doc":"This is superficially similar to Ken Tilton's \"Cells\" library for\nCommon Lisp.  But Cells is single-threaded and synchronous.  This\nversion is built on Clojure agents, so it is multi-threaded and\nasynchronous.\n\nAn auto-agent is an agent whose value is the result of an\nexpression.  That expression can include other mutable Clojure\ntypes -- agents, atoms, and refs -- dereferenced with \"deref\" or\n\"@\".  Whenever one of those derefernced things changes, the\nauto-agent will be automatically updated to reflect the new value.\n"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/classpath.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribClasspathApiDoc","name":"clojure.contrib.classpath","author":"Stuart Sierra","doc":"Utilities for dealing with the JVM's classpath"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/combinatorics.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCombinatoricsApiDoc","name":"clojure.contrib.combinatorics","author":"Mark Engelberg","doc":"Efficient, functional algorithms for generating lazy\nsequences for common combinatorial functions. (See the source code \nfor a longer description.)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/command_line.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCommandLineApiDoc","name":"clojure.contrib.command-line","author":"Chris Houser","doc":"Process command-line arguments according to a given cmdspec"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/complex_numbers.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribComplexNumbersApiDoc","name":"clojure.contrib.complex-numbers","author":"Konrad Hinsen","doc":"Complex numbers\n           NOTE: This library is in evolution. Most math functions are\n                 not implemented yet."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/cond.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCondApiDoc","name":"clojure.contrib.cond","author":"Stephen C. Gilardi","doc":"Extensions to the basic cond function."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/condt.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCondtApiDoc","name":"clojure.contrib.condt","author":"Stuart Sierra","doc":"Generic case-like macro using template expressions"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/core.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCoreApiDoc","name":"clojure.contrib.core","author":"Laurent Petit (and others)","doc":"Functions/macros variants of the ones that can be found in clojure.core \n (note to other contrib members: feel free to add to this lib)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/core/tests.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCoreTestsApiDoc","name":"clojure.contrib.core.tests"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc","name":"clojure.contrib.dataflow","author":"Jeffrey Straszheim","doc":"A library to support a dataflow model of state"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogApiDoc","name":"clojure.contrib.datalog","author":"Jeffrey Straszheim","doc":"A Clojure implementation of Datalog"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc","name":"clojure.contrib.datalog.database"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc","name":"clojure.contrib.datalog.literals"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/magic.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogMagicApiDoc","name":"clojure.contrib.datalog.magic"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc","name":"clojure.contrib.datalog.rules"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/softstrat.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogSoftstratApiDoc","name":"clojure.contrib.datalog.softstrat"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/util.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogUtilApiDoc","name":"clojure.contrib.datalog.util"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/def.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDefApiDoc","name":"clojure.contrib.def","author":"Stephen C. Gilardi","doc":"def.clj provides variants of def that make including doc strings and\nmaking private definitions more succinct."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc","name":"clojure.contrib.duck-streams","author":"Stuart Sierra","doc":"This file defines \"duck-typed\" I/O utility functions for Clojure.\n           The 'reader' and 'writer' functions will open and return an\n           instance of java.io.BufferedReader and java.io.PrintWriter,\n           respectively, for a variety of argument types -- filenames as\n           strings, URLs, java.io.File's, etc.  'reader' even works on http\n           URLs.\n\n           Note: this is not really \"duck typing\" as implemented in languages\n           like Ruby.  A better name would have been \"do-what-I-mean-streams\"\n           or \"just-give-me-a-stream\", but ducks are funnier."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/error_kit.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribErrorKitApiDoc","name":"clojure.contrib.error-kit","author":"Chris Houser","doc":"EXPERIMENTAL\nSystem for defining and using custom errors\nPlease contact Chouser if you have any suggestions for better names\nor API adjustments."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/except.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribExceptApiDoc","name":"clojure.contrib.except","author":"Stephen C. Gilardi","doc":"Provides functions that make it easy to specify the class and message\nwhen throwing an Exception or Error. The optional message is formatted\nusing clojure/format."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/fcase.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFcaseApiDoc","name":"clojure.contrib.fcase","author":"Stuart Sierra","doc":"This file defines a generic \"case\" macro called \"fcase\" which takes\nthe equality-testing function as an argument.  It also defines a\ntraditional \"case\" macro that tests using \"=\" and variants that\ntest for regular expressions and class membership.\n\n\nNote (December 23, 2008): This library has been supplanted by the\ninclusion of \"condp\" in clojure.core as of Clojure SVN rev. 1180."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc","name":"clojure.contrib.find-namespaces","author":"Stuart Sierra","doc":"Search for ns declarations in dirs, JARs, or CLASSPATH"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/gen_html_docs.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenHtmlDocsApiDoc","name":"clojure.contrib.gen-html-docs","author":"Craig Andera","doc":"Generates a single HTML page that contains the documentation for\none or more Clojure libraries."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/arithmetic.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericArithmeticApiDoc","name":"clojure.contrib.generic.arithmetic","author":"Konrad Hinsen","doc":"Generic arithmetic interface\n           This library defines generic versions of + - * / as multimethods\n           that can be defined for any type. The minimal required \n           implementations for a type are binary + and * plus unary - and /.\n           Everything else is derived from these automatically. Explicit\n           binary definitions for - and / can be provided for\n           efficiency reasons."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericCollectionApiDoc","name":"clojure.contrib.generic.collection","author":"Konrad Hinsen","doc":"Generic arithmetic interface\n           This library defines generic versions of common\n           collection-related functions as multimethods that can be\n           defined for any type."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/comparison.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericComparisonApiDoc","name":"clojure.contrib.generic.comparison","author":"Konrad Hinsen","doc":"Generic comparison interface\n           This library defines generic versions of = < > <= >= zero?\n           as multimethods that can be defined for any type. Of the\n           greater/less-than relations, types must minimally implement >."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/functor.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericFunctorApiDoc","name":"clojure.contrib.generic.functor","author":"Konrad Hinsen","doc":"Generic functor interface (fmap)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc","name":"clojure.contrib.generic.math-functions","author":"Konrad Hinsen","doc":"Generic math function interface\n           This library defines generic versions of common mathematical\n           functions such as sqrt or sin as multimethods that can be\n           defined for any type."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc","name":"clojure.contrib.graph","author":"Jeffrey Straszheim","doc":"Basic graph theory algorithms"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/greatest_least.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGreatestLeastApiDoc","name":"clojure.contrib.greatest-least","author":"Vincent Foley","doc":"Various functions for finding greatest and least values in a collection"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/import_static.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribImportStaticApiDoc","name":"clojure.contrib.import-static","author":"Stuart Sierra","doc":"Import static Java methods/fields into Clojure"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/jar.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJarApiDoc","name":"clojure.contrib.jar","author":"Stuart Sierra","doc":"Utilities for working with Java JAR files"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/java_utils.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavaUtilsApiDoc","name":"clojure.contrib.java-utils","author":"Stuart Halloway, Stephen C. Gilardi, Shawn Hoover, Perry Trolard","doc":"A set of utilties for dealing with Java stuff like files and properties.\n\n   Design goals:\n\n   (1) Ease-of-use. These APIs should be convenient. Performance is secondary.\n\n   (2) Duck typing. I hate having to think about the difference between\n       a string that names a file, and a File. Ditto for a ton of other \n       wrapper classes in the Java world (URL, InternetAddress). With these\n       APIs you should be able to think about domain equivalence, not type\n       equivalence.\n\n   (3) No bossiness. I am not marking any of these functions as private\n       the docstrings will tell you the intended usage but do what works for you. \t\t\t\t\t\n\n   Feedback welcome!\n\n   If something in this module violates the principle of least surprise, please \n   let me (Stu) and the Clojure community know via the mailing list.\n"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/javadoc/browse.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavadocBrowseApiDoc","name":"clojure.contrib.javadoc.browse","author":"Christophe Grand","doc":"Start a web browser from Clojure"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/json/read.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJsonReadApiDoc","name":"clojure.contrib.json.read","author":"Stuart Sierra","doc":"JavaScript Object Notation (JSON) parser\n\n           For more information on JSON, see http://www.json.org/\n\n           This library parses data in JSON format.  This is a fairly strict\n           implementation of JSON as described at json.org, not a full-fledged\n           JavaScript parser.  JavaScript functions and object constructors\n           are not supported.  Object field names must be quoted strings; they\n           may not be bare symbols.\n\n           If you want to convert map keys from strings to keywords, use\n           clojure.contrib.walk/keywordize-keys\n"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/json/write.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJsonWriteApiDoc","name":"clojure.contrib.json.write","author":"Stuart Sierra","doc":"JavaScript Object Notation (JSON) generator.\n\nThis library will generate JSON from the following types:\n * nil\n * all primitives (Boolean, Byte, Short, Integer, Long, Float, Double)\n * String (actually any CharSequence)\n * java.util.Map (including Clojure maps)\n * java.util.Collection (including Clojure vectors, lists, and sets)\n * Java arrays\n\nYou can extend this library to handle new types by adding methods to\nprint-json.\n\nThis library does NOT attempt to preserve round-trip equality between\nJSON and Clojure data types. That is, if you write a JSON string with\nthis library, then read it back with clojure.contrib.json.read, you\nwon't necessarily get the exact same data structure.  For example,\nClojure sets are written as JSON arrays, which will be read back as\nClojure vectors.\n\nIf you want indented output, try the clojure-json library at\nhttp://github.com/danlarkin/clojure-json\n\nThis implementation attempts to follow the description of JSON at\n<http://json.org/>.  Maps become JSON objects, all other collections\nbecome JSON arrays.  JSON object keys are always converted to strings.\nWithin strings, all non-ASCII characters are hexadecimal escaped.\n"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/lazy_seqs.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribLazySeqsApiDoc","name":"clojure.contrib.lazy-seqs","author":"Stephen C. Gilardi","doc":"\n==== Lazy sequences ====\n\n primes - based on the \"naive\" implemention described in [1] plus a\n          small \"wheel\" which eliminates multiples of 2, 3, 5, and\n          7 from consideration by incrementing past them. Also inspired\n          by code from Christophe Grand in [2].\n\n fibs   - all the Fibonacci numbers\n\n powers-of-2 - all the powers of 2\n\n ==== Lazy sequence functions ====\n\n (rotations, partition-all, shuffle, rand-elt  moved to seq_utils.clj)\n (permutations and combinations moved to combinatorics.clj)\n\n [1] http://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf\n [2] http://clj-me.blogspot.com/2008/06/primes.html\n"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/lazy_xml.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribLazyXmlApiDoc","name":"clojure.contrib.lazy-xml","author":"Chris Houser","doc":"Functions to parse xml lazily and emit back to text."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/macro_utils.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMacroUtilsApiDoc","name":"clojure.contrib.macro-utils","author":"Konrad Hinsen","doc":"Local macros and symbol macros\n\n           Local macros are defined by a macrolet form. They are usable only\n           inside its body. Symbol macros can be defined globally\n           (defsymbolmacro) or locally (symbol-macrolet). A symbol\n           macro defines a form that replaces a symbol during macro\n           expansion. Function arguments and symbols bound in let\n           forms are not subject to symbol macro expansion.\n\n           Local macros are most useful in the definition of the expansion\n           of another macro, they may be used anywhere. Global symbol\n           macros can be used only inside a with-symbol-macros form."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/macros.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMacrosApiDoc","name":"clojure.contrib.macros","author":"Konrad Hinsen","doc":"Various small macros"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/map_utils.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMapUtilsApiDoc","name":"clojure.contrib.map-utils","author":"Jason Wolfe, Chris Houser","doc":"Utilities for operating on Clojure maps."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/math.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMathApiDoc","name":"clojure.contrib.math","author":"Mark Engelberg","doc":"Math functions that deal intelligently with the various\ntypes in Clojure's numeric tower, as well as math functions\ncommonly found in Scheme implementations.\n\nexpt - (expt x y) is x to the yth power, returns an exact number\n  if the base is an exact number, and the power is an integer,\n  otherwise returns a double.\nabs - (abs n) is the absolute value of n\ngcd - (gcd m n) returns the greatest common divisor of m and n\nlcm - (lcm m n) returns the least common multiple of m and n\n\nThe behavior of the next three functions on doubles is consistent\nwith the behavior of the corresponding functions\nin Java's Math library, but on exact numbers, returns an integer.\n\nfloor - (floor n) returns the greatest integer less than or equal to n.\n  If n is an exact number, floor returns an integer,\n  otherwise a double.\nceil - (ceil n) returns the least integer greater than or equal to n.\n  If n is an exact number, ceil returns an integer,\n  otherwise a double.\nround - (round n) rounds to the nearest integer.\n  round always returns an integer.  round rounds up for values\n  exactly in between two integers.\n\n\nsqrt - Implements the sqrt behavior I'm accustomed to from PLT Scheme,\n  specifically, if the input is an exact number, and is a square\n  of an exact number, the output will be exact.  The downside\n  is that for the common case (inexact square root), some extra\n  computation is done to look for an exact square root first.\n  So if you need blazingly fast square root performance, and you\n  know you're just going to need a double result, you're better\n  off calling java's Math/sqrt, or alternatively, you could just\n  convert your input to a double before calling this sqrt function.\n  If Clojure ever gets complex numbers, then this function will\n  need to be updated (so negative inputs yield complex outputs).\nexact-integer-sqrt - Implements a math function from the R6RS Scheme\n  standard.  (exact-integer-sqrt k) where k is a non-negative integer,\n  returns [s r] where k = s^2+r and k < (s+1)^2.  In other words, it\n  returns the floor of the square root and the "},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/math/tests.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMathTestsApiDoc","name":"clojure.contrib.math.tests"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/miglayout.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMiglayoutApiDoc","name":"clojure.contrib.miglayout","author":"Stephen C. Gilardi","doc":"Clojure support for the MiGLayout layout manager\nhttp://www.miglayout.com/\n\nExample:\n\n  (use '[clojure.contrib.miglayout.test :as mlt :only ()])\n  (dotimes [i 5] (mlt/run-test i))\n\n"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/miglayout/internal.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMiglayoutInternalApiDoc","name":"clojure.contrib.miglayout.internal"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/miglayout/test.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMiglayoutTestApiDoc","name":"clojure.contrib.miglayout.test"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/mmap.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMmapApiDoc","name":"clojure.contrib.mmap","author":"Chris Houser","doc":"Functions for memory-mapping files, plus some functions that use a\nmmaped file for \"normal\" activies -- slurp, load-file, etc."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc","name":"clojure.contrib.monads","author":"Konrad Hinsen","doc":"This library contains the most commonly used monads as well\n           as macros for defining and using monads and useful monadic\n           functions."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/ns_utils.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribNsUtilsApiDoc","name":"clojure.contrib.ns-utils","author":"Stephen C. Gilardi","doc":"Namespace utilities"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc","name":"clojure.contrib.pprint","author":"Tom Faulhaber","doc":"This module comprises two elements:\n1) A pretty printer for Clojure data structures, implemented in the function \"pprint\"\n2) A Common Lisp compatible format function, implemented as \"cl-format\" because\n   Clojure is using the name \"format\" for its own format.\n\nThe most complete documentation can be found at http://github.com/tomfaulhaber/cl-format\nwhere the markdown README is currently displayed. I will be moving it into the\nclojure.contrib wiki RSN."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/ColumnWriter.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintColumnWriterApiDoc","name":"clojure.contrib.pprint.ColumnWriter"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/PrettyWriter.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintPrettyWriterApiDoc","name":"clojure.contrib.pprint.PrettyWriter"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/examples/hexdump.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintExamplesHexdumpApiDoc","name":"clojure.contrib.pprint.examples.hexdump"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/examples/multiply.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintExamplesMultiplyApiDoc","name":"clojure.contrib.pprint.examples.multiply"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/examples/props.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintExamplesPropsApiDoc","name":"clojure.contrib.pprint.examples.props"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/examples/show_doc.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintExamplesShowDocApiDoc","name":"clojure.contrib.pprint.examples.show-doc"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/utilities.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintUtilitiesApiDoc","name":"clojure.contrib.pprint.utilities"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/finite_distributions.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesFiniteDistributionsApiDoc","name":"clojure.contrib.probabilities.finite-distributions","author":"Konrad Hinsen","doc":"Finite probability distributions\n           This library defines a monad for combining finite probability\n           distributions."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc","name":"clojure.contrib.probabilities.monte-carlo","author":"Konrad Hinsen","doc":"Monte-Carlo method support\n\n           Monte-Carlo methods transform an input random number stream\n           (usually having a continuous uniform distribution in the\n           interval [0, 1)) into a random number stream whose distribution\n           satisfies certain conditions (usually the expectation value\n           is equal to some desired quantity). They are thus\n           transformations from one probability distribution to another one.\n\n           This library represents a Monte-Carlo method by a function that\n           takes as input the state of a random number stream with\n           uniform distribution (see\n           clojure.contrib.probabilities.random-numbers) and returns a\n           vector containing one sample value of the desired output\n           distribution and the final state of the input random number\n           stream. Such functions are state monad values and can be\n           composed using operations defined in clojure.contrib.monads."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/random_numbers.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesRandomNumbersApiDoc","name":"clojure.contrib.probabilities.random-numbers","author":"Konrad Hinsen","doc":"Random number streams\n\n           This library provides random number generators with a common\n           stream interface. They all produce pseudo-random numbers that are\n           uniformly distributed in the interval [0, 1), i.e. 0 is a\n           possible value but 1 isn't. For transformations to other\n           distributions, see clojure.contrib.probabilities.monte-carlo.\n\n           At the moment, the only generator provided is a rather simple\n           linear congruential generator."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/profile.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProfileApiDoc","name":"clojure.contrib.profile","author":"Stuart Sierra","doc":"Simple code profiling & timing measurement.\n\nWrap any section of code in the prof macro, giving it a name, like this:\n\n       (defn my-function [x y]\n         (let [sum (prof :addition (+ x y))\n               product (prof :multiplication (* x y))]\n           [sum product]))\n\nThe run your code in the profile macro, like this:\n\n       (profile (dotimes [i 10000] (my-function 3 4)))\n\nWhich prints a report for each named section of code:\n\n          Name      mean       min       max     count       sum\n      addition       265         0     37000     10000   2655000\nmultiplication       274         0     53000     10000   2747000\n\nTimes are measured in nanoseconds, to the maximum precision available\nunder the JVM.  See the function documentation for more details.\n"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/prxml.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPrxmlApiDoc","name":"clojure.contrib.prxml","author":"Stuart Sierra","doc":"Compact syntax for generating XML. See the documentation of \"prxml\" \nfor details."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_ln.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplLnApiDoc","name":"clojure.contrib.repl-ln","author":"Stephen C. Gilardi","doc":"A repl with that provides support for lines and line numbers in the\n           input stream."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_utils.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplUtilsApiDoc","name":"clojure.contrib.repl-utils","author":"Chris Houser","doc":"Utilities meant to be used interactively at the REPL"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc","name":"clojure.contrib.seq-utils","author":"Stuart Sierra (and others)","doc":"Sequence utilities for Clojure"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/server_socket.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribServerSocketApiDoc","name":"clojure.contrib.server-socket","author":"Craig McDaniel","doc":"Server socket library - includes REPL on socket"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/set.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSetApiDoc","name":"clojure.contrib.set","author":"Jason Wolfe","doc":"Clojure functions for operating on sets (supplemental to clojure.set)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/shell_out.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribShellOutApiDoc","name":"clojure.contrib.shell-out","author":"Chris Houser","doc":"Conveniently launch a sub-process providing to its stdin and\ncollecting its stdout"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/singleton.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSingletonApiDoc","name":"clojure.contrib.singleton","author":"Stuart Sierra","doc":"Singleton functions"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc","name":"clojure.contrib.sql","author":"Stephen C. Gilardi","doc":"A Clojure interface to sql databases via jdbc\n\n           See clojure.contrib.sql.test for an example"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/internal.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlInternalApiDoc","name":"clojure.contrib.sql.internal"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc","name":"clojure.contrib.sql.test"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stacktrace.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStacktraceApiDoc","name":"clojure.contrib.stacktrace","author":"Stuart Sierra","doc":"Print Clojure-centric stack traces"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStrUtilsApiDoc","name":"clojure.contrib.str-utils","author":"Stuart Sierra","doc":"String utilities for Clojure"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStreamUtilsApiDoc","name":"clojure.contrib.stream-utils","author":"Konrad Hinsen","doc":"Functions for setting up computational pipelines via data streams.\n\n           NOTE: This library is experimental. It may change significantly\n                 with future release.\n\n           This library defines:\n           - an abstract stream type, whose interface consists of the\n             multimethod stream-next\n           - a macro for implementing streams\n           - implementations of stream for\n             1) Clojure sequences, and vectors\n             2) nil, representing an empty stream\n           - tools for writing stream transformers, including the\n             monad stream-m\n           - various utility functions for working with streams\n\n           Streams are building blocks in the construction of computational\n           pipelines. A stream is represented by its current state plus\n           a function that takes a stream state and obtains the next item\n           in the stream as well as the new stream state. The state is\n           implemented as a Java class or a Clojure type (as defined by the\n           function clojure.core/type), and the function is provided as an\n           implementation of the multimethod stream-next for this class or type.\n\n           While setting up pipelines using this mechanism is somewhat more\n           cumbersome than using Clojure's lazy seq mechanisms, there are a\n           few advantages:\n           - The state of a stream can be stored in any Clojure data structure,\n             and the stream can be re-generated from it any number of times.\n             Any number of states can be stored this way.\n           - The elements of the stream are never cached, so keeping a reference\n             to a stream state does not incur an uncontrollable memory penalty.\n\n           Note that the stream mechanism is thread-safe as long as the\n           concrete stream implementations do not use any mutable state.\n\n           Stream transformers take any number of input streams and produce one\n           output stream. They are typically written using the stream-m\n           monad. In the definition of a stream transformer, (pick s) returns\n           the next value of stream argument s, whereas pick-all returns the\n           next value of all stream arguments in the form of a vector."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/template.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTemplateApiDoc","name":"clojure.contrib.template","author":"Stuart Sierra","doc":"Anonymous functions that pre-evaluate sub-expressions\n\n           This file defines macros for using template expressions.  These are\n           useful for writing macros.\n\n           A template is an expression containing \"holes\" represented by the\n           symbols _1, _2, _3, and so on.  (\"_\" is a synonym for \"_1\".)\n\n           The \"template\" macro is similar to #().  It returns an anonymous\n           function containing the body of the template.  Unlike #() or \"fn\",\n           however, any expressions that do not have any holes will be\n           evaluated only once, at the time the function is created, not every\n           time the function is called.\n\n           Examples:\n\n           Assume we have some big, slow calculation.\n             (defn think-hard []\n               (Thread/sleep 1000)\n               1000)\n\n           With #(), think-hard gets called every time.\n             (time (doall (map #(+ % (think-hard))\n                               (range 5))))\n             => \"Elapsed time: 5001.33455 msecs\"\n             => (1000 1001 1002 1003 1004)\n\n           With a template, think-hard only gets called once.\n             (time (doall (map (template (+ _ (think-hard)))\n                               (range 5))))\n             => \"Elapsed time: 1000.907326 msecs\"\n             => (1000 1001 1002 1003 1004)\n\n           There is also the do-template macro, which works differently.  It\n           calls the same template multiple times, filling in values, and puts\n           it all inside a \"do\" block.  It will split up the values based on\n           the number of holes in the template.\n\n             (do-template (foo _1 _2) :a :b :c :d)\n             expands to: (do (foo :a :b) (foo :c :d))\n\n             (do-template (foo _1 _2 _3) 10 11 12 13 14 15)\n             expands to: (foo 10 11 12) (foo 13 14 15)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc","name":"clojure.contrib.test-is","author":"Stuart Sierra, with contributions and suggestions by \nChas Emerick, Allen Rohner, and Stuart Halloway","doc":"Inspired by many Common Lisp test frameworks and clojure/test,\n   this file is a Clojure test framework.\n\n   ASSERTIONS\n\n   The core of the library is the \"is\" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (= 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith \"abcde\" \"ab\"))\n\n   You can type an \"is\" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user> (is (= 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (= 5 (+ 2 2))\n         actual: (not (= 5 4))\n       false\n\n   The \"expected:\" line shows you the original expression, and the\n   \"actual:\" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not = to 5.  Finally, the\n   \"false\" on the last line is the value returned from the\n   expression.  The \"is\" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   \"(is (thrown? c ...))\" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0))) \n\n   \"(is (thrown-with-msg? c re ...))\" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #\"Divide by zero\"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   \"is\" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (= 5 (+ 2 2)) \"Crazy arithmetic\")\n\n   In addition, you can document groups of assertions with the\n   \"testing\" macro, which takes a string followed by any number of\n   \"is\" assertions.  The string will be included in failure reports.\n   Calls to \"testing\" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec <http://rspec.info/>\n\n   (testing \"Arithmetic\"\n     (testing \"with positive integers\"\n       (= 4 (+ 2 2))\n       (= 7 (+ 3 4)))\n     (testing \"with negative integers\"\n       (= -4 (+ -2 -2))\n       (= -1 (+ 3 -4))))\n\n   Note that, unlike RSpec, the \"testing\" macro may only be used\n   INSIDE a \"deftest\" or \"with-test\" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The \"with-test\" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (= 4 (my-function 2 2)))\n     (is (= 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id=51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (= 4 (+ 2 2)))\n     (is (= 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (= 1 (- 4 3)))\n     (is (= 3 (- 7 4))))\n\n   This creates functions named \"addition\" and \"subtraction\", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel's \"Practical Common Lisp\"\n   <http://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html>\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   \"(arithmetic addition)\", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function \"(run-tests namespaces...)\":\n\n   (run-tests 'your.namespace 'some.other.namespace)\n\n   If you don't specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use \"(run-all-tests)\".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the \"arithmetic\" example above, you\n   probably do not want the \"addition\" and \"subtraction\" tests run\n   separately.  In that case, you must define a special function\n   named \"test-ns-hook\" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable \"*load-tests*\" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by \"with-test\" or \"deftest\".\n\n\n   FIXTURES (new)\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  \"each\"\n   fixtures are run repeatedly, once for each test function created\n   with \"deftest\" or \"with-test\".  \"each\" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   \"each\" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a \"once\" fixture, is only run once,\n   around ALL the tests in the namespace.  \"once\" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach \"once\" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.contrib.duck-streams/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the \"is\" macro by defining new\n   methods for the \"assert-expr\" multimethod.  These methods are\n   called during expansion of the \"is\" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the \"report\" function: (report event)\n\n   The 'event' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to 'is'\n\n   The \"testing\" strings will be a list in \"*testing-contexts*\", and\n   the vars being tested will be a list in \"*testing-vars*\".\n\n   Your \"report\" function should wrap any printing calls in the\n   \"with-test-out\" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsTapApiDoc","name":"clojure.contrib.test-is.tap"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/test_fixtures.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsTestFixturesApiDoc","name":"clojure.contrib.test-is.test-fixtures"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tests.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsTestsApiDoc","name":"clojure.contrib.test-is.tests"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/trace.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTraceApiDoc","name":"clojure.contrib.trace","author":"Stuart Sierra","doc":"This file defines simple \"tracing\" macros to help you see what your\ncode is doing."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/types.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTypesApiDoc","name":"clojure.contrib.types","author":"Konrad Hinsen","doc":"General and algebraic data types"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/walk.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWalkApiDoc","name":"clojure.contrib.walk","author":"Stuart Sierra","doc":"This file defines a generic tree walker for Clojure data\nstructures.  It takes any data structure (list, vector, map, set,\nseq), calls a function on every element, and uses the return value\nof the function in place of the original.  This makes it fairly\neasy to write recursive search-and-replace functions, as shown in\nthe examples.\n\nNote: \"walk\" supports all Clojure data structures EXCEPT maps\ncreated with sorted-map-by.  There is no (obvious) way to retrieve\nthe sorting function."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/with_ns.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWithNsApiDoc","name":"clojure.contrib.with-ns","author":"Stuart Sierra","doc":"Temporary namespace macro"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterApiDoc","name":"clojure.contrib.zip-filter","author":"Chris Houser","doc":"System for filtering trees and nodes generated by zip.clj in\ngeneral, and xml trees in particular.\n"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterXmlApiDoc","name":"clojure.contrib.zip-filter.xml"}],"vars":[{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#30","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#add","name":"add","arglists":[["acc","item"]],"doc":"Add item to the accumulator acc. The exact meaning of adding an\n   an item depends on the type of the accumulator."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#36","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#add-items","name":"add-items","arglists":[["acc","items"]],"doc":"Add all elements of a collection coll to the accumulator acc."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#41","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#combine","name":"combine","arglists":[["&","accs"]],"doc":"Combine the values of the accumulators acc1 and acc2 into a\n   single accumulator of the same type."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#270","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-counter","name":"empty-counter","doc":"An empty counter accumulator. Its value is a map that stores for\n   every item the number of times it was added."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#291","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-counter-with-total","name":"empty-counter-with-total","doc":"An empty counter-with-total accumulator. It works like the counter\n   accumulator, except that the total number of items added is stored as the\n   value of the key :total."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#87","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-list","name":"empty-list","doc":"An empty list accumulator. Adding an item appends it at the beginning."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#144","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-map","name":"empty-map","doc":"An empty map accumulator. Items to be added must be [key value] pairs."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#184","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-maximum","name":"empty-maximum","doc":"An empty maximum accumulator. Only numbers can be added."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#231","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-mean-variance","name":"empty-mean-variance","doc":"An empty mean-variance accumulator, combining sample mean and\n   sample variance. Only numbers can be added."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#206","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-min-max","name":"empty-min-max","doc":"An empty min-max accumulator, combining minimum and maximum.\n   Only numbers can be added."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#190","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-minimum","name":"empty-minimum","doc":"An empty minimum accumulator. Only numbers can be added."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#176","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-product","name":"empty-product","doc":"An empty sum accumulator. Only numbers can be added."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#101","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-queue","name":"empty-queue","doc":"An empty queue accumulator. Adding an item appends it at the end."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#115","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-set","name":"empty-set","doc":"An empty set accumulator."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#129","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-string","name":"empty-string","doc":"An empty string accumulator. Adding an item (string or character)\n   appends it at the end."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#173","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-sum","name":"empty-sum","doc":"An empty sum accumulator. Only numbers can be added."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#309","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-tuple","name":"empty-tuple","arglists":[["empty-accumulators"]],"doc":"Returns an accumulator tuple with the supplied empty-accumulators\n   as its value. Accumulator tuples consist of several accumulators that\n   work in parallel. Added items must be sequences whose number of elements\n   matches the number of sub-accumulators."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/accumulators.clj#73","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAccumulatorsApiDoc#empty-vector","name":"empty-vector","doc":"An empty vector accumulator. Adding an item appends it at the end."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/agent_utils.clj#22","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAgentUtilsApiDoc#capture-and-send","name":"capture-and-send","arglists":[["vars","agent","action","&","args"]],"doc":"Capture the current value of the specified vars and rebind \n  them on the agent thread before executing the action.\n  \n  Example:\n    (capture-and-send [*out*] a f b c)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/auto_agent.clj#59","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribAutoAgentApiDoc#auto-agent","name":"auto-agent","arglists":[["expr"]],"doc":"Creates an agent whose value is the result of evaluating expr.\n  Whenever one of the agents/atoms/refs dererenced within expr\n  changes, expr is reevaluated and this agent's state is set to its\n  new value."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/classpath.clj#23","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribClasspathApiDoc#classpath","name":"classpath","arglists":[[]],"doc":"Returns a sequence of File objects of the elements on CLASSPATH."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/classpath.clj#30","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribClasspathApiDoc#classpath-directories","name":"classpath-directories","arglists":[[]],"doc":"Returns a sequence of File objects for the directories on classpath."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/classpath.clj#35","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribClasspathApiDoc#classpath-jarfiles","name":"classpath-jarfiles","arglists":[[]],"doc":"Returns a sequence of JarFile objects for the JAR files on classpath."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/combinatorics.clj#107","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCombinatoricsApiDoc#cartesian-product","name":"cartesian-product","arglists":[["&","seqs"]],"doc":"All the ways to take one item from each sequence"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/combinatorics.clj#90","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCombinatoricsApiDoc#combinations","name":"combinations","arglists":[["items","n"]],"doc":"All the unique ways of taking n different elements from items"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/combinatorics.clj#151","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCombinatoricsApiDoc#lex-permutations","name":"lex-permutations","arglists":[["c"]],"doc":"Fast lexicographic permutation generator for a sequence of numbers"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/combinatorics.clj#160","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCombinatoricsApiDoc#permutations","name":"permutations","arglists":[["items"]],"doc":"All the permutations of items, lexicographic by index"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/combinatorics.clj#127","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCombinatoricsApiDoc#selections","name":"selections","arglists":[["items","n"]],"doc":"All the ways of taking n (possibly the same) elements from the sequence of items"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/combinatorics.clj#101","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCombinatoricsApiDoc#subsets","name":"subsets","arglists":[["items"]],"doc":"All the subsets of items"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/command_line.clj#88","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCommandLineApiDoc#with-command-line","name":"with-command-line","arglists":[["args","desc","cmdspec","&","body"]],"doc":"Bind locals to command-line args."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/cond.clj#18","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCondApiDoc#cond-let","name":"cond-let","arglists":[["bindings","&","clauses"]],"doc":"Takes a binding-form and a set of test/expr pairs. Evaluates each test\n  one at a time. If a test returns logical true, cond-let evaluates and\n  returns expr with binding-form bound to the value of test and doesn't\n  evaluate any of the other tests or exprs. To provide a default value\n  either provide a literal that evaluates to logical true and is\n  binding-compatible with binding-form, or use :else as the test and don't\n  refer to any parts of binding-form in the expr. (cond-let binding-form)\n  returns nil."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/condt.clj#31","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCondtApiDoc#condt","name":"condt","arglists":[["expr","&","clauses"]],"doc":"expr is a template expression (see template), clauses are test/expr\n  pairs like cond.  Evalautes the template on each test value, one at\n  a time.  If a test returns logical true, condt evaluates the\n  corresponding expr and returns its value.  If none of the tests are\n  true, and there are an odd number of clauses, the last clause is\n  evaluated, otherwise returns nil."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/condt.clj#50","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCondtApiDoc#econdt","name":"econdt","arglists":[["expr","&","clauses"]],"doc":"Like condt but throws Exception if no tests match."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/core.clj#30","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCoreApiDoc#-?>","name":"-?>","arglists":[["x","form"],["x","form","&","forms"]],"doc":"Same as clojure.core/-> but returns nil as soon as the threaded value is nil itself (thus short-circuiting any pending computation).\n   Examples :\n   (-?> \"foo\" .toUpperCase (.substring 1)) returns \"OO\"\n   (-?> nil .toUpperCase (.substring 1)) returns nil\n   "},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/core.clj#38","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribCoreApiDoc#.?.","name":".?.","arglists":[["x","form"],["x","form","&","forms"]],"doc":"Same as clojure.core/.. but returns nil as soon as the threaded value is nil itself (thus short-circuiting any pending computation).\n   Examples :\n   (.?. \"foo\" .toUpperCase (.substring 1)) returns \"OO\"\n   (.?. nil .toUpperCase (.substring 1)) returns nil\n   "},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#460","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#add-cell-watcher","name":"add-cell-watcher","arglists":[["cell","key","fun"]],"doc":"Adds a watcher to a cell to respond to changes of value.  The is a\n   function of 4 values: a key, the cell, its old value, its new\n   value.  This is implemented using Clojure's add-watch to the\n   underlying ref, and shared its sematics"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#210","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#add-cells","name":"add-cells","arglists":[["df","cells"]],"doc":"Given a collection of cells, add them to the dataflow."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#188","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#build-dataflow","name":"build-dataflow","arglists":[["cs"]],"doc":"Given a collection of cells, build and return a dataflow object"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#231","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#build-source-cell","name":"build-source-cell","arglists":[["name","init"]],"doc":"Builds a source cell"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#292","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#build-standard-cell","name":"build-standard-cell","arglists":[["name","deps","fun","expr"]],"doc":"Builds a standard cell"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#298","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#build-validator-cell","name":"build-validator-cell","arglists":[["deps","fun","expr"]],"doc":"Builds a validator cell"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#304","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#cell","name":"cell","arglists":[["type","&","data"]],"doc":"Build a standard cell, like this:\n\n    (cell fred\n       (* ?mary ?joe))\n\n   Which creates a cell named fred that is the product of a cell mary and cell joe\n\n   Or:\n\n    (cell joe\n      (apply * ?*sally))\n\n   Which creates a cell that applies * to the collection of all cells named sally\n\n   Or:\n\n    (cell :source fred 0)\n\n   Which builds a source cell fred with initial value 0\n\n   Or:\n\n     (cell :validator (when (< ?fred ?sally)\n                          (throwf \"%s must be greater than %s\" ?fred ?sally))\n\n   Which will perform the validation"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#348","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#display-cell","name":"display-cell","doc":"A 'readable' form of the cell"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#372","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#eval-cell","name":"eval-cell","doc":"Evaluate a dataflow cell.  Return [changed, old val]"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#94","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#get-cell","name":"get-cell","arglists":[["df","name"]],"doc":"Get the single cell named by name"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#89","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#get-cells","name":"get-cells","arglists":[["df","name"]],"doc":"Get all the cells named by name"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#136","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#get-old-value","name":"get-old-value","arglists":[["df","env","name"]],"doc":"Looks up an old value"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#108","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#get-source-cells","name":"get-source-cells","arglists":[["df"]],"doc":"Returns a collection of source cells from the dataflow"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#115","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#get-value","name":"get-value","arglists":[["df","name"]],"doc":"Gets a value from the df matching the passed symbol.\n   Signals an error if the name is not present, or if it not a single\n   value."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#143","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#get-value-from-cell","name":"get-value-from-cell","arglists":[["cell"]],"doc":"Given a cell, get its value"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#126","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#get-values","name":"get-values","arglists":[["df","name"]],"doc":"Gets a collection of values from the df by name"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#199","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#print-dataflow","name":"print-dataflow","arglists":[["df"]],"doc":"Prints a dataflow, one cell per line"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#218","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#remove-cells","name":"remove-cells","arglists":[["df","cells"]],"doc":"Given a collection of cells, remove them from the dataflow."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#103","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#source-cell?","name":"source-cell?","arglists":[["cell"]],"doc":"Is this cell a source cell?"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow.clj#438","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDataflowApiDoc#update-values","name":"update-values","arglists":[["df","data"]],"doc":"Given a dataflow, and a map of name-value pairs, update the\n   dataflow by binding the new values.  Each name must be of a source\n   cell"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog.clj#47","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogApiDoc#build-work-plan","name":"build-work-plan","arglists":[["rules","query"]],"doc":"Given a list of rules and a query, build a work plan that can be\n   used to execute the query."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog.clj#57","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogApiDoc#run-work-plan","name":"run-work-plan","arglists":[["work-plan","database","query-bindings"]],"doc":"Given a work plan, a database, and some query bindings, run the\n   work plan and return the results."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#85","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#add-index","name":"add-index","arglists":[["db","name","key"]],"doc":"Adds an index to an empty relation named name"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#80","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#add-relation","name":"add-relation","arglists":[["db","name","keys"]],"doc":"Adds a relation to the database"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#171","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#add-tuple","name":"add-tuple","arglists":[["db","rel-name","tuple"],["rel","tuple"]],"doc":"Two forms:\n\n   [db relation-name tuple] adds tuple to the named relation.  Returns\n   the new database.\n\n   [rel tuple] adds to the relation object.  Returns the new relation."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#206","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#add-tuples","name":"add-tuples","arglists":[["db","&","tupls"]],"doc":"Adds a collection of tuples to the db, as\n   (add-tuples db\n      [:rel-name :key-1 1 :key-2 2]\n      [:rel-name :key-1 2 :key-2 3])"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#252","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#any-match?","name":"any-match?","arglists":[["db","rn","pt"]],"doc":"Finds if there are any matching records for the partial tuple"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#143","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#database-counts","name":"database-counts","arglists":[["db"]],"doc":"Returns a map with the count of elements in each relation."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#276","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#database-merge","name":"database-merge","arglists":[["dbs"]],"doc":"Merges databases together"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#281","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#database-merge-parallel","name":"database-merge-parallel","arglists":[["dbs"]],"doc":"Merges databases together in parallel"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#75","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#datalog-relation","name":"datalog-relation","arglists":[["schema","data","indexes"]],"doc":"Creates a relation"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#95","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#ensure-relation","name":"ensure-relation","arglists":[["db","name","keys","indexes"]],"doc":"If the database lacks the named relation, add it"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#129","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#get-relation","name":"get-relation","arglists":[["db","rel-name"]],"doc":"Get a relation object by name"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#108","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#make-database","name":"make-database","arglists":[["&","commands"]],"doc":"Makes a database, like this\n   (make-database\n     (relation :fred [:mary :sue])\n     (index :fred :mary)\n     (relation :sally [:jen :becky])\n     (index :sally :jen)\n     (index :sally :becky))"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#266","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#merge-relations","name":"merge-relations","arglists":[["r1","r2"]],"doc":"Merges two relations"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#189","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#remove-tuple","name":"remove-tuple","arglists":[["db","rel-name","tuple"],["rel","tuple"]],"doc":"Two forms:\n\n   [db relation-name tuple] removes the tuple from the named relation,\n   returns a new database.\n\n   [rel tuple] removes the tuple from the relation.  Returns the new\n   relation."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#134","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#replace-relation","name":"replace-relation","arglists":[["db","rel-name","rel"]],"doc":"Add or replace a fully constructed relation object to the database."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/database.clj#247","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogDatabaseApiDoc#select","name":"select","arglists":[["db","rn","pt"]],"doc":"finds all matching tuples to the partial tuple (pt) in the relation named (rn)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#254","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#adorned-literal","name":"adorned-literal","doc":"When passed a set of bound columns, returns the adorned literal"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#133","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#build-atom","name":"build-atom","arglists":[["f","type"]],"doc":"Returns an unevaluated expression (to be used in a macro) of an\n   atom."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#128","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#build-literal","name":"build-literal","doc":"(Returns an unevaluated expression (to be used in macros) of a\n   literal."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#303","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#build-seed-bindings","name":"build-seed-bindings","arglists":[["s"]],"doc":"Given a seed literal, already adorned and in magic form, convert\n   its bound constants to new variables."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#320","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#delta-literal","name":"delta-literal","arglists":[["l"]],"doc":"Given a literal l, return a delta version"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#164","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#display-literal","name":"display-literal","doc":"Converts a struct representing a literal to a normal list"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#271","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#get-adorned-bindings","name":"get-adorned-bindings","arglists":[["pred"]],"doc":"Get the bindings from this adorned literal."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#276","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#get-base-predicate","name":"get-base-predicate","arglists":[["pred"]],"doc":"Get the base predicate from this predicate."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#202","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#get-cs-from-vs","name":"get-cs-from-vs","doc":"From a set of vars, get the columns"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#219","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#get-self-bound-cs","name":"get-self-bound-cs","doc":"Get the columns that are bound withing the literal."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#187","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#get-vs-from-cs","name":"get-vs-from-cs","doc":"From a set of columns, return the vars"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#361","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#join-literal","name":"join-literal","doc":"Given a database (db), a literal (lit) and a seq of bindings (bs),\n   return a new seq of bindings by joining this literal."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#236","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#literal-appropriate?","name":"literal-appropriate?","doc":"When passed a set of bound vars, determines if this literal can be\n   used during this point of a SIP computation."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#48","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#literal-columns","name":"literal-columns","doc":"Return the column names this applies to"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#296","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#literal-magic?","name":"literal-magic?","arglists":[["lit"]],"doc":"Is this literal magic?"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#44","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#literal-predicate","name":"literal-predicate","doc":"Return the predicate/relation this conditional operates over"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#52","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#literal-vars","name":"literal-vars","doc":"Returns the logic vars used by this literal"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#286","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#magic-literal","name":"magic-literal","arglists":[["l"]],"doc":"Create a magic version of this adorned predicate."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#314","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#negated-literal","name":"negated-literal","arglists":[["l"]],"doc":"Given a literal l, return a negated version"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#112","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#negated?","name":"negated?","arglists":[["l"]],"doc":"Is this literal a negated literal?"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#60","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#negative-vars","name":"negative-vars","doc":"Returns the logic vars used in a negative position"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#56","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#positive-vars","name":"positive-vars","doc":"Returns the logic vars used in a positive position"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#117","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#positive?","name":"positive?","arglists":[["l"]],"doc":"Is this a positive literal?"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/literals.clj#393","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogLiteralsApiDoc#project-literal","name":"project-literal","arglists":[["db","lit","bs"],["db","lit","bs","var?"]],"doc":"Project a stream of bindings onto a literal/relation. Returns a new\n   db."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/magic.clj#26","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogMagicApiDoc#adorn-query","name":"adorn-query","arglists":[["q"]],"doc":"Adorn a query"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/magic.clj#31","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogMagicApiDoc#adorn-rules-set","name":"adorn-rules-set","arglists":[["rs","q"]],"doc":"Adorns the given rules-set for the given query.  (rs) is a\n   rules-set, (q) is an adorned query."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/magic.clj#78","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogMagicApiDoc#build-partial-tuple","name":"build-partial-tuple","arglists":[["q","bindings"]],"doc":"Given a query and a set of bindings, build a partial tuple needed\n   to extract the relation from the database."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/magic.clj#98","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogMagicApiDoc#magic-transform","name":"magic-transform","arglists":[["rs"],["rs","i-preds"]],"doc":"Return a magic transformation of an adorned rules-set (rs).  The\n   (i-preds) are the predicates of the intension database.  These\n   default to the predicates within the rules-set."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/magic.clj#90","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogMagicApiDoc#seed-predicate-for-insertion","name":"seed-predicate-for-insertion","arglists":[["q"]],"doc":"Given a query, return the predicate to use for database insertion."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/magic.clj#63","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogMagicApiDoc#seed-relation","name":"seed-relation","arglists":[["q"]],"doc":"Given a magic form of a query, give back the literal form of its seed\n   relation"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/magic.clj#71","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogMagicApiDoc#seed-rule","name":"seed-rule","arglists":[["q"]],"doc":"Given an adorned query, give back its seed rule"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj#66","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc#<-","name":"<-","arglists":[["hd","&","body"]],"doc":"Build a datalog rule.  Like this:\n\n   (<- (:head :x ?x :y ?y) (:body-1 :x ?x :y ?y) (:body-2 :z ?z) (not! :body-3 :x ?x) (if > ?y ?z))"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj#84","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc#?-","name":"?-","arglists":[["&","q"]],"doc":"Define a datalog query"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj#161","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc#all-predicates","name":"all-predicates","arglists":[["rs"]],"doc":"Given a rules-set, return all defined predicates"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj#182","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc#apply-rule","name":"apply-rule","arglists":[["db","rule"],["db-1","db-2","rule"]],"doc":"Apply the rule against db-1, adding the results to the appropriate\n   relation in db-2.  The relation will be created if needed."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj#98","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc#compute-sip","name":"compute-sip","arglists":[["bindings","i-preds","rule"]],"doc":"Given a set of bound column names, return an adorned sip for this\n   rule.  A set of intensional predicates should be provided to\n   determine what should be adorned."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj#37","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc#display-query","name":"display-query","arglists":[["query"]],"doc":"Return a query in a readable format."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj#30","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc#display-rule","name":"display-rule","arglists":[["rule"]],"doc":"Return the rule in a readable format."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj#45","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc#is-safe?","name":"is-safe?","arglists":[["rule"]],"doc":"Is the rule safe according to the datalog protocol?"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj#127","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc#make-rules-set","name":"make-rules-set","arglists":[["rs"]],"doc":"Given an existing set of rules, make it a 'rules-set' for\n   printing."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj#166","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc#non-base-rules","name":"non-base-rules","arglists":[["rs"]],"doc":"Return a collection of rules that depend, somehow, on other rules"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj#151","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc#predicate-map","name":"predicate-map","arglists":[["rs"]],"doc":"Given a rules-set, return a map of rules keyed by their predicates.\n   Each value will be a set of rules."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj#79","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc#return-rule-data","name":"return-rule-data","arglists":[["rule"]],"doc":"Returns an untypted rule that will be fully printed"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/rules.clj#135","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogRulesApiDoc#rules-set","name":"rules-set","arglists":[["&","rules"]],"doc":"Given a collection of rules return a rules set"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/softstrat.clj#115","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogSoftstratApiDoc#build-soft-strat-work-plan","name":"build-soft-strat-work-plan","arglists":[["rs","q"]],"doc":"Return a work plan for the given rules-set and query"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/softstrat.clj#121","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogSoftstratApiDoc#get-all-relations","name":"get-all-relations","arglists":[["ws"]],"doc":"Return a set of all relation names defined in this workplan"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/util.clj#33","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogUtilApiDoc#is-query-var?","name":"is-query-var?","arglists":[["sym"]],"doc":"Is this a query variable: e.g. a symbol prefixed with ??"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/util.clj#25","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogUtilApiDoc#is-var?","name":"is-var?","arglists":[["sym"]],"doc":"Is this a logic variable: e.g. a symbol prefixed with a ?"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/util.clj#49","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogUtilApiDoc#keys-to-vals","name":"keys-to-vals","arglists":[["m","ks"]],"doc":"Given a map and a collection of keys, return the collection of vals"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/util.clj#41","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogUtilApiDoc#map-values","name":"map-values","arglists":[["f","hash"]],"doc":"Like map, but works over the values of a hash map"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/util.clj#62","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogUtilApiDoc#preduce","name":"preduce","arglists":[["f","data"]],"doc":"Similar to merge-with, but the contents of each key are merged in\n   parallel using f.\n\n   f - a function of 2 arguments.\n   data - a collection of hashes."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/util.clj#54","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogUtilApiDoc#reverse-map","name":"reverse-map","arglists":[["m"]],"doc":"Reverse the keys/values of a map"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/datalog/util.clj#82","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDatalogUtilApiDoc#trace-datalog","name":"trace-datalog","arglists":[["&","body"]],"doc":"If *test-datalog* is set to true, run the enclosed commands"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/def.clj#66","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDefApiDoc#defalias","name":"defalias","arglists":[["name","orig"],["name","orig","doc"]],"doc":"Defines an alias for a var: a new var with the same root binding (if\n  any) and similar metadata. The metadata of the alias is its initial\n  metadata (as provided by def) merged into the metadata of the original."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/def.clj#83","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDefApiDoc#defhinted","name":"defhinted","arglists":[["sym","init"]],"doc":"Defines a var with a type hint matching the class of the given\n  init.  Be careful about using any form of 'def' or 'binding' to a\n  value of a different type.  See http://paste.lisp.org/display/73344"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/def.clj#39","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDefApiDoc#defmacro-","name":"defmacro-","arglists":[["name","&","decls"]],"doc":"Same as defmacro but yields a private definition"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/def.clj#59","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDefApiDoc#defonce-","name":"defonce-","arglists":[["name","expr"],["name","expr","doc"]],"doc":"Same as defonce but yields a private definition"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/def.clj#54","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDefApiDoc#defstruct-","name":"defstruct-","arglists":[["name","&","decls"]],"doc":"Same as defstruct but yields a private definition"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/def.clj#32","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDefApiDoc#defunbound","name":"defunbound","arglists":[["name"],["name","doc"]],"doc":"Defines an unbound var with optional doc string"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/def.clj#49","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDefApiDoc#defunbound-","name":"defunbound-","arglists":[["name","&","decls"]],"doc":"Same as defunbound but yields a private definition"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/def.clj#23","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDefApiDoc#defvar","name":"defvar","arglists":[["name"],["name","init"],["name","init","doc"]],"doc":"Defines a var with an optional intializer and doc string"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/def.clj#44","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDefApiDoc#defvar-","name":"defvar-","arglists":[["name","&","decls"]],"doc":"Same as defvar but yields a private definition"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/def.clj#94","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDefApiDoc#name-with-attributes","name":"name-with-attributes","arglists":[["name","macro-args"]],"doc":"To be used in macro definitions.\n   Handles optional docstrings and attribute maps for a name to be defined\n   in a list of macro arguments. If the first macro argument is a string,\n   it is added as a docstring to name and removed from the macro argument\n   list. If afterwards the first macro argument is a map, its entries are\n   added to the name's metadata map and the map is removed from the\n   macro argument list. The return value is a vector containing the name\n   with its extended metadata map and the list of unprocessed macro\n   arguments."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#126","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#_*append-to-writer_*","name":"*append-to-writer*","doc":"If true, writer and spit will open files in append mode.\n Defaults to false.  Use append-writer or append-spit."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#241","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#append-spit","name":"append-spit","arglists":[["f","content"]],"doc":"Like spit but appends to file."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#193","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#append-writer","name":"append-writer","arglists":[["x"]],"doc":"Like writer but opens file for appending.  Does not work on streams\n  that are already open."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#71","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#file-str","name":"file-str","arglists":[["&","args"]],"doc":"Concatenates args as strings and returns a java.io.File.  Replaces\n  all / and \\ with File/separatorChar.  Replaces ~ at the start of\n  the path with the user.home system property."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#247","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#pwd","name":"pwd","arglists":[[]],"doc":"Returns current working directory as a String.  (Like UNIX 'pwd'.)\n  Note: In Java, you cannot change the current working directory."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#212","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#read-lines","name":"read-lines","arglists":[["f"]],"doc":"Like clojure.core/line-seq but opens f with reader.  Automatically\n  closes the reader AFTER YOU CONSUME THE ENTIRE SEQUENCE."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#85","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#reader","name":"reader","arglists":[["x"]],"doc":"Attempts to coerce its argument into an open\n  java.io.BufferedReader.  Argument may be an instance of Reader,\n  BufferedReader, InputStream, File, URI, URL, or String.\n\n  If argument is a String, it tries to resolve it first as a URI, then\n  as a local file name.  URIs with a 'file' protocol are converted to\n  local file names.  Uses *default-encoding* as the text encoding.\n\n  Should be used inside with-open to ensure the Reader is properly\n  closed."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#223","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#slurp_*","name":"slurp*","arglists":[["f"]],"doc":"Like clojure.core/slurp but opens f with reader."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#234","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#spit","name":"spit","arglists":[["f","content"]],"doc":"Opposite of slurp.  Opens f with writer, writes content, then\n  closes f."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#270","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#with-in-reader","name":"with-in-reader","arglists":[["f","&","body"]],"doc":"Opens a PushbackReader on f, binds it to *in*, and evaluates body."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#263","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#with-out-append-writer","name":"with-out-append-writer","arglists":[["f","&","body"]],"doc":"Like with-out-writer but appends to file."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#255","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#with-out-writer","name":"with-out-writer","arglists":[["f","&","body"]],"doc":"Opens a writer on f, binds it to *out*, and evalutes body.\n  Anything printed within body will be written to f."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#201","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#write-lines","name":"write-lines","arglists":[["f","lines"]],"doc":"Writes lines (a seq) to f, separated by newlines.  f is opened with\n  writer, and automatically closed at the end of the sequence."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#132","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribDuckStreamsApiDoc#writer","name":"writer","arglists":[["x"]],"doc":"Attempts to coerce its argument into an open java.io.PrintWriter\n  wrapped around a java.io.BufferedWriter.  Argument may be an\n  instance of Writer, PrintWriter, BufferedWriter, OutputStream, File,\n  URI, URL, or String.\n\n  If argument is a String, it tries to resolve it first as a URI, then\n  as a local file name.  URIs with a 'file' protocol are converted to\n  local file names.\n\n  Should be used inside with-open to ensure the Writer is properly\n  closed."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/error_kit.clj#150","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribErrorKitApiDoc#bind-continue","name":"bind-continue","arglists":[["continue-name",["args*"],"&","body"]],"doc":"Special form to be used inside a 'with-handler'.\n  Control can be passed to this 'continue' form from a 'raise' enclosed\n  in this with-handler's dynamic scope, when this 'continue-name' is\n  given to a 'continue' form."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/error_kit.clj#59","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribErrorKitApiDoc#deferror","name":"deferror","arglists":[["name",["parent-error?"],"doc-string?",["args*"],"&","body"],["name",["parent-error?"],"doc-string?","args-destruct-map","&","body"]],"doc":"Define a new error type"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/error_kit.clj#117","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribErrorKitApiDoc#do-not-handle","name":"do-not-handle","arglists":[[]],"doc":"Use in a tail position of a 'handle' form to indicate 'raise' should\n  not consider the error handled, but should continue searching for an\n  appropriate 'handle' form.  Allows finer-grain control over catching\n  than just the error type."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/error_kit.clj#46","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribErrorKitApiDoc#error","name":"error","arglists":[["details"]],"doc":"Base type for all error-kit errors"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/error_kit.clj#138","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribErrorKitApiDoc#handle","name":"handle","arglists":[["error-name?",["args*"],"&","body"],["error-name?","args-destruct-map-args","&","body"]],"doc":"Special form to be used inside a 'with-handler'.  When\n  any error is 'raised' from withing the dynamic scope of 'body' that\n  is of error-name's type or a derived type, the args will be bound\n  and the body executed.  If no 'error-name' is given, the body will\n  be executed for regardless of the type of error raised.  The body\n  may return a value, in which case that will be the return value of\n  the entire 'with-handler' form, or it may use any of the special\n  return forms, 'do-not-handle', 'continue-with', or 'continue'."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/error_kit.clj#110","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribErrorKitApiDoc#raise","name":"raise","arglists":[["err-name","&","args"]],"doc":"Raise an error of the type err-name, constructed with the given args"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/error_kit.clj#86","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribErrorKitApiDoc#raise_*","name":"raise*","arglists":[["err"]],"doc":"Raise the given error object, best if created by an error\n  constructor defined with deferror.  See also 'raise' macro."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/error_kit.clj#39","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribErrorKitApiDoc#throw-msg","name":"throw-msg","arglists":[["class-name"]],"doc":"Returns a function that throws a Java Exception with the given\n  name.  Useful to associate a new error-kit error type with a\n  particular Java Exception class, via the :unhandled error key."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/error_kit.clj#163","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribErrorKitApiDoc#with-handler","name":"with-handler","arglists":[["&","forms"]],"doc":"This is error-kit's dynamic scope form.  The body will be executed\n  in a dynamic context that includes all of the following 'handle' and\n  'bind-continue' forms."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/except.clj#56","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribExceptApiDoc#throw-arg","name":"throw-arg","arglists":[["&","args"]],"doc":"Throws an IllegalArgumentException. All arguments are optional:\n\n        format? format-args*\n\n  - format is a format string for clojure/format\n  - format-args are objects that correspond to format specifiers in\n    format."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/except.clj#42","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribExceptApiDoc#throw-if","name":"throw-if","arglists":[["test","&","args"]],"doc":"Throws an Exception or Error if test is true. args are those documented\n  for throwf."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/except.clj#49","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribExceptApiDoc#throw-if-not","name":"throw-if-not","arglists":[["test","&","args"]],"doc":"Throws an Exception or Error if test is false. args are those documented\n  for throwf."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/except.clj#28","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribExceptApiDoc#throwf","name":"throwf","arglists":[["&","args"]],"doc":"Throws an Exception or Error with an optional message formatted using\n  clojure/format. All arguments are optional:\n\n      class? format? format-args*\n\n  - class defaults to Exception, if present it must name a kind of\n    Throwable\n  - format is a format string for clojure/format\n  - format-args are objects that correspond to format specifiers in\n    format."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/fcase.clj#77","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFcaseApiDoc#case","name":"case","arglists":[["test-value","&","clauses"]],"doc":"Like cond, but test-value is compared against the value of each\n  test expression with =.  If they are equal, executes the \"body\"\n  expression.  Optional last expression is executed if none of the\n  test expressions match."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/fcase.clj#38","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFcaseApiDoc#fcase","name":"fcase","arglists":[["compare-fn","case-value","&","test-expr-clauses"]],"doc":"Generic switch/case macro.  'fcase' is short for 'function case'.\n\n  The 'compare-fn' is a fn of two arguments.\n\n  The 'test-expr-clauses' are value-expression pairs without\n  surrounding parentheses, like in Clojure's 'cond'.\n\n  The 'case-value' is evaluated once and cached.  Then, 'compare-fn'\n  is called once for each clause, with the clause's test value as its\n  first argument and 'case-value' as its second argument.  If\n  'compare-fn' returns logical true, the clause's expression is\n  evaluated and returned.  If 'compare-fn' returns false/nil, we go to\n  the next test value.\n\n  If 'test-expr-clauses' contains an odd number of items, the last\n  item is the default expression evaluated if no case-value matches.\n  If there is no default expression and no case-value matches, fcase\n  returns nil.\n\n  See specific forms of this macro in 'case' and 're-case'.\n\n  The test expressions in 'fcase' are always evaluated linearly, in\n  order.  For a large number of case expressions it may be more\n  efficient to use a hash lookup."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/fcase.clj#101","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFcaseApiDoc#in-case","name":"in-case","arglists":[["test-value","&","clauses"]],"doc":"Like case, but test expressions are sequences.  The test expression\n  is true if any item in the sequence is equal (tested with '=') to\n  the test value."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/fcase.clj#91","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFcaseApiDoc#instance-case","name":"instance-case","arglists":[["test-value","&","clauses"]],"doc":"Like case, but the test expressions are Java class names, tested with\n  'instance?'."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/fcase.clj#85","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFcaseApiDoc#re-case","name":"re-case","arglists":[["test-value","&","clauses"]],"doc":"Like case, but the test expressions are regular expressions, tested\n  with re-find."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#28","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#clojure-source-file?","name":"clojure-source-file?","arglists":[["file"]],"doc":"Returns true if file is a normal file with a .clj extension."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#88","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#clojure-sources-in-jar","name":"clojure-sources-in-jar","arglists":[["jar-file"]],"doc":"Returns a sequence of filenames ending in .clj found in the JAR file."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#42","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#comment?","name":"comment?","arglists":[["form"]],"doc":"Returns true if form is a (comment ...)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#34","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#find-clojure-sources-in-dir","name":"find-clojure-sources-in-dir","arglists":[["dir"]],"doc":"Searches recursively under dir for Clojure source files (.clj).\n  Returns a sequence of File objects, in breadth-first sort order."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#79","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#find-namespaces-in-dir","name":"find-namespaces-in-dir","arglists":[["dir"]],"doc":"Searches dir recursively for (ns ...) declarations in Clojure\n  source files; returns the symbol names of the declared namespaces."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#112","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#find-namespaces-in-jarfile","name":"find-namespaces-in-jarfile","arglists":[["jarfile"]],"doc":"Searches the JAR file for Clojure source files containing (ns ...)\n  declarations.  Returns a sequence of the symbol names of the\n  declared namespaces."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#131","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#find-namespaces-on-classpath","name":"find-namespaces-on-classpath","arglists":[[]],"doc":"Searches CLASSPATH (both directories and JAR files) for Clojure\n  source files containing (ns ...) declarations.  Returns a sequence\n  of the symbol names of the declared namespaces."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#73","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#find-ns-decls-in-dir","name":"find-ns-decls-in-dir","arglists":[["dir"]],"doc":"Searches dir recursively for (ns ...) declarations in Clojure\n  source files; returns the unevaluated ns declarations."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#104","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#find-ns-decls-in-jarfile","name":"find-ns-decls-in-jarfile","arglists":[["jarfile"]],"doc":"Searches the JAR file for Clojure source files containing (ns ...)\n  declarations; returns the unevaluated ns declarations."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#122","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#find-ns-decls-on-classpath","name":"find-ns-decls-on-classpath","arglists":[[]],"doc":"Searches CLASSPATH (both directories and JAR files) for Clojure\n  source files containing (ns ...) declarations.  Returns a sequence\n  of the unevaluated ns declaration forms."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#47","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#ns-decl?","name":"ns-decl?","arglists":[["form"]],"doc":"Returns true if form is a (ns ...) declaration."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#65","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#read-file-ns-decl","name":"read-file-ns-decl","arglists":[["file"]],"doc":"Attempts to read a (ns ...) declaration from file, and returns the\n  unevaluated form.  Returns nil if read fails, or if the first form\n  is not a ns declaration."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#52","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#read-ns-decl","name":"read-ns-decl","arglists":[["rdr"]],"doc":"Attempts to read a (ns ...) declaration from rdr, and returns the\n  unevaluated form.  Returns nil if read fails or if a ns declaration\n  cannot be found.  The ns declaration must be the first Clojure form\n  in the file, except for (comment ...)  forms."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/find_namespaces.clj#93","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribFindNamespacesApiDoc#read-ns-decl-from-jarfile-entry","name":"read-ns-decl-from-jarfile-entry","arglists":[["jarfile","entry-name"]],"doc":"Attempts to read a (ns ...) declaration from the named entry in the\n  JAR file, and returns the unevaluated form.  Returns nil if the read\n  fails, or if the first form is not a ns declaration."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/gen_html_docs.clj#430","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenHtmlDocsApiDoc#generate-documentation","name":"generate-documentation","arglists":[["libs"]],"doc":"Returns a string which is the HTML documentation for the libraries\nnamed by libs. Libs is a vector of symbols identifying Clojure\nlibraries."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/gen_html_docs.clj#456","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenHtmlDocsApiDoc#generate-documentation-to-file","name":"generate-documentation-to-file","arglists":[["path","libs"]],"doc":"Calls generate-documentation on the libraries named by libs and\nemits the generated HTML to the path named by path."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/arithmetic.clj#111","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericArithmeticApiDoc#_*","name":"*","arglists":[["x"],["x","y"],["x","y","&","more"]],"doc":"Return the product of all arguments. The minimal implementation for type\n   ::my-type is the binary form with dispatch value [::my-type ::my-type]."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/arithmetic.clj#45","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericArithmeticApiDoc#+","name":"+","arglists":[["x"],["x","y"],["x","y","&","more"]],"doc":"Return the sum of all arguments. The minimal implementation for type\n   ::my-type is the binary form with dispatch value [::my-type ::my-type]."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/arithmetic.clj#77","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericArithmeticApiDoc#-","name":"-","arglists":[["x"],["x","y"],["x","y","&","more"]],"doc":"Return the difference of the first argument and the sum of all other\n   arguments. The minimal implementation for type ::my-type is the binary\n   form with dispatch value [::my-type ::my-type]."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/arithmetic.clj#143","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericArithmeticApiDoc#/","name":"/","arglists":[["x"],["x","y"],["x","y","&","more"]],"doc":"Return the quotient of the first argument and the product of all other\n   arguments. The minimal implementation for type ::my-type is the binary\n   form with dispatch value [::my-type ::my-type]."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/arithmetic.clj#173","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericArithmeticApiDoc#defmethod_*","name":"defmethod*","arglists":[["ns","name","&","args"]],"doc":"Define a method implementation for the multimethod name in namespace ns.\n   Required for implementing the division function from another namespace."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/arithmetic.clj#180","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericArithmeticApiDoc#qsym","name":"qsym","arglists":[["ns","sym"]],"doc":"Create the qualified symbol corresponding to sym in namespace ns.\n   Required to access the division function from another namespace,\n   e.g. as (qsym clojure.contrib.generic.arithmetic /)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection.clj#26","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericCollectionApiDoc#assoc","name":"assoc","arglists":[["coll","&","key-val-pairs"]],"doc":"Returns a new collection in which the values corresponding to the\n   given keys are updated by the given values. Each type of collection\n   can have specific restrictions on the possible keys."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection.clj#42","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericCollectionApiDoc#conj","name":"conj","arglists":[["coll","&","xs"]],"doc":"Returns a new collection resulting from adding all xs to coll."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection.clj#54","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericCollectionApiDoc#dissoc","name":"dissoc","arglists":[["coll","&","keys"]],"doc":"Returns a new collection in which the entries corresponding to the\n   given keys are removed. Each type of collection can have specific\n   restrictions on the possible keys."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection.clj#68","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericCollectionApiDoc#empty","name":"empty","arglists":[["coll"]],"doc":"Returns an empty collection of the same kind as the argument"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection.clj#80","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericCollectionApiDoc#get","name":"get","arglists":[["coll","key"],["coll","key","not-found"]],"doc":"Returns the element of coll referred to by key. Each type of collection\n   can have specific restrictions on the possible keys."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection.clj#95","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericCollectionApiDoc#into","name":"into","arglists":[["to","from"]],"doc":"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection.clj#109","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericCollectionApiDoc#seq","name":"seq","arglists":[["s"]],"doc":"Returns a seq on the object s."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/comparison.clj#77","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericComparisonApiDoc#<","name":"<","arglists":[["x"],["x","y"],["x","y","&","more"]],"doc":"Return true if each argument is smaller than the following ones.\n   The minimal implementation for type ::my-type is the binary form\n   with dispatch value [::my-type ::my-type]. A default implementation\n   is provided in terms of >."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/comparison.clj#129","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericComparisonApiDoc#<_=","name":"<=","arglists":[["x"],["x","y"],["x","y","&","more"]],"doc":"Return true if each arguments is smaller than or equal to the following\n   ones. The minimal implementation for type ::my-type is the binary form\n   with dispatch value [::my-type ::my-type]. A default implementation\n   is provided in terms of >."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/comparison.clj#36","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericComparisonApiDoc#_=","name":"=","arglists":[["x"],["x","y"],["x","y","&","more"]],"doc":"Return true if all arguments are equal. The minimal implementation for type\n   ::my-type is the binary form with dispatch value [::my-type ::my-type]."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/comparison.clj#56","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericComparisonApiDoc#>","name":">","arglists":[["x"],["x","y"],["x","y","&","more"]],"doc":"Return true if each argument is larger than the following ones.\n   The minimal implementation for type ::my-type is the binary form\n   with dispatch value [::my-type ::my-type]."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/comparison.clj#103","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericComparisonApiDoc#>_=","name":">=","arglists":[["x"],["x","y"],["x","y","&","more"]],"doc":"Return true if each argument is larger than or equal to the following\n   ones. The minimal implementation for type ::my-type is the binary form\n   with dispatch value [::my-type ::my-type]. A default implementation\n   is provided in terms of <."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/comparison.clj#28","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericComparisonApiDoc#zero?","name":"zero?","arglists":[["x"]],"doc":"Return true of x is zero."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/functor.clj#20","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericFunctorApiDoc#fmap","name":"fmap","arglists":[["f","s"]],"doc":"Applies function f to each item in the data structure s and returns\n   a structure of the same kind."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#53","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#abs","name":"abs","arglists":[["x"]],"doc":"Return the abs of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#54","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#acos","name":"acos","arglists":[["x"]],"doc":"Return the acos of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#110","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#approx_=","name":"approx=","arglists":[["x","y","eps"]],"doc":"Return true if the absolute value of the difference between x and y\n   is less than eps."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#55","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#asin","name":"asin","arglists":[["x"]],"doc":"Return the asin of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#56","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#atan","name":"atan","arglists":[["x"]],"doc":"Return the atan of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#57","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#atan2","name":"atan2","arglists":[["x","y"]],"doc":"Return the atan2 of x and y."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#58","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#ceil","name":"ceil","arglists":[["x"]],"doc":"Return the ceil of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#87","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#conjugate","name":"conjugate","arglists":[["x"]],"doc":"Return the conjugate of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#59","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#cos","name":"cos","arglists":[["x"]],"doc":"Return the cos of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#60","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#exp","name":"exp","arglists":[["x"]],"doc":"Return the exp of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#61","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#floor","name":"floor","arglists":[["x"]],"doc":"Return the floor of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#62","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#log","name":"log","arglists":[["x"]],"doc":"Return the log of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#63","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#pow","name":"pow","arglists":[["x","y"]],"doc":"Return the pow of x and y."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#64","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#rint","name":"rint","arglists":[["x"]],"doc":"Return the rint of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#65","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#round","name":"round","arglists":[["x"]],"doc":"Return the round of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#73","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#sgn","name":"sgn","arglists":[["x"]],"doc":"Return the sign of x (-1, 0, or 1)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#66","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#sin","name":"sin","arglists":[["x"]],"doc":"Return the sin of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#98","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#sqr","name":"sqr","arglists":[["x"]],"doc":"Return the square of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#67","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#sqrt","name":"sqrt","arglists":[["x"]],"doc":"Return the sqrt of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions.clj#68","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGenericMathFunctionsApiDoc#tan","name":"tan","arglists":[["x"]],"doc":"Return the tan of x."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#49","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#add-loops","name":"add-loops","arglists":[["g"]],"doc":"For each node n, add the edge n->n if not already present."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#133","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#component-graph","name":"component-graph","arglists":[["g"],["g","sccs"]],"doc":"Given a graph, perhaps with cycles, return a reduced graph that is acyclic.\n   Each node in the new graph will be a set of nodes from the old.\n   These sets are the strongly connected components.  Each edge will\n   be the union of the corresponding edges of the prior graph."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#190","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#dependency-list","name":"dependency-list","arglists":[["g"]],"doc":"Similar to a topological sort, this returns a vector of sets. The\n   set of nodes at index 0 are independent.  The set at index 1 depend\n   on index 0; those at 2 depend on 0 and 1, and so on.  Those withing\n   a set have no mutual dependencies.  Assume the input graph (which\n   much be acyclic) has an edge a->b when a depends on b."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#167","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#fixed-point","name":"fixed-point","arglists":[["data","fun","max","equal"]],"doc":"Repeatedly apply fun to data until (equal old-data new-data)\n   returns true.  If max iterations occur, it will throw an\n   exception.  Set max to nil for unlimited iterations."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#29","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#get-neighbors","name":"get-neighbors","arglists":[["g","n"]],"doc":"Get the neighbors of a node."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#68","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#lazy-walk","name":"lazy-walk","arglists":[["g","n"],["g","ns","v"]],"doc":"Return a lazy sequence of the nodes of a graph starting a node n.  Optionally,\n   provide a set of visited notes (v) and a collection of nodes to\n   visit (ns)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#110","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#post-ordered-nodes","name":"post-ordered-nodes","arglists":[["g"]],"doc":"Return a sequence of indexes of a post-ordered walk of the graph."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#151","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#recursive-component?","name":"recursive-component?","arglists":[["g","ns"]],"doc":"Is the component (recieved from scc) self recursive?"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#57","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#remove-loops","name":"remove-loops","arglists":[["g"]],"doc":"For each node n, remove any edges n->n."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#37","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#reverse-graph","name":"reverse-graph","arglists":[["g"]],"doc":"Given a directed graph, return another directed graph with the\n   order of the edges reversed."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#117","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#scc","name":"scc","arglists":[["g"]],"doc":"Returns, as a sequence of sets, the strongly connected components\n   of g."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#158","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#self-recursive-sets","name":"self-recursive-sets","arglists":[["g"]],"doc":"Returns, as a sequence of sets, the components of a graph that are\n   self-recursive."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#207","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#stratification-list","name":"stratification-list","arglists":[["g1","g2"]],"doc":"Similar to dependency-list (see doc), except two graphs are\n   provided.  The first is as dependency-list.  The second (which may\n   have cycles) provides a partial-dependency relation.  If node a\n   depends on node b (meaning an edge a->b exists) in the second\n   graph, node a must be equal or later in the sequence."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/graph.clj#81","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGraphApiDoc#transitive-closure","name":"transitive-closure","arglists":[["g"]],"doc":"Returns the transitive closure of a graph.  The neighbors are lazily computed.\n\n   Note: some version of this algorithm return all edges a->a\n   regardless of whether such loops exist in the original graph.  This\n   version does not.  Loops will be included only if produced by\n   cycles in the graph.  If you have code that depends on such\n   behavior, call (-> g transitive-closure add-loops)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/greatest_least.clj#52","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGreatestLeastApiDoc#all-greatest","name":"all-greatest","arglists":[["&","args"]],"doc":"Returns all the greatest elements."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/greatest_least.clj#47","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGreatestLeastApiDoc#all-greatest-by","name":"all-greatest-by","arglists":[["f","&","args"]],"doc":"Return all the elements for which f yields the greatest value."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/greatest_least.clj#62","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGreatestLeastApiDoc#all-least","name":"all-least","arglists":[["&","args"]],"doc":"Returns all the least elements."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/greatest_least.clj#57","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGreatestLeastApiDoc#all-least-by","name":"all-least-by","arglists":[["f","&","args"]],"doc":"Return all the elements for which f yields the least value."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/greatest_least.clj#18","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGreatestLeastApiDoc#greatest","name":"greatest","arglists":[["&","args"]],"doc":"Return the greatest argument."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/greatest_least.clj#13","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGreatestLeastApiDoc#greatest-by","name":"greatest-by","arglists":[["f","&","args"]],"doc":"Return the argument for which f yields the greatest value."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/greatest_least.clj#28","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGreatestLeastApiDoc#least","name":"least","arglists":[["&","args"]],"doc":"Return the smallest element."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/greatest_least.clj#23","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribGreatestLeastApiDoc#least-by","name":"least-by","arglists":[["f","&","args"]],"doc":"Return the argument for which f yields the smallest value."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/import_static.clj#22","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribImportStaticApiDoc#import-static","name":"import-static","arglists":[["class","&","fields-and-methods"]],"doc":"Imports the named static fields and/or static methods of the class\n  as (private) symbols in the current namespace.\n\n  Example: \n      user=> (import-static java.lang.Math PI sqrt)\n      nil\n      user=> PI\n      3.141592653589793\n      user=> (sqrt 16)\n      4.0\n\n  Note: The class name must be fully qualified, even if it has already\n  been imported.  Static methods are defined as MACROS, not\n  first-class fns."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/jar.clj#29","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJarApiDoc#filenames-in-jar","name":"filenames-in-jar","arglists":[["jar-file"]],"doc":"Returns a sequence of Strings naming the non-directory entries in\n  the JAR file."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/jar.clj#22","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJarApiDoc#jar-file?","name":"jar-file?","arglists":[["file"]],"doc":"Returns true if file is a normal file with a .jar or .JAR extension."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/java_utils.clj#73","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavaUtilsApiDoc#as-file","name":"as-file","doc":"Interpret a String or a java.io.File as a File. Building block\n   for clojure.contrib.java-utils/file, which you should prefer\n   in most cases."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/java_utils.clj#132","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavaUtilsApiDoc#as-properties","name":"as-properties","arglists":[["m"]],"doc":"Convert any seq of pairs to a java.utils.Properties instance.\n   Uses as-str to convert both keys and values into strings."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/java_utils.clj#90","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavaUtilsApiDoc#as-str","name":"as-str","arglists":[["x"]],"doc":"Returns the name or string representation of x"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/java_utils.clj#81","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavaUtilsApiDoc#file","name":"file","arglists":[["arg"],["parent","child"],["parent","child","&","more"]],"doc":"Returns a java.io.File from string or file args."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/java_utils.clj#97","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavaUtilsApiDoc#get-system-property","name":"get-system-property","arglists":[["stringable"],["stringable","default"]],"doc":"Get a system property."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/java_utils.clj#142","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavaUtilsApiDoc#read-properties","name":"read-properties","arglists":[["file-able"]],"doc":"Read properties from file-able."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/java_utils.clj#60","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavaUtilsApiDoc#relative-path-string","name":"relative-path-string","doc":"Interpret a String or java.io.File as a relative path string. \n   Building block for clojure.contrib.java-utils/file."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/java_utils.clj#104","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavaUtilsApiDoc#set-system-properties","name":"set-system-properties","arglists":[["settings"]],"doc":"Set some system properties. Nil clears a property."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/java_utils.clj#112","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavaUtilsApiDoc#with-system-properties","name":"with-system-properties","arglists":[["settings","&","body"]],"doc":"setting => property-name value\n\n  Sets the system properties to the supplied values, executes the body, and\n  sets the properties back to their original values. Values of nil are\n  translated to a clearing of the property."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/java_utils.clj#149","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavaUtilsApiDoc#write-properties","name":"write-properties","arglists":[["m","file-able"],["m","file-able","comments"]],"doc":"Write properties to file-able."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/javadoc/browse.clj#25","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavadocBrowseApiDoc#open-url-in-browser","name":"open-url-in-browser","arglists":[["url"]],"doc":"Opens url (a string) in the default system web browser.  May not\n  work on all platforms.  Returns url on success, nil if not\n  supported."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/javadoc/browse.clj#40","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJavadocBrowseApiDoc#open-url-in-swing","name":"open-url-in-swing","arglists":[["url"]],"doc":"Opens url (a string) in a Swing window."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/json/read.clj#137","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJsonReadApiDoc#read-json","name":"read-json","arglists":[[],["stream"],["stream","eof-error?","eof-value"]],"doc":"Read the next JSON record from stream, which must be an instance of\n  java.io.PushbackReader."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/json/write.clj#136","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJsonWriteApiDoc#json-str","name":"json-str","arglists":[["x"]],"doc":"Converts x to a JSON-formatted string."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/json/write.clj#50","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribJsonWriteApiDoc#print-json","name":"print-json","arglists":[["x"]],"doc":"Prints x as JSON.  Nil becomes JSON null.  Keywords become\n  strings, without the leading colon.  Maps become JSON objects, all\n  other collection types become JSON arrays.  Java arrays become JSON\n  arrays.  Unicode characters in strings are escaped as \\uXXXX.\n  Numbers print as with pr."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/lazy_seqs.clj#78","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribLazySeqsApiDoc#fibs","name":"fibs","arglists":[[]],"doc":"Returns a lazy sequence of all the Fibonacci numbers."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/lazy_seqs.clj#83","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribLazySeqsApiDoc#powers-of-2","name":"powers-of-2","arglists":[[]],"doc":"Returns a lazy sequence of all the powers of 2"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/lazy_seqs.clj#62","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribLazySeqsApiDoc#primes","name":"primes","doc":"Lazy sequence of all the prime numbers."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/lazy_xml.clj#158","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribLazyXmlApiDoc#emit","name":"emit","arglists":[["x","&","opts"]],"doc":"Prints an <?xml?> declaration line, and then calls emit-element"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/lazy_xml.clj#135","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribLazyXmlApiDoc#emit-element","name":"emit-element","arglists":[["e","&","opts"]],"doc":"Recursively prints as XML text the element struct e.  To have it\n  print extra whitespace like clojure.xml/emit, use the :pad true\n  option."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/lazy_xml.clj#37","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribLazyXmlApiDoc#parse-seq","name":"parse-seq","arglists":[["s"],["s","startparse"],["s","startparse","queue-size"]],"doc":"Parses the source s, which can be a File, InputStream or String\n  naming a URI. Returns a lazy sequence of maps with two or more of\n  the keys :type, :name, :attrs, and :str. Other SAX-compatible\n  parsers can be supplied by passing startparse, a fn taking a source\n  and a ContentHandler and returning a parser. If a parser is\n  specified, it will be run in a separate thread and be allowed to get\n  ahead by queue-size items, which defaults to maxing.  If no parser\n  is specified and org.xmlpull.v1.XmlPullParser is in the classpath,\n  this superior pull parser will be used."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/lazy_xml.clj#112","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribLazyXmlApiDoc#parse-trim","name":"parse-trim","arglists":[["s"],["s","startparse","queue-size"]],"doc":"Parses the source s, which can be a File, InputStream or String\n  naming a URI. Returns a lazy tree of the clojure.xml/element\n  struct-map, which has the keys :tag, :attrs, and :content and\n  accessor fns tag, attrs, and content, with the whitespace trimmed\n  from around each content string. This format is compatible with what\n  clojure.xml/parse produces, except :content is a lazy seq instead of\n  a vector.  Other SAX-compatible parsers can be supplied by passing\n  startparse, a fn taking a source and a ContentHandler and returning\n  a parser. If a parser is specified, it will be run in a separate\n  thread and be allowed to get ahead by queue-size items, which\n  defaults to maxing.  If no parser is specified and\n  org.xmlpull.v1.XmlPullParser is in the classpath, this superior pull\n  parser will be used."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/macro_utils.clj#200","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMacroUtilsApiDoc#defsymbolmacro","name":"defsymbolmacro","arglists":[["symbol","expansion"]],"doc":"Define a symbol macro. Because symbol macros are not part of\n   Clojure's built-in macro expansion system, they can be used only\n   inside a with-symbol-macros form."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/macro_utils.clj#179","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMacroUtilsApiDoc#macrolet","name":"macrolet","arglists":[["fn-bindings","&","exprs"]],"doc":"Define local macros that are used in the expansion of exprs. The\n   syntax is the same as for letfn forms."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/macro_utils.clj#222","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMacroUtilsApiDoc#mexpand","name":"mexpand","arglists":[["form"]],"doc":"Like clojure.core/macroexpand, but takes into account symbol macros."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/macro_utils.clj#214","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMacroUtilsApiDoc#mexpand-1","name":"mexpand-1","arglists":[["form"]],"doc":"Like clojure.core/macroexpand-1, but takes into account symbol macros."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/macro_utils.clj#230","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMacroUtilsApiDoc#mexpand-all","name":"mexpand-all","arglists":[["form"]],"doc":"Perform a full recursive macro expansion of a form."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/macro_utils.clj#190","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMacroUtilsApiDoc#symbol-macrolet","name":"symbol-macrolet","arglists":[["symbol-bindings","&","exprs"]],"doc":"Define local symbol macros that are used in the expansion of exprs.\n   The syntax is the same as for let forms."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/macro_utils.clj#209","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMacroUtilsApiDoc#with-symbol-macros","name":"with-symbol-macros","arglists":[["&","exprs"]],"doc":"Fully expand exprs, including symbol macros."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/macros.clj#18","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMacrosApiDoc#const","name":"const","arglists":[["expr"]],"doc":"Evaluate the constant expression expr at compile time."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/macros.clj#28","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMacrosApiDoc#letfn-","name":"letfn-","arglists":[["fn-bindings","&","exprs"]],"doc":"OBSOLETE: use clojure.core/letfn\n   A variant of let for local function definitions. fn-bindings consists\n   of name/args/body triples, with (letfn [name args body] ...)\n   being equivalent to (let [name (fn name args body)] ...)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/map_utils.clj#41","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMapUtilsApiDoc#deep-merge-with","name":"deep-merge-with","arglists":[["f","&","maps"]],"doc":"Like merge-with, but merges maps recursively, applying the given fn\n  only when there's a non-map at a particular level.\n\n  (deepmerge + {:a {:b {:c 1 :d {:x 1 :y 2}} :e 3} :f 4}\n               {:a {:b {:c 2 :d {:z 9} :z 3} :e 100}})\n  -> {:a {:b {:z 3, :c 3, :d {:z 9, :x 1, :y 2}}, :e 103}, :f 4}"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/map_utils.clj#22","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMapUtilsApiDoc#lazy-get","name":"lazy-get","arglists":[["map","key","not-found"]],"doc":"Like get, but doesn't evaluate not-found unless it is needed."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/map_utils.clj#29","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMapUtilsApiDoc#safe-get","name":"safe-get","arglists":[["map","key"]],"doc":"Like get, but throws an exception if the key is not found."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/map_utils.clj#35","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMapUtilsApiDoc#safe-get-in","name":"safe-get-in","arglists":[["map","ks"]],"doc":"Like get-in, but throws an exception if any key is not found."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/math.clj#122","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMathApiDoc#abs","name":"abs","arglists":[["n"]],"doc":"(abs n) is the absolute value of n"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/math.clj#141","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMathApiDoc#ceil","name":"ceil","arglists":[["n"]],"doc":"(ceil n) returns the least integer greater than or equal to n.\nIf n is an exact number, ceil returns an integer, otherwise a double."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/math.clj#206","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMathApiDoc#exact-integer-sqrt","name":"exact-integer-sqrt","arglists":[["n"]],"doc":"(exact-integer-sqrt n) expects a non-negative integer n, and returns [s r] where n = s^2+r and n < (s+1)^2.  In other words, it returns the floor of the square root and the 'remainder'.\nFor example, (exact-integer-sqrt 15) is [3 6] because 15 = 3^2+6."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/math.clj#101","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMathApiDoc#expt","name":"expt","arglists":[["base","pow"]],"doc":"(expt base pow) is base to the pow power.\nReturns an exact number if the base is an exact number and the power is an integer, otherwise returns a double."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/math.clj#129","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMathApiDoc#floor","name":"floor","arglists":[["n"]],"doc":"(floor n) returns the greatest integer less than or equal to n.\nIf n is an exact number, floor returns an integer, otherwise a double."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/math.clj#162","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMathApiDoc#gcd","name":"gcd","arglists":[["a","b"]],"doc":"(gcd a b) returns the greatest common divisor of a and b"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/math.clj#169","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMathApiDoc#lcm","name":"lcm","arglists":[["a","b"]],"doc":"(lcm a b) returns the least common multiple of a and b"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/math.clj#153","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMathApiDoc#round","name":"round","arglists":[["n"]],"doc":"(round n) rounds to the nearest integer.\nround always returns an integer.  Rounds up for values exactly in between two integers."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/math.clj#215","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMathApiDoc#sqrt","name":"sqrt","arglists":[["n"]],"doc":"Square root, but returns exact number if possible."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/miglayout.clj#38","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMiglayoutApiDoc#miglayout","name":"miglayout","arglists":[["container","&","args"]],"doc":"Adds java.awt.Components to a java.awt.Container with constraints\n  formatted for the MiGLayout layout manager.\n\n  Arguments: container [item constraint*]*\n\n    - container: the container for the specified components, its layout\n      manager will be set to a new instance of MigLayout\n\n    - an inline series of items and constraints--each item may be followed\n      by zero or more constraints.\n\n  Item:\n\n    - An item is either a Component or one of the keywords :layout\n     :column or :row. Constraints for a keyword item affect the entire\n      layout.\n\n  Constraint: string, keyword, vector, map, or set\n\n    - A string specifies one or more constraints each with zero or more\n      arguments.\n    - A keyword specifies a single constraint without arguments\n    - A vector specifies a single constraint with one or more arguments\n    - A map specifies one or more constraints as keys, each mapped to a\n      single argument\n    - A set groups two or more constraints, each a string, keyword,\n      vector, map, or set"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/miglayout/internal.clj#52","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMiglayoutInternalApiDoc#component?","name":"component?","arglists":[["x"]],"doc":"Returns true if x is a java.awt.Component"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/miglayout/internal.clj#57","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMiglayoutInternalApiDoc#constraint?","name":"constraint?","arglists":[["x"]],"doc":"Returns true if x is not a keyword-item or component"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/miglayout/internal.clj#25","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMiglayoutInternalApiDoc#format-constraint","name":"format-constraint","arglists":[["c"]],"doc":"Returns a vector of vectors representing one or more constraints\n  separated by commas. Constraints may be specified in Clojure using\n  strings, keywords, vectors, maps, and/or sets."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/miglayout/internal.clj#40","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMiglayoutInternalApiDoc#format-constraints","name":"format-constraints","arglists":[["&","constraints"]],"doc":"Returns a string representing all the constraints for one keyword-item\n  or component formatted for miglayout."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/miglayout/internal.clj#64","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMiglayoutInternalApiDoc#parse-item-constraints","name":"parse-item-constraints","arglists":[["&","args"]],"doc":"Iterates over args and builds a map containing values associated with\n  :keywords and :components. The value for :keywords is a map from keyword\n  items to constraints strings. The value for :components is a vector of\n  vectors each associating a component with its constraints string."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/miglayout/test.clj#30","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMiglayoutTestApiDoc#label","name":"label","arglists":[["text"]],"doc":"Returns a swing label"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/miglayout/test.clj#41","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMiglayoutTestApiDoc#sep","name":"sep","arglists":[[]],"doc":"Returns a swing separator"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/miglayout/test.clj#35","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMiglayoutTestApiDoc#text-field","name":"text-field","arglists":[[],["width"]],"doc":"Returns a swing text field"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/mmap.clj#39","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMmapApiDoc#buffer-stream","name":"buffer-stream","arglists":[["buf"]],"doc":"Returns an InputStream for a ByteBuffer, such as returned by mmap."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/mmap.clj#27","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMmapApiDoc#mmap","name":"mmap","arglists":[["f"]],"doc":"Memory-map the file named f.  Returns a ByteBuffer."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/mmap.clj#33","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMmapApiDoc#slurp","name":"slurp","arglists":[["f"]],"doc":"Reads the file named by f and returns it as a string."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#415","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#call-cc","name":"call-cc","arglists":[["f"]],"doc":"A computation in the cont monad that calls function f with a single\n   argument representing the current continuation. The function f should\n   return a continuation (which becomes the return value of call-cc),\n   or call the passed-in current continuation to terminate."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#399","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#cont-m","name":"cont-m","doc":"Monad describing computations in continuation-passing style. The monadic\n   values are functions that are called with a single argument representing\n   the continuation of the computation, to which they pass their result."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#51","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#defmonad","name":"defmonad","arglists":[["name","doc-string","operations"],["name","operations"]],"doc":"Define a named monad by defining the monad operations. The definitions\n    are written like bindings to the monad operations m-bind and\n    m-result (required) and m-zero and m-plus (optional)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#137","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#defmonadfn","name":"defmonadfn","arglists":[["name","docstring?","attr-map?","args","expr"],["name","docstring?","attr-map?",["args","expr"],"..."]],"doc":"Like defn, but for functions that use monad operations and are used inside\n   a with-monad block."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#114","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#domonad","name":"domonad","arglists":[["steps","expr"],["name","steps","expr"]],"doc":"Monad comprehension. Takes the name of a monad, a vector of steps\n    given as binding-form/monadic-expression pairs, and a result value\n    specified by expr. The monadic-expression terms can use the binding\n    variables of the previous steps.\n    If the monad contains a definition of m-zero, the step list can also\n    contain conditions of the form :when p, where the predicate p can\n    contain the binding variables from all previous steps.\n    A clause of the form :let [binding-form expr ...], where the bindings\n    are given as a vector as for the use in let, establishes additional\n    bindings that can be used in the following steps."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#274","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#identity-m","name":"identity-m","doc":"Monad describing plain computations. This monad does in fact nothing\n    at all. It is useful for testing, for combination with monad\n    transformers, and for code that is parameterized with a monad."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#217","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#m-chain","name":"m-chain","doc":"Chains together monadic computation steps that are each functions\n   of one parameter. Each step is called with the result of the previous\n   step as its argument. (m-chain (step1 step2)) is equivalent to\n   (fn [x] (domonad [r1 (step1 x) r2 (step2 r1)] r2))."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#195","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#m-fmap","name":"m-fmap","doc":"Bind the monadic value m to the function returning (f x) for argument x"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#189","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#m-join","name":"m-join","doc":"Converts a monadic value containing a monadic value into a 'simple'\n   monadic value."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#180","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#m-lift","name":"m-lift","arglists":[["n","f"]],"doc":"Converts a function f of n arguments into a function of n\n  monadic arguments returning a monadic value."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#211","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#m-map","name":"m-map","doc":"'Executes' the sequence of monadic values resulting from mapping\n   f onto the values xs. f must return a monadic value."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#228","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#m-reduce","name":"m-reduce","doc":"Return the reduction of (m-lift 2 f) over the list of monadic values mvs\n   with initial value (m-result val)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#200","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#m-seq","name":"m-seq","doc":"'Executes' the monadic values in ms and returns a sequence of the\n   basic values contained in them."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#241","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#m-when","name":"m-when","arglists":[["test","m-expr"]],"doc":"If test if logical true, return monadic value m-expr, else return\n   (m-result nil)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#247","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#m-when-not","name":"m-when-not","arglists":[["test","m-expr"]],"doc":"If test if logical false, return monadic value m-expr, else return\n   (m-result nil)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#284","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#maybe-m","name":"maybe-m","doc":"Monad describing computations with possible failures. Failure is\n    represented by nil, any other value is considered valid. As soon as\n    a step returns nil, the whole computation will yield nil as well."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#455","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#maybe-t","name":"maybe-t","arglists":[["m"],["m","nothing"],["m","nothing","which-m-plus"]],"doc":"Monad transformer that transforms a monad m into a monad in which\n   the base values can be invalid (represented by nothing, which defaults\n   to nil). The third argument chooses if m-zero and m-plus are inherited\n   from the base monad (use :m-plus-from-base) or adopt maybe-like\n   behaviour (use :m-plus-from-transformer). The default is :m-plus-from-base\n   if the base monad m has a definition for m-plus, and\n   :m-plus-from-transformer otherwise."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#36","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#monad","name":"monad","arglists":[["operations"]],"doc":"Define a monad by defining the monad operations. The definitions\n    are written like bindings to the monad operations m-bind and\n    m-result (required) and m-zero and m-plus (optional)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#433","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#monad-transformer","name":"monad-transformer","arglists":[["base","which-m-plus","operations"]],"doc":"Define a monad transforer in terms of the monad operations and the base\n    monad. The argument which-m-plus chooses if m-zero and m-plus are taken\n    from the base monad or from the transformer."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#410","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#run-cont","name":"run-cont","arglists":[["c"]],"doc":"Execute the computation c in the cont monad and return its result."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#297","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#sequence-m","name":"sequence-m","doc":"Monad describing multi-valued computations, i.e. computations\n    that can yield multiple values. Any object implementing the seq\n    protocol can be used as a monadic value."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#487","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#sequence-t","name":"sequence-t","arglists":[["m"],["m","which-m-plus"]],"doc":"Monad transformer that transforms a monad m into a monad in which\n   the base values are sequences. The argument which-m-plus chooses\n   if m-zero and m-plus are inherited from the base monad\n   (use :m-plus-from-base) or adopt sequence-like\n   behaviour (use :m-plus-from-transformer). The default is :m-plus-from-base\n   if the base monad m has a definition for m-plus, and\n   :m-plus-from-transformer otherwise."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#311","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#set-m","name":"set-m","doc":"Monad describing multi-valued computations, like sequence-m,\n    but returning sets of results instead of sequences of results."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#324","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#state-m","name":"state-m","doc":"Monad describing stateful computations. The monadic values have the\n    structure (fn [old-state] (list result new-state))."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#514","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#state-t","name":"state-t","arglists":[["m"]],"doc":"Monad transformer that transforms a monad m into a monad of stateful\n  computations that have the base monad type as their result."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#102","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#with-monad","name":"with-monad","arglists":[["monad","&","exprs"]],"doc":"Evaluates an expression after replacing the keywords defining the\n    monad operations by the functions associated with these keywords\n    in the monad definition given by name."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads.clj#372","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribMonadsApiDoc#writer-m","name":"writer-m","arglists":[["empty-accumulator"]],"doc":"Monad describing computations that accumulate data on the side, e.g. for\n   logging. The monadic values have the structure [value log]. Any of the\n   accumulators from clojure.contrib.accumulators can be used for storing the\n   log data. Its empty value is passed as a parameter."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/ns_utils.clj#81","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribNsUtilsApiDoc#dir","name":"dir","arglists":[["nsname"]],"doc":"Prints a sorted directory of public vars in a namespace"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/ns_utils.clj#86","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribNsUtilsApiDoc#docs","name":"docs","arglists":[["nsname"]],"doc":"Prints documentation for the public vars in a namespace"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/ns_utils.clj#47","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribNsUtilsApiDoc#get-ns","name":"get-ns","arglists":[["ns-sym"]],"doc":"Returns the namespace named by ns-sym or throws if the\n  namespace does not exist"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/ns_utils.clj#55","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribNsUtilsApiDoc#ns-vars","name":"ns-vars","arglists":[["ns"]],"doc":"Returns a sorted seq of symbols naming public vars in\n  a namespace"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/ns_utils.clj#61","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribNsUtilsApiDoc#print-dir","name":"print-dir","arglists":[["ns"]],"doc":"Prints a sorted directory of public vars in a namespace"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/ns_utils.clj#67","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribNsUtilsApiDoc#print-docs","name":"print-docs","arglists":[["ns"]],"doc":"Prints documentation for the public vars in a namespace"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/ns_utils.clj#75","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribNsUtilsApiDoc#vars","name":"vars","arglists":[["nsname"]],"doc":"Returns a sorted seq of symbols naming public vars in\n  a namespace"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/dispatch.clj#317","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#_*code-dispatch_*","name":"*code-dispatch*","arglists":[["object"]],"doc":"The pretty print dispatch function for pretty printing Clojure code."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#56","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#_*print-circle_*","name":"*print-circle*","doc":"Mark circular structures (N.B. This is not yet used)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#51","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#_*print-lines_*","name":"*print-lines*","doc":"Maximum number of lines to print in a pretty print instance (N.B. This is not yet used)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#44","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#_*print-miser-width_*","name":"*print-miser-width*","doc":"The column at which to enter miser style. Depending on the dispatch table, \nmiser style add newlines in more places to try to keep lines short allowing for further \nlevels of nesting."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#33","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#_*print-pprint-dispatch_*","name":"*print-pprint-dispatch*","doc":"The pretty print dispatch function. Use with-pprint-dispatch or set-pprint-dispatch\nto modify."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#29","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#_*print-pretty_*","name":"*print-pretty*","doc":"Bind to true if you want write to use pretty printing"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#38","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#_*print-right-margin_*","name":"*print-right-margin*","doc":"Pretty printing will try to avoid anything going beyond this column.\nSet it to nil to have pprint let the line be arbitrarily long. This will ignore all \nnon-mandatory newlines."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#61","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#_*print-shared_*","name":"*print-shared*","doc":"Mark repeated structures rather than repeat them (N.B. This is not yet used)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#65","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#_*print-suppress-namespaces_*","name":"*print-suppress-namespaces*","doc":"Don't print namespaces with symbols. This is particularly useful when \npretty printing the results of macro expansions"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/dispatch.clj#88","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#_*simple-dispatch_*","name":"*simple-dispatch*","arglists":[["object"]],"doc":"The pretty print dispatch function for simple data structure format."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/cl-format.clj#26","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#cl-format","name":"cl-format","arglists":[["writer","format-in","&","args"]],"doc":"An implementation of a Common Lisp compatible format function. cl-format formats its\narguments to an output stream or string based on the format control string given. It \nsupports sophisticated formatting of structured data.\n\nWriter is an instance of java.io.Writer, true to output to *out* or nil to output \nto a string, format-in is the format control string and the remaining arguments \nare the data to be formatted.\n\nThe format control string is a string to be output with embedded 'format directives' \ndescribing how to format the various arguments passed in.\n\nIf writer is nil, cl-format returns the formatted result string. Otherwise, cl-format \nreturns nil.\n\nFor example:\n (let [results [46 38 22]]\n        (cl-format true \"There ~[are~;is~:;are~]~:* ~d result~:p: ~{~d~^, ~}~%\" \n                   (count results) results))\n\nPrints to *out*:\n There are 3 results: 46, 38, 22\n\nDetailed documentation on format control strings is available in the \"Common Lisp the \nLanguage, 2nd edition\", Chapter 22 (available online at:\nhttp://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000) \nand in the Common Lisp HyperSpec at \nhttp://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm\n"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/cl-format.clj#1724","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#compile-format","name":"compile-format","arglists":[["format-str"]],"doc":"Compiles format-str into a compiled format which can be used as an argument\nto cl-format just like a plain format string. Use this function for improved \nperformance when you're using the same format string repeatedly"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/cl-format.clj#1792","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#formatter","name":"formatter","arglists":[["format-in"]],"doc":"Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning \noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/cl-format.clj#1806","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#formatter-out","name":"formatter-out","arglists":[["format-in"]],"doc":"Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/cl-format.clj#1128","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#fresh-line","name":"fresh-line","arglists":[[]],"doc":"Make a newline if the Writer is not already at the beginning of the line.\nN.B. Only works on ColumnWriters right now."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#211","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#pp","name":"pp","arglists":[[]],"doc":"A convenience macro that pretty prints the last thing output. This is\nexactly equivalent to (pprint *1)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#200","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#pprint","name":"pprint","arglists":[["object"],["object","writer"]],"doc":"Pretty print object to the optional output writer. If the writer is not provided, \nprint the object to the currently bound value of *out*."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#280","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#pprint-indent","name":"pprint-indent","arglists":[["relative-to","n"]],"doc":"Create an indent at this point in the pretty printing stream. This defines how \nfollowing lines are indented. relative-to can be either :block or :current depending \nwhether the indent should be computed relative to the start of the logical block or\nthe current column position. n is an offset. \n\nOutput is sent to *out* which must be a pretty printing writer."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#251","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#pprint-logical-block","name":"pprint-logical-block","arglists":[["options*","body"]],"doc":"Execute the body as a pretty printing logical block with output to *out* which \nmust be a pretty printing writer. When used from pprint or cl-format, this can be \nassumed. \n\nBefore the body, the caller can optionally specify options: :prefix, :per-line-prefix, \nand :suffix."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#271","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#pprint-newline","name":"pprint-newline","arglists":[["kind"]],"doc":"Print a conditional newline to a pretty printing stream. kind specifies if the \nnewline is :linear, :miser, :fill, or :mandatory. \n\nOutput is sent to *out* which must be a pretty printing writer."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#292","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#pprint-tab","name":"pprint-tab","arglists":[["kind","colnum","colinc"]],"doc":"Tab at this point in the pretty printing stream. kind specifies whether the tab\nis :line, :section, :line-relative, or :section-relative. \n\nColnum and colinc specify the target column and the increment to move the target\nforward if the output is already past the original target.\n\nOutput is sent to *out* which must be a pretty printing writer.\n\nTHIS FUNCTION IS NOT YET IMPLEMENTED."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#216","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#set-pprint-dispatch","name":"set-pprint-dispatch","arglists":[["function"]],"doc":"Set the pretty print dispatch function to a function matching (fn [obj] ...)\nwhere obj is the object to pretty print. That function will be called with *out* set\nto a pretty printing writer to which it should do its printing.\n\nFor example functions, see *simple-dispatch* and *code-dispatch* in \nclojure.contrib.pprint.dispatch.clj."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/dispatch.clj#19","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#use-method","name":"use-method","arglists":[["multifn","dispatch-val","func"]],"doc":"Installs a function as a new method of multimethod associated with dispatch-value. "},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#227","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#with-pprint-dispatch","name":"with-pprint-dispatch","arglists":[["function","&","body"]],"doc":"Execute body with the pretty print dispatch function bound to function."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#160","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#write","name":"write","arglists":[["object","&","kw-args"]],"doc":"Write an object subject to the current bindings of the printer control variables.\nUse the kw-args argument to override individual variables for this call (and any \nrecursive calls). Returns the string result if :stream is nil or nil otherwise.\n\nThe following keyword arguments can be passed with values:\n  Keyword              Meaning                              Default value\n  :stream              Writer for output or nil             true (indicates *out*)\n  :circle*             If true, mark circular structures    Current value of *print-circle*\n  :length              Maximum elements to show in sublists Current value of *print-length*\n  :level               Maximum depth                        Current value of *print-level*\n  :lines*              Maximum lines of output              Current value of *print-lines*\n  :miser-width         Width to enter miser mode            Current value of *print-miser-width*\n  :dispatch            The pretty print dispatch function   Current value of *print-pprint-dispatch*\n  :pretty              If true, do pretty printing          Current value of *print-pretty*\n  :readably*           If true, print readably              Current value of *print-readably*\n  :right-margin        The column for the right margin      Current value of *print-right-margin*\n  :suppress-namespaces If true, no namespaces in symbols    Current value of *print-suppress-namespaces*\n\n  * = not yet supported\n"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#135","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPprintApiDoc#write-out","name":"write-out","arglists":[["object"]],"doc":"Write an object to *out* subject to the current bindings of the printer control \nvariables. Use the kw-args argument to override individual variables for this call (and \nany recursive calls).\n\n*out* must be a PrettyWriter if pretty printing is enabled. This is the responsibility\nof the caller.\n\nThis method is primarily intended for use by pretty print dispatch functions that \nalready know that the pretty printer will have set up their environment appropriately.\nNormal library clients should use the standard \"write\" interface. "},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/finite_distributions.clj#148","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesFiniteDistributionsApiDoc#certainly","name":"certainly","arglists":[["v"]],"doc":"Returns a distribution in which the single value v has probability 1."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/finite_distributions.clj#94","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesFiniteDistributionsApiDoc#choose","name":"choose","arglists":[["&","choices"]],"doc":"Construct a distribution from an explicit list of probabilities\n   and values. They are given in the form of a vector of probability-value\n   pairs. In the last pair, the probability can be given by the keyword\n   :else, which stands for 1 minus the total of the other probabilities."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/finite_distributions.clj#48","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesFiniteDistributionsApiDoc#cond-dist-m","name":"cond-dist-m","doc":"Variant of the dist monad that can handle undefined values."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/finite_distributions.clj#162","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesFiniteDistributionsApiDoc#cond-prob","name":"cond-prob","arglists":[["pred","dist"]],"doc":"Returns the conditional probability for the values in dist that satisfy\n     the predicate pred."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/finite_distributions.clj#28","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesFiniteDistributionsApiDoc#dist-m","name":"dist-m","doc":"Monad describing computations on fuzzy quantities, represented by a finite\n   probability distribution for the possible values. A distribution is\n   represented by a map from values to probabilities."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/finite_distributions.clj#153","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesFiniteDistributionsApiDoc#join-with","name":"join-with","arglists":[["f","dist1","dist2"]],"doc":"Returns the distribution of (f x y) with x from dist1 and y from dist2."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/finite_distributions.clj#136","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesFiniteDistributionsApiDoc#make-distribution","name":"make-distribution","arglists":[["coll","f"]],"doc":"Returns the distribution in which each element x of the collection\n   has a probability proportional to (f x)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/finite_distributions.clj#72","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesFiniteDistributionsApiDoc#normalize","name":"normalize","arglists":[["weights"]],"doc":"Convert a weight map (e.g. a map of counter values) to a distribution\n   by multiplying with a normalization factor. If the map has a key\n   :total, its value is assumed to be the sum over all the other values and\n   it is used for normalization. Otherwise, the sum is calculated\n   explicitly. The :total key is removed from the resulting distribution."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/finite_distributions.clj#199","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesFiniteDistributionsApiDoc#prob","name":"prob","arglists":[["pred","dist"]],"doc":"Return the probability that the predicate pred is satisfied in the\n   distribution dist, i.e. the sum of the probabilities of the values\n   that satisfy pred."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/finite_distributions.clj#86","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesFiniteDistributionsApiDoc#uniform","name":"uniform","arglists":[["coll"]],"doc":"Return a distribution in which each of the elements of coll\n   has the same probability."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/finite_distributions.clj#142","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesFiniteDistributionsApiDoc#zipf","name":"zipf","arglists":[["s","n"]],"doc":"Returns the Zipf distribution in which the numbers k=1..n have\n   probabilities proportional to 1/k^s."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj#86","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc#discrete","name":"discrete","arglists":[["dist"]],"doc":"A discrete distribution, defined by a map dist mapping values\n     to probabilities. The sum of probabilities must be one."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj#145","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc#exponential","name":"exponential","arglists":[["lambda"]],"doc":"Transform a sequence of uniform random numbers in the interval [0, 1)\n     into a sequence of exponential random numbers with parameter lambda."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj#136","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc#lognormal","name":"lognormal","arglists":[["mu","sigma"]],"doc":"Transform a sequence of uniform random numbesr in the interval [0, 1)\n     into a sequence of lognormal random numbers with mean mu and standard\n     deviation sigma."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj#227","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc#n-sphere","name":"n-sphere","arglists":[["n","r"]],"doc":"Return a uniform distribution of n-dimensional vectors inside an\n     n-sphere of radius r."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj#115","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc#normal","name":"normal","arglists":[["mu","sigma"]],"doc":"Transform a sequence urs of uniform random number in the interval [0, 1)\n   into a sequence of normal random numbers with mean mu and standard\n   deviation sigma."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj#162","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc#normal-box-muller","name":"normal-box-muller","arglists":[["mu","sigma"]],"doc":"Transform a sequence of uniform random numbers in the interval [0, 1)\n   into a sequence of normal random numbers with mean mu and standard\n   deviation sigma."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj#61","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc#random-stream","name":"random-stream","arglists":[["distribution","random-stream-state"]],"doc":"Define a random stream by a distribution and the state of a\n   random number stream with uniform distribution in [0, 1)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj#73","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc#reject","name":"reject","arglists":[["p","dist"]],"doc":"Return the distribution that results from rejecting the values from\n   dist that do not satisfy predicate p."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj#181","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc#sample","name":"sample","arglists":[["n","dist"]],"doc":"Return the distribution of samples of length n from the\n       distribution dist"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj#181","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc#sample-mean","name":"sample-mean","arglists":[["n","dist"]],"doc":"Return the distribution of the mean over n samples from the\n       distribution dist"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj#181","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc#sample-mean-variance","name":"sample-mean-variance","arglists":[["n","dist"]],"doc":"Return the distribution of the mean-and-variance (a vector containing\n       the mean and the variance) over n samples from the distribution dist"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj#181","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc#sample-reduce","name":"sample-reduce","arglists":[["f","n","dist"],["f","val","n","dist"]],"doc":"Returns the distribution of the reduction of f over n samples from the\n       distribution dist."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo.clj#181","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesMonteCarloApiDoc#sample-sum","name":"sample-sum","arglists":[["n","dist"]],"doc":"Return the distribution of the sum over n samples from the\n       distribution dist."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/random_numbers.clj#34","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesRandomNumbersApiDoc#lcg","name":"lcg","arglists":[["modulus","multiplier","increment","seed"]],"doc":"Create a linear congruential generator"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/random_numbers.clj#55","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProbabilitiesRandomNumbersApiDoc#rand-stream","name":"rand-stream","doc":"A random number stream based on clojure.core/rand. Note that this\n   generator uses an internal mutable state. The state is thus not stored\n   in the stream object and cannot be restored."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/profile.clj#42","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProfileApiDoc#_*enable-profiling_*","name":"*enable-profiling*","doc":"Set this to false before loading/compiling to omit\nprofiling code."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/profile.clj#95","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProfileApiDoc#print-summary","name":"print-summary","arglists":[["profile-summary"]],"doc":"Prints a table of the results returned by summarize."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/profile.clj#45","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProfileApiDoc#prof","name":"prof","arglists":[["name","&","body"]],"doc":"If *enable-profiling* is true, wraps body in profiling code.\n  Returns the result of body. Profile timings will be stored in\n  *profile-data* using name, which must be a keyword, as the key.\n  Timings are measured with System/nanoTime."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/profile.clj#106","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProfileApiDoc#profile","name":"profile","arglists":[["&","body"]],"doc":"Runs body with profiling enabled, then prints a summary of\n  results.  Returns nil."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/profile.clj#73","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProfileApiDoc#summarize","name":"summarize","arglists":[["profile-data"]],"doc":"Takes the raw data returned by with-profile-data and returns a map\n  from names to summary statistics.  Each value in the map will look\n  like:\n\n     {:mean ..., :min ..., :max ..., :count ..., :sum ...}\n\n  :mean, :min, and :max are how long the profiled section took to run,\n  in nanoseconds.  :count is the total number of times the profiled\n  section was executed.  :sum is the total amount of time spent in the\n  profiled section, in nanoseconds."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/profile.clj#63","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribProfileApiDoc#with-profile-data","name":"with-profile-data","arglists":[["&","body"]],"doc":"Executes body with *profile-data* bound to an atom of a new map.\n  Returns the raw profile data as a map.  Keys in the map are profile\n  names (keywords), and values are lists of elapsed time, in\n  nanoseconds."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/prxml.clj#32","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPrxmlApiDoc#_*html-compatible_*","name":"*html-compatible*","doc":"If true, empty tags will have a space before the closing />"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/prxml.clj#36","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPrxmlApiDoc#_*prxml-indent_*","name":"*prxml-indent*","doc":"The number of spaces to indent sub-tags.  nil for no indent\n  and no extra line-breaks."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/prxml.clj#142","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribPrxmlApiDoc#prxml","name":"prxml","arglists":[["&","args"]],"doc":"Print XML to *out*.  Vectors become XML tags: the first item is the\n  tag name; optional second item is a map of attributes.\n\n  Sequences are processed recursively, so you can use map and other\n  sequence functions inside prxml.\n\n    (prxml [:p {:class \"greet\"} [:i \"Ladies & gentlemen\"]])\n    ; => <p class=\"greet\"><i>Ladies &amp; gentlemen</i></p>\n\n  PSEUDO-TAGS: some keywords have special meaning:\n\n    :raw!      do not XML-escape contents\n    :comment!  create an XML comment\n    :decl!     create an XML declaration, with attributes\n    :cdata!    create a CDATA section\n    :doctype!  create a DOCTYPE!\n\n    (prxml [:p [:raw! \"<i>here & gone</i>\"]])\n    ; => <p><i>here & gone</i></p>\n\n    (prxml [:decl! {:version \"1.1\"}])\n    ; => <?xml version=\"1.1\" encoding=\"UTF-8\"?>"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_ln.clj#208","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplLnApiDoc#print-repl-info","name":"print-repl-info","arglists":[[]],"doc":"Prints info about the current repl"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_ln.clj#217","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplLnApiDoc#repl","name":"repl","arglists":[["&","options"]],"doc":"A repl that supports line numbers. For definitions and evaluations made\n  at the repl, the repl-name and line number will be reported as the\n  origin. Use set-repl-name and set-repl-prompt to customize the repl name\n  and prompt. This repl supports all of the keyword arguments documented\n  for clojure.main/repl with the following change and additions:\n\n       - :prompt has a new default\n         default: #(clojure.core/print (repl-prompt))\n\n       - :name-fmt, Name format string\n         default: the name-fmt of the parent repl, or \"repl-%S\"\n\n       - :prompt-fmt, Prompt format string\n         default: the prompt-fmt of the parent repl, or \"%S:%L %N=> \""},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_ln.clj#202","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplLnApiDoc#repl-info","name":"repl-info","arglists":[[]],"doc":"Returns a map of info about the current repl"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_ln.clj#148","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplLnApiDoc#repl-prompt","name":"repl-prompt","arglists":[[]],"doc":"Returns the current repl prompt based on this repl's prompt-fmt"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_ln.clj#157","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplLnApiDoc#set-repl-name","name":"set-repl-name","arglists":[[],["name-fmt"]],"doc":"Sets the repl name format to the string name-fmt. Include the following\n  codes in the name to make the corresponding dynamic values part of it:\n\n    %S - repl serial number\n    %T - thread id\n    %D - nesting depth in this thread\n\n  With no arguments, resets the repl name to its default: \"repl-%S\""},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_ln.clj#180","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplLnApiDoc#set-repl-prompt","name":"set-repl-prompt","arglists":[[],["prompt-fmt"]],"doc":"Sets the repl prompt. Include the following codes in the prompt to make\n  the corresponding dynamic values part of it:\n\n    %S - repl serial number\n    %T - thread id\n    %D - nesting depth in this thread\n    %L - input line number\n    %N - namespace name\n\n  With no arguments, resets the repl pompt to its default: \"%S:%L %N=> \""},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_ln.clj#119","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplLnApiDoc#stream-repl","name":"stream-repl","arglists":[["&","options"]],"doc":"Repl entry point that provides convenient overriding of input, output,\n  and err streams via sequential keyword-value pairs. Default values\n  for :in, :out, and :err are streams associated with System/in,\n  System/out, and System/err using UTF-8 encoding. Also supports all the\n  options provided by clojure.contrib.repl-ln/repl."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_utils/javadoc.clj#18","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplUtilsApiDoc#_*local-javadocs_*","name":"*local-javadocs*","doc":"Ref to a list of local paths for Javadoc-generated HTML\n  files."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_utils/javadoc.clj#28","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplUtilsApiDoc#_*remote-javadocs_*","name":"*remote-javadocs*","doc":"Ref to a map from package name prefixes to URLs for remote\n  Javadocs."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_utils.clj#142","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplUtilsApiDoc#add-break-thread!","name":"add-break-thread!","arglists":[[],["t"]],"doc":"Add the given thread to break-threads so that it will be stopped\n  any time the user presses Ctrl-C.  Calls start-handling-break for\n  you.  Adds the current thread if none is given."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_utils/javadoc.clj#43","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplUtilsApiDoc#add-local-javadoc","name":"add-local-javadoc","arglists":[["path"]],"doc":"Adds to the list of local Javadoc paths."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_utils/javadoc.clj#48","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplUtilsApiDoc#add-remote-javadoc","name":"add-remote-javadoc","arglists":[["package-prefix","url"]],"doc":"Adds to the list of remote Javadoc URLs.  package-prefix is the\n  beginning of the package name that has docs at this URL."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_utils.clj#122","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplUtilsApiDoc#break-threads","name":"break-threads","doc":"Threads to stop when Ctrl-C is pressed.  See 'add-break-thread!'"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_utils/javadoc.clj#54","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplUtilsApiDoc#find-javadoc-url","name":"find-javadoc-url","arglists":[["classname"]],"doc":"Searches for a URL for the given class name.  Tries\n  *local-javadocs* first, then *remote-javadocs*.  Returns a string."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_utils.clj#91","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplUtilsApiDoc#get-source","name":"get-source","arglists":[["x"]],"doc":"Returns a string of the source code for the given symbol, if it can\n  find it.  This requires that the symbol resolve to a Var defined in\n  a namespace for which the .clj is in the classpath.  Returns nil if\n  it can't find the source.  For most REPL usage, 'source' is more\n  convenient.\n  \n  Example: (get-source 'filter)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_utils/javadoc.clj#74","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplUtilsApiDoc#javadoc","name":"javadoc","arglists":[["class-or-object"]],"doc":"Opens a browser window displaying the javadoc for the argument.\n  Tries *local-javadocs* first, then *remote-javadocs*."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_utils.clj#56","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplUtilsApiDoc#show","name":"show","arglists":[["x"],["x","selector"]],"doc":"With one arg prints all static and instance members of x or (class x).\n  Each member is listed with a number which can be given as 'selector'\n  to return the member object -- the REPL will print more details for\n  that member.\n\n  The selector also may be a string or regex, in which case only\n  members whose names match 'selector' as a case-insensitive regex\n  will be printed.\n\n  Finally, the selector also may be a predicate, in which case only\n  members for which the predicate returns true will be printed.  The\n  predicate will be passed a single argument, a map that includes the\n  :text that will be printed and the :member object itself, as well as\n  all the properies of the member object as translated by 'bean'.\n\n  Examples: (show Integer)  (show [])  (show String 23)  (show String \"case\")"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_utils.clj#112","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplUtilsApiDoc#source","name":"source","arglists":[["n"]],"doc":"Prints the source code for the given symbol, if it can find it.\n  This requires that the symbol resolve to a Var defined in a\n  namespace for which the .clj is in the classpath.\n  \n  Example: (source filter)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/repl_utils.clj#125","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribReplUtilsApiDoc#start-handling-break","name":"start-handling-break","arglists":[[]],"doc":"Register INT signal handler.  After calling this, Ctrl-C will cause\n  all break-threads to be stopped.  See 'add-break-thread!'"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#168","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#find-first","name":"find-first","arglists":[["pred","coll"]],"doc":"Returns the first item of coll for which (pred item) returns logical true.\n  Consumes sequences up to the first match, will consume the entire sequence\n  and return nil if no match is found."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#32","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#flatten","name":"flatten","arglists":[["x"]],"doc":"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#87","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#frequencies","name":"frequencies","arglists":[["coll"]],"doc":"Returns a map from distinct items in coll to the number of times\n  they appear."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#63","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#group-by","name":"group-by","arglists":[["f","coll"]],"doc":"Returns a sorted map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#46","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#includes?","name":"includes?","arglists":[["coll","x"]],"doc":"Returns true if coll contains something equal (with =) to x,\n  in linear time."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#53","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#indexed","name":"indexed","arglists":[["s"]],"doc":"Returns a lazy sequence of [index, item] pairs, where items come\n  from 's' and indexes count up from zero.\n\n  (indexed '(a b c d))  =>  ([0 a] [1 b] [2 c] [3 d])"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#133","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#partition-all","name":"partition-all","arglists":[["n","coll"],["n","step","coll"]],"doc":"Returns a lazy sequence of lists like clojure.core/partition, but may\n  include lists with fewer than n items at the end."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#76","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#partition-by","name":"partition-by","arglists":[["f","coll"]],"doc":"Applies f to each value in coll, splitting it each time f returns\n   a new value.  Returns a lazy seq of lazy seqs."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#150","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#rand-elt","name":"rand-elt","arglists":[["s"]],"doc":"Return a random element of this seq"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#104","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#rec-cat","name":"rec-cat","arglists":[["binding-name","&","exprs"]],"doc":"Similar to lazy-cat but binds the resulting sequence to the supplied \n  binding-name, allowing for recursive expressions."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#97","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#rec-seq","name":"rec-seq","arglists":[["binding-name","&","body"]],"doc":"Similar to lazy-seq but binds the resulting seq to the supplied \n  binding-name, allowing for recursive expressions."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#113","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#reductions","name":"reductions","arglists":[["f","coll"],["f","init","coll"]],"doc":"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#123","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#rotations","name":"rotations","arglists":[["x"]],"doc":"Returns a lazy seq of all rotations of a seq"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#40","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#separate","name":"separate","arglists":[["f","s"]],"doc":"Returns a vector:\n   [ (filter f s), (filter (complement f) s) ]"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#157","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#seq-on","name":"seq-on","arglists":[["s"]],"doc":"Returns a seq on the object s. Works like the built-in seq but as\n   a multimethod that can have implementations for new classes and types."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#143","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSeqUtilsApiDoc#shuffle","name":"shuffle","arglists":[["coll"]],"doc":"Return a random permutation of coll"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/server_socket.clj#87","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribServerSocketApiDoc#create-repl-server","name":"create-repl-server","arglists":[["port","backlog","bind-addr"],["port","backlog"],["port"]],"doc":"create a repl on a socket"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/server_socket.clj#53","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribServerSocketApiDoc#create-server","name":"create-server","arglists":[["port","fun","backlog","bind-addr"],["port","fun","backlog"],["port","fun"]],"doc":"Creates a server socket on port. Upon accept, a new thread is\n  created which calls:\n\n  (fun input-stream output-stream)\n\n  Optional arguments support specifying a listen backlog and binding\n  to a specific endpoint."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/set.clj#35","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSetApiDoc#proper-subset?","name":"proper-subset?","arglists":[["set1","set2"]],"doc":"Is s1 a proper subset of s2?"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/set.clj#42","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSetApiDoc#proper-superset?","name":"proper-superset?","arglists":[["set1","set2"]],"doc":"Is s1 a proper superset of s2?"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/set.clj#21","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSetApiDoc#subset?","name":"subset?","arglists":[["set1","set2"]],"doc":"Is set1 a subset of set2?"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/set.clj#28","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSetApiDoc#superset?","name":"superset?","arglists":[["set1","set2"]],"doc":"Is set1 a superset of set2?"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/shell_out.clj#82","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribShellOutApiDoc#sh","name":"sh","arglists":[["&","args"]],"doc":"Passes the given strings to Runtime.exec() to launch a sub-process.\n\n  Options are\n\n  :in    may be given followed by a String specifying text to be fed to the \n         sub-process's stdin.  \n  :out   option may be given followed by :bytes or a String. If a String \n         is given, it will be used as a character encoding name (for \n         example \"UTF-8\" or \"ISO-8859-1\") to convert the \n         sub-process's stdout to a String which is returned.\n         If :bytes is given, the sub-process's stdout will be stored in \n         a byte array and returned.  Defaults to UTF-8.\n  :return-map\n         when followed by boolean true, sh returns a map of\n           :exit => sub-process's exit code\n           :out  => sub-process's stdout (as byte[] or String)\n           :err  => sub-process's stderr (as byte[] or String)\n         when not given or followed by false, sh returns a single\n         array or String of the sub-process's stdout followed by its\n         stderr\n  :env   override the process env with a map (or the underlying Java\n         String[] if you are a masochist).\n  :dir   override the process dir with a String or java.io.File.\n\n  You can bind :env or :dir for multiple operations using with-sh-env\n  and with-sh-dir."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/singleton.clj#28","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSingletonApiDoc#global-singleton","name":"global-singleton","arglists":[["f"]],"doc":"Returns a global singleton function.  f is a function of no\n  arguments that creates and returns some object.  The singleton\n  function will call f just once, the first time it is needed, and\n  cache the value for all subsequent calls.\n\n  Warning: global singletons are often unsafe in multi-threaded code.\n  Consider per-thread-singleton instead."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/singleton.clj#41","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSingletonApiDoc#per-thread-singleton","name":"per-thread-singleton","arglists":[["f"]],"doc":"Returns a per-thread singleton function.  f is a function of no\n  arguments that creates and returns some object.  The singleton\n  function will call f only once for each thread, and cache its value\n  for subsequent calls from the same thread.  This allows you to\n  safely and lazily initialize shared objects on a per-thread basis.\n\n  Warning: due to a bug in JDK 5, it may not be safe to use a\n  per-thread-singleton in the initialization function for another\n  per-thread-singleton.  See\n  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5025230"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#32","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#connection","name":"connection","arglists":[[]],"doc":"Returns the current database connection (or throws if there is none)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#101","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#create-table","name":"create-table","arglists":[["name","&","specs"]],"doc":"Creates a table on the open database connection given a table name and\n  specs. Each spec is either a column spec: a vector containing a column\n  name and optionally a type and other constraints, or a table-level\n  constraint: a vector containing words that express the constraint. All\n  words used to describe the table may be supplied as strings or keywords."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#155","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#delete-rows","name":"delete-rows","arglists":[["table","where-params"]],"doc":"Deletes rows from a table. where-params is a vector containing a string\n  providing the (optionally parameterized) selection criteria followed by\n  values for any parameters."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#79","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#do-commands","name":"do-commands","arglists":[["&","commands"]],"doc":"Executes SQL commands on the open database connection."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#88","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#do-prepared","name":"do-prepared","arglists":[["sql","&","param-groups"]],"doc":"Executes an (optionally parameterized) SQL prepared statement on the\n  open database connection. Each param-group is a seq of values for all of\n  the parameters."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#117","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#drop-table","name":"drop-table","arglists":[["name"]],"doc":"Drops a table on the open database connection given its name, a string\n  or keyword"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#31","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#find-connection","name":"find-connection","arglists":[[]],"doc":"Returns the current database connection (or nil if there is none)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#148","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#insert-records","name":"insert-records","arglists":[["table","&","records"]],"doc":"Inserts records into a table. records are maps from strings or\n  keywords (identifying columns) to values."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#142","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#insert-rows","name":"insert-rows","arglists":[["table","&","rows"]],"doc":"Inserts complete rows into a table. Each row is a vector of values for\n  each of the table's columns in order."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#124","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#insert-values","name":"insert-values","arglists":[["table","column-names","&","value-groups"]],"doc":"Inserts rows into a table with values for specified columns only.\n  column-names is a vector of strings or keywords identifying columns. Each\n  value-group is a vector containing a values for each column in\n  order. When inserting complete rows (all columns), consider using\n  insert-rows instead."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#73","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#is-rollback-only","name":"is-rollback-only","arglists":[[]],"doc":"Returns true if the outermost transaction will rollback rather than\n  commit when complete"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#67","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#set-rollback-only","name":"set-rollback-only","arglists":[[]],"doc":"Marks the outermost transaction such that it will rollback rather than\n  commit when complete"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#56","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#transaction","name":"transaction","arglists":[["&","body"]],"doc":"Evaluates body as a transaction on the open database connection. Any\n  nested transactions are absorbed into the outermost transaction. By\n  default, all database updates are committed together as a group after\n  evaluating the outermost body, or rolled back on any uncaught\n  exception. If set-rollback-only is called within scope of the outermost\n  transaction, the entire transaction will be rolled back rather than\n  committed when complete."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#180","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#update-or-insert-values","name":"update-or-insert-values","arglists":[["table","where-params","record"]],"doc":"Updates values on selected rows in a table, or inserts a new row when no\n  existing row matches the selection criteria. where-params is a vector\n  containing a string providing the (optionally parameterized) selection\n  criteria followed by values for any parameters. record is a map from\n  strings or keywords (identifying columns) to updated values."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#166","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#update-values","name":"update-values","arglists":[["table","where-params","record"]],"doc":"Updates values on selected rows in a table. where-params is a vector\n  containing a string providing the (optionally parameterized) selection\n  criteria followed by values for any parameters. record is a map from\n  strings or keywords (identifying columns) to updated values."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#34","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#with-connection","name":"with-connection","arglists":[["db-spec","&","body"]],"doc":"Evaluates body in the context of a new connection to a database then\n  closes the connection. db-spec is a map containing values for one of the\n  following parameter sets:\n\n  DriverManager:\n    :classname   (required) a String, the jdbc driver class name\n    :subprotocol (required) a String, the jdbc subprotocol\n    :subname     (required) a String, the jdbc subname\n    (others)     (optional) passed to the driver as properties.\n\n  DataSource:\n    :datasource  (required) a javax.sql.DataSource\n    :username    (optional) a String\n    :password    (optional) a String, required if :username is supplied\n\n  JNDI:\n    :name        (required) a String or javax.naming.Name\n    :environment (optional) a java.util.Map"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql.clj#193","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlApiDoc#with-query-results","name":"with-query-results","arglists":[["results","sql-params","&","body"]],"doc":"Executes a query, then evaluates body with results bound to a seq of the\n  results. sql-params is a vector containing a string providing\n  the (optionally parameterized) SQL query followed by values for any\n  parameters."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/internal.clj#38","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlInternalApiDoc#connection_*","name":"connection*","arglists":[[]],"doc":"Returns the current database connection (or throws if there is none)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/internal.clj#33","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlInternalApiDoc#find-connection_*","name":"find-connection*","arglists":[[]],"doc":"Returns the current database connection (or nil if there is none)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/internal.clj#51","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlInternalApiDoc#get-connection","name":"get-connection","arglists":[[{"keys":["classname","subprotocol","subname","datasource","username","password","name","environment"],"as":"db-spec"}]],"doc":"Creates a connection to a database. db-spec is a map containing values\n  for one of the following parameter sets:\n\n  DriverManager:\n    :classname   (required) a String, the jdbc driver class name\n    :subprotocol (required) a String, the jdbc subprotocol\n    :subname     (required) a String, the jdbc subname\n    (others)     (optional) passed to the driver as properties.\n\n  DataSource:\n    :datasource  (required) a javax.sql.DataSource\n    :username    (optional) a String\n    :password    (optional) a String, required if :username is supplied\n\n  JNDI:\n    :name        (required) a String or javax.naming.Name\n    :environment (optional) a java.util.Map"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/internal.clj#100","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlInternalApiDoc#print-sql-exception","name":"print-sql-exception","arglists":[["stream","exception"]],"doc":"Prints the contents of an SQLException to stream"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/internal.clj#114","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlInternalApiDoc#print-sql-exception-chain","name":"print-sql-exception-chain","arglists":[["stream","exception"]],"doc":"Prints a chain of SQLExceptions to stream"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/internal.clj#122","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlInternalApiDoc#print-update-counts","name":"print-update-counts","arglists":[["stream","exception"]],"doc":"Prints the update counts from a BatchUpdateException to stream"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/internal.clj#44","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlInternalApiDoc#rollback","name":"rollback","arglists":[[],["val"]],"doc":"Accessor for the rollback flag on the current connection"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/internal.clj#131","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlInternalApiDoc#throw-rollback","name":"throw-rollback","arglists":[["e"]],"doc":"Sets rollback and throws a wrapped exception"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/internal.clj#138","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlInternalApiDoc#transaction_*","name":"transaction*","arglists":[["func"]],"doc":"Evaluates func as a transaction on the open database connection. Any\n  nested transactions are absorbed into the outermost transaction. By\n  default, all database updates are committed together as a group after\n  evaluating the outermost body, or rolled back on any uncaught\n  exception. If rollback is set within scope of the outermost transaction,\n  the entire transaction will be rolled back rather than committed when\n  complete."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/internal.clj#91","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlInternalApiDoc#with-connection_*","name":"with-connection*","arglists":[["db-spec","func"]],"doc":"Evaluates func in the context of a new connection to a database then\n  closes the connection."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/internal.clj#172","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlInternalApiDoc#with-query-results_*","name":"with-query-results*","arglists":[[["sql","&","params","as","sql-params"],"func"]],"doc":"Executes a query, then evaluates func passing in a seq of the results as\n  an argument. The first argument is a vector containing the (optionally\n  parameterized) sql query string followed by values for any parameters."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#24","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#create-fruit","name":"create-fruit","arglists":[[]],"doc":"Create a table"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#189","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#db-batchupdate-exception","name":"db-batchupdate-exception","arglists":[[]],"doc":"Demonstrate a batch update exception"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#160","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#db-exception","name":"db-exception","arglists":[[]],"doc":"Demonstrate rolling back a partially completed transaction on exception"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#149","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#db-get-tables","name":"db-get-tables","arglists":[[]],"doc":"Demonstrate getting table info"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#144","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#db-grade-a","name":"db-grade-a","arglists":[[]],"doc":"Print rows describing all grade a fruit (grade between 90 and 100)"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#130","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#db-grade-range","name":"db-grade-range","arglists":[["min","max"]],"doc":"Print rows describing fruit that are within a grade range"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#81","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#db-read","name":"db-read","arglists":[[]],"doc":"Read the entire fruit table"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#120","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#db-read-all","name":"db-read-all","arglists":[[]],"doc":"Return all the rows of the fruit table as a vector"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#199","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#db-rollback","name":"db-rollback","arglists":[[]],"doc":"Demonstrate a rollback-only trasaction"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#176","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#db-sql-exception","name":"db-sql-exception","arglists":[[]],"doc":"Demonstrate an sql exception"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#100","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#db-update","name":"db-update","arglists":[[]],"doc":"Update two fruits as a transaction"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#92","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#db-update-appearance-cost","name":"db-update-appearance-cost","arglists":[["name","appearance","cost"]],"doc":"Update the appearance and cost of the named fruit"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#110","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#db-update-or-insert","name":"db-update-or-insert","arglists":[["record"]],"doc":"Updates or inserts a fruit"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#68","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#db-write","name":"db-write","arglists":[[]],"doc":"Write initial values to the database as a transaction"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#34","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#drop-fruit","name":"drop-fruit","arglists":[[]],"doc":"Drop a table"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#60","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#insert-records-fruit","name":"insert-records-fruit","arglists":[[]],"doc":"Insert records, maps from keys specifying columns to values"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#41","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#insert-rows-fruit","name":"insert-rows-fruit","arglists":[[]],"doc":"Insert complete rows"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/sql/test.clj#51","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribSqlTestApiDoc#insert-values-fruit","name":"insert-values-fruit","arglists":[[]],"doc":"Insert rows with values for only specific columns"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stacktrace.clj#71","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStacktraceApiDoc#e","name":"e","arglists":[[]],"doc":"REPL utility.  Prints a brief stack trace for the root cause of the\n  most recent exception."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stacktrace.clj#62","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStacktraceApiDoc#print-cause-trace","name":"print-cause-trace","arglists":[["tr"],["tr","n"]],"doc":"Like print-stack-trace but prints chained exceptions (causes)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stacktrace.clj#43","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStacktraceApiDoc#print-stack-trace","name":"print-stack-trace","arglists":[["tr"],["tr","n"]],"doc":"Prints a Clojure-oriented stack trace of tr, a Throwable.\n  Prints a maximum of n stack frames (default: unlimited).\n  Does not print chained exceptions (causes)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stacktrace.clj#38","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStacktraceApiDoc#print-throwable","name":"print-throwable","arglists":[["tr"]],"doc":"Prints the class and message of a Throwable."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stacktrace.clj#27","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStacktraceApiDoc#print-trace-element","name":"print-trace-element","arglists":[["e"]],"doc":"Prints a Clojure-oriented view of one element in a stack trace."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stacktrace.clj#20","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStacktraceApiDoc#root-cause","name":"root-cause","arglists":[["tr"]],"doc":"Returns the last 'cause' Throwable in a chain of Throwables."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils.clj#96","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStrUtilsApiDoc#chomp","name":"chomp","arglists":[["s"]],"doc":"Removes all trailing newline \\n or return \\r characters from\n  string.  Note: String.trim() is similar and faster."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils.clj#91","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStrUtilsApiDoc#chop","name":"chop","arglists":[["s"]],"doc":"Removes the last character of string."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils.clj#50","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStrUtilsApiDoc#re-gsub","name":"re-gsub","arglists":[["regex","replacement","string"]],"doc":"Replaces all instances of 'pattern' in 'string' with\n  'replacement'.  Like Ruby's 'String#gsub'.\n  \n  If (ifn? replacment) is true, the replacement is called with the\n  match.\n  "},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils.clj#28","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStrUtilsApiDoc#re-partition","name":"re-partition","arglists":[["re","string"]],"doc":"Splits the string into a lazy sequence of substrings, alternating\n  between substrings that match the patthern and the substrings\n  between the matches.  The sequence always starts with the substring\n  before the first match, or an empty string if the beginning of the\n  string matches.\n\n  For example: (re-partition #\"[a-z]+\" \"abc123def\")\n\n  Returns: (\"\" \"abc\" \"123\" \"def\")"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils.clj#21","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStrUtilsApiDoc#re-split","name":"re-split","arglists":[["pattern","string"],["pattern","string","limit"]],"doc":"Splits the string on instances of 'pattern'.  Returns a sequence of\n  strings.  Optional 'limit' argument is the maximum number of\n  splits.  Like Perl's 'split'."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils.clj#66","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStrUtilsApiDoc#re-sub","name":"re-sub","arglists":[["regex","replacement","string"]],"doc":"Replaces the first instance of 'pattern' in 'string' with\n  'replacement'.  Like Ruby's 'String#sub'.\n  \n  If (ifn? replacement) is true, the replacement is called with\n  the match.\n  "},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils.clj#84","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStrUtilsApiDoc#str-join","name":"str-join","arglists":[["separator","sequence"]],"doc":"Returns a string of all elements in 'sequence', separated by\n  'separator'.  Like Perl's 'join'."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#182","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStreamUtilsApiDoc#defst","name":"defst","arglists":[["name","args","streams","&","body"]],"doc":"Define the stream transformer name by body.\n   The non-stream arguments args and the stream arguments streams\n   are given separately, with args being possibly empty."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#72","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStreamUtilsApiDoc#defstream","name":"defstream","arglists":[["type-tag","args","&","body"]],"doc":"Define object of the given type as a stream whose implementation\n   of stream-next is defined by args and body. This macro adds\n   a type-specific method for stream-next and derives type\n   from stream-type."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#148","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStreamUtilsApiDoc#pick","name":"pick","arglists":[["n"]],"doc":"Return the next value of stream argument n inside a stream\n   transformer. When used inside of defst, the name of the stream\n   argument can be used instead of its index n."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#159","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStreamUtilsApiDoc#pick-all","name":"pick-all","arglists":[["streams"]],"doc":"Return a vector containing the next value of each stream argument\n   inside a stream transformer."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#200","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStreamUtilsApiDoc#stream-drop","name":"stream-drop","arglists":[["n","stream"]],"doc":"Return a stream containing all but the first n elements of stream."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#242","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStreamUtilsApiDoc#stream-filter","name":"stream-filter","arglists":[["p","stream"]],"doc":"Return a new stream that contrains the elements of stream\n   that satisfy the predicate p."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#270","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStreamUtilsApiDoc#stream-flatten","name":"stream-flatten","arglists":[["s"]],"doc":"Converts a stream of sequences into a stream of the elements of the\n   sequences. Flattening is not recursive, only one level of nesting\n   will be removed."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#134","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStreamUtilsApiDoc#stream-m","name":"stream-m","doc":"Monad describing stream computations. The monadic values can be\n   of any type handled by stream-next."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#218","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStreamUtilsApiDoc#stream-map","name":"stream-map","arglists":[["f","stream"]],"doc":"Return a new stream by mapping the function f on the given stream."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#90","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStreamUtilsApiDoc#stream-next","name":"stream-next","arglists":[["stream-state"]],"doc":"Returns a vector [next-value new-state] where next-value is the next\n   item in the data stream defined by stream-state and new-state\n   is the new state of the stream. At the end of the stream,\n   next-value and new-state are nil."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#112","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStreamUtilsApiDoc#stream-seq","name":"stream-seq","arglists":[["s"]],"doc":"Return a lazy seq on the stream. Also accessible via\n   clojure.contrib.seq-utils/seq-on and\n   clojure.contrib.generic.collection/seq for streams."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#68","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribStreamUtilsApiDoc#stream-type","name":"stream-type","doc":"The root type for the stream hierarchy. For each stream type,\n   add a derivation from this type."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/template.clj#173","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTemplateApiDoc#apply-template","name":"apply-template","arglists":[["expr","values"]],"doc":"Replaces _1, _2, _3, etc. in expr with corresponding elements of\n  values.  Returns the modified expression.  For use in macros."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/template.clj#184","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTemplateApiDoc#do-template","name":"do-template","arglists":[["expr","&","args"]],"doc":"Repeatedly evaluates template expr (in a do block) using values in\n  args.  args are grouped by the number of holes in the template.\n  Example: (do-template (check _1 _2) :a :b :c :d)\n  expands to (do (check :a :b) (check :c :d))"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/template.clj#127","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTemplateApiDoc#find-holes","name":"find-holes","arglists":[["form"]],"doc":"Recursively finds all symbols starting with _ in form."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/template.clj#133","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTemplateApiDoc#find-pure-exprs","name":"find-pure-exprs","arglists":[["form"]],"doc":"Recursively finds all sub-expressions in form that do not contain\n  any symbols starting with _"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/template.clj#122","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTemplateApiDoc#find-symbols","name":"find-symbols","arglists":[["form"]],"doc":"Recursively finds all symbols in form."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/template.clj#141","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTemplateApiDoc#flatten-map","name":"flatten-map","arglists":[["m"]],"doc":"Transforms a map into a vector like [key value key value]."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/template.clj#152","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTemplateApiDoc#template","name":"template","arglists":[["&","form"]],"doc":"Expands to a fn using _1, _2, _3, etc. as arguments (_ is the same\n  as _1).  Any sub-expressions without any _* variables are evaluated\n  when the fn is created, not when it is called."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/template.clj#147","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTemplateApiDoc#template?","name":"template?","arglists":[["form"]],"doc":"Returns true if form is a valid template expression."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#468","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#_*load-tests_*","name":"*load-tests*","doc":"True by default.  If set to false, no test functions will\n   be created by deftest, set-test, or with-test.  Use this to omit\n   tests when compiling or loading production code."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#474","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#_*stack-trace-depth_*","name":"*stack-trace-depth*","doc":"The maximum depth of stack traces to print when an Exception\n  is thrown during a test.  Defaults to nil, which means print the \n  complete stack trace."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#747","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#are","name":"are","arglists":[["expr","&","args"]],"doc":"Checks multiple assertions with a template expression.\n  See clojure.contrib.template/do-template for an explanation of\n  templates.\n\n  Example: (are (= _1 _2)  \n                2 (+ 1 1)\n                4 (* 2 2))\n  Expands to: \n           (do (is (= 2 (+ 1 1)))\n               (is (= 4 (* 2 2))))\n\n  Note: This breaks some reporting features, such as line numbers."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#633","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#assert-any","name":"assert-any","arglists":[["msg","form"]],"doc":"Returns generic assertion code for any test, including macros, Java\n  method calls, or isolated symbols."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#615","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#assert-predicate","name":"assert-predicate","arglists":[["msg","form"]],"doc":"Returns generic assertion code for any functional predicate.  The\n  'expected' argument to 'report' will contains the original form, the\n  'actual' argument will contain the form with all its sub-forms\n  evaluated.  If the predicate returns false, the 'actual' form will\n  be wrapped in (not...)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#843","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#compose-fixtures","name":"compose-fixtures","arglists":[["f1","f2"]],"doc":"Composes two fixture functions, creating a new fixture function\n  that combines their behavior."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#786","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#deftest","name":"deftest","arglists":[["name","&","body"]],"doc":"Defines a test function with no arguments.  Test functions may call\n  other tests, so tests may be composed.  If you compose tests, you\n  should also define a function named test-ns-hook; run-tests will\n  call test-ns-hook instead of testing all vars.\n\n  Note: Actually, the test body goes in the :test metadata on the var,\n  and the real function (the value of the var) calls test-var on\n  itself.\n\n  When *load-tests* is false, deftest is ignored."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#802","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#deftest-","name":"deftest-","arglists":[["name","&","body"]],"doc":"Like deftest but creates a private var."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#504","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#file-position","name":"file-position","arglists":[["n"]],"doc":"Returns a vector [filename line-number] for the nth call up the\n  stack."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#604","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#function?","name":"function?","arglists":[["x"]],"doc":"Returns true if argument is a function or a symbol that resolves to\n  a function (not a macro)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#597","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#get-possibly-unbound-var","name":"get-possibly-unbound-var","arglists":[["v"]],"doc":"Like var-get but returns nil if the var is unbound."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#529","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#inc-report-counter","name":"inc-report-counter","arglists":[["name"]],"doc":"Increments the named counter in *report-counters*, a ref to a map.\n  Does nothing if *report-counters* is nil."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#730","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#is","name":"is","arglists":[["form"],["form","msg"]],"doc":"Generic assertion macro.  'form' is any predicate test.\n  'msg' is an optional message to attach to the assertion.\n  \n  Example: (is (= 4 (+ 2 2)) \"Two plus two should be 4\")\n\n  Special forms:\n\n  (is (thrown? c body)) checks that an instance of c is thrown from\n  body, fails if not; then returns the thing thrown.\n\n  (is (thrown-with-msg? c re body)) checks that an instance of c is\n  thrown AND that the message on the exception matches (with\n  re-matches) the regular expression re."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#849","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#join-fixtures","name":"join-fixtures","arglists":[["fixtures"]],"doc":"Composes a collection of fixtures, in order.  Always returns a valid\n  fixture function, even if the collection is empty."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#541","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#report","name":"report","doc":"Generic reporting function, may be overridden to plug in\n   different report formats (e.g., TAP, JUnit).  Assertions such as\n   'is' call 'report' to indicate results.  The argument given to\n   'report' will be a map with a :type key.  See the documentation at\n   the top of test_is.clj for more information on the types of\n   arguments for 'report'."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#917","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#run-all-tests","name":"run-all-tests","arglists":[[],["re"]],"doc":"Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#909","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#run-tests","name":"run-tests","arglists":[[],["&","namespaces"]],"doc":"Runs all tests in the given namespaces; prints results.\n  Defaults to current namespace if none given."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#810","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#set-test","name":"set-test","arglists":[["name","&","body"]],"doc":"Experimental.\n  Sets :test metadata of the named var to a fn with the given body.\n  The var must already exist.  Does not modify the value of the var.\n\n  When *load-tests* is false, set-test is ignored."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#874","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#test-all-vars","name":"test-all-vars","arglists":[["ns"]],"doc":"Calls test-var on every var interned in the namespace, with fixtures."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#885","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#test-ns","name":"test-ns","arglists":[["ns"]],"doc":"If the namespace defines a function named test-ns-hook, calls that.\n  Otherwise, calls test-all-vars on the namespace.  'ns' is a\n  namespace object or a symbol.\n\n  Internally binds *report-counters* to a ref initialized to\n  *inital-report-counters*.  Returns the final, dereferenced state of\n  *report-counters*."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#860","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#test-var","name":"test-var","arglists":[["v"]],"doc":"If v has a function in its :test metadata, calls that function,\n  with *testing-vars* bound to (conj *testing-vars* v)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#763","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#testing","name":"testing","arglists":[["string","&","body"]],"doc":"Adds a new string to the list of testing contexts.  May be nested,\n  but must occur inside a test function (deftest)."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#523","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#testing-contexts-str","name":"testing-contexts-str","arglists":[[]],"doc":"Returns a string representation of the current test context. Joins\n  strings in *testing-contexts* with spaces."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#511","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#testing-vars-str","name":"testing-vars-str","arglists":[[]],"doc":"Returns a string representation of the current test.  Renders names\n  in *testing-vars* as a list, then the source file and line of\n  current assertion."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#715","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#try-expr","name":"try-expr","arglists":[["msg","form"]],"doc":"Used by the 'is' macro to catch unexpected exceptions.\n  You don't call this."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#774","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#with-test","name":"with-test","arglists":[["definition","&","body"]],"doc":"Takes any definition form (that returns a Var) as the first argument.\n  Remaining body goes in the :test metadata function for that Var.\n\n  When *load-tests* is false, only evaluates the definition, ignoring\n  the tests."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#494","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsApiDoc#with-test-out","name":"with-test-out","arglists":[["&","body"]],"doc":"Runs body with *out* bound to the value of *test-out*."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap.clj#51","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsTapApiDoc#print-tap-diagnostic","name":"print-tap-diagnostic","arglists":[["data"]],"doc":"Prints a TAP diagnostic line.  data is a (possibly multi-line)\n  string."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap.clj#63","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsTapApiDoc#print-tap-fail","name":"print-tap-fail","arglists":[["msg"]],"doc":"Prints a TAP 'not ok' line.  msg is a string, with no line breaks"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap.clj#58","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsTapApiDoc#print-tap-pass","name":"print-tap-pass","arglists":[["msg"]],"doc":"Prints a TAP 'ok' line.  msg is a string, with no line breaks"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap.clj#46","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsTapApiDoc#print-tap-plan","name":"print-tap-plan","arglists":[["n"]],"doc":"Prints a TAP plan line like '1..n'.  n is the number of tests"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap.clj#107","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTestIsTapApiDoc#with-tap-output","name":"with-tap-output","arglists":[["&","body"]],"doc":"Execute body with modified test-is reporting functions that produce\n  TAP output"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/trace.clj#40","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTraceApiDoc#_*trace-depth_*","name":"*trace-depth*","doc":"Current stack depth of traced function calls."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/trace.clj#75","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTraceApiDoc#deftrace","name":"deftrace","arglists":[["name","&","definition"]],"doc":"Use in place of defn; traces each call/return of this fn, including\n  arguments.  Nested calls to deftrace'd functions will print a\n  tree-like structure."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/trace.clj#50","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTraceApiDoc#trace","name":"trace","arglists":[["value"],["name","value"]],"doc":"Sends name (optional) and value to the tracer function, then\n  returns value.  May be wrapped around any expression without\n  affecting the result."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/trace.clj#64","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTraceApiDoc#trace-fn-call","name":"trace-fn-call","arglists":[["name","f","args"]],"doc":"Traces a single call to a function f with args.  'name' is the\n  symbol name of the function."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/trace.clj#59","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTraceApiDoc#trace-indent","name":"trace-indent","arglists":[[]],"doc":"Returns an indentation string based on *trace-depth*"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/trace.clj#44","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTraceApiDoc#tracer","name":"tracer","arglists":[["name","value"]],"doc":"This function is called by trace.  Prints to standard output, but\n  may be rebound to do anything you like.  'name' is optional."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/types.clj#127","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTypesApiDoc#defadt","name":"defadt","arglists":[["type-tag","&","constructors"]],"doc":"Define an algebraic data type name by an exhaustive list of constructors.\n   Each constructor can be a symbol (argument-free constructor) or a\n   list consisting of a tag symbol followed by the argument symbols.\n   The data type tag must be a keyword."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/types.clj#53","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTypesApiDoc#deftype","name":"deftype","arglists":[["type-tag","constructor-name","docstring?","attr-map?"],["type-tag","constructor-name","docstring?","attr-map?","constructor"],["type-tag","constructor-name","docstring?","attr-map?","constructor","deconstructor"]],"doc":"Define a data type by a type tag (a namespace-qualified keyword)\n   and a symbol naming the constructor function. Optionally, a\n   constructor and a deconstructor function can be given as well,\n   the defaults being clojure.core/identity and clojure.core/list.\n   The full constructor associated with constructor-name calls the\n   constructor function and attaches the type tag to its result\n   as metadata. The deconstructor function must return the arguments\n   to be passed to the constructor in order to create an equivalent\n   object. It is used for printing and matching."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/types.clj#87","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTypesApiDoc#deftype-","name":"deftype-","arglists":[["type-tag","constructor-name","&","optional"]],"doc":"Same as deftype but the constructor is private."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/types.clj#240","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribTypesApiDoc#match","name":"match","arglists":[["value","&","clauses"]],"doc":"Given a value and a list of template-expr clauses, evaluate the first\n   expr whose template matches the value. There are four kinds of templates:\n   1) Lists of the form (tag x1 x2 ...) match instances of types\n      whose constructor has the same form as the list.\n   2) Quoted lists of the form '(x1 x2 ...) match lists of the same\n      length.\n   3) Vectors of the form [x1 x2 ...] match vectors of the same length.\n   4) Maps of the form {:key1 x1 :key2 x2 ...} match maps that have\n      the same keys as the template, but which can have additional keys\n      that are not part of the template.\n   The values x1, x2, ... can be symbols or non-symbol values. Non-symbols\n   must be equal to the corresponding values in the object to be matched.\n   Symbols will be bound to the corresponding value in the object in the\n   evaluation of expr. If the same symbol occurs more than once in a,\n   template the corresponding elements of the object must be equal\n   for the template to match."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/walk.clj#102","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWalkApiDoc#keywordize-keys","name":"keywordize-keys","arglists":[["m"]],"doc":"Recursively transforms all map keys from strings to keywords."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/walk.clj#130","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWalkApiDoc#macroexpand-all","name":"macroexpand-all","arglists":[["form"]],"doc":"Recursively performs all possible macroexpansions in form."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/walk.clj#64","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWalkApiDoc#postwalk","name":"postwalk","arglists":[["f","form"]],"doc":"Performs a depth-first, post-order traversal of form.  Calls f on\n  each sub-form, uses f's return value in place of the original.\n  Recognizes all Clojure data structures except sorted-map-by.\n  Consumes seqs as with doall."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/walk.clj#90","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWalkApiDoc#postwalk-demo","name":"postwalk-demo","arglists":[["form"]],"doc":"Demonstrates the behavior of postwalk by printing each form as it is\n  walked.  Returns form."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/walk.clj#123","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWalkApiDoc#postwalk-replace","name":"postwalk-replace","arglists":[["smap","form"]],"doc":"Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the leaves of the tree first."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/walk.clj#72","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWalkApiDoc#prewalk","name":"prewalk","arglists":[["f","form"]],"doc":"Like postwalk, but does pre-order traversal."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/walk.clj#96","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWalkApiDoc#prewalk-demo","name":"prewalk-demo","arglists":[["form"]],"doc":"Demonstrates the behavior of prewalk by printing each form as it is\n  walked.  Returns form."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/walk.clj#116","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWalkApiDoc#prewalk-replace","name":"prewalk-replace","arglists":[["smap","form"]],"doc":"Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the root of the tree first."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/walk.clj#109","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWalkApiDoc#stringify-keys","name":"stringify-keys","arglists":[["m"]],"doc":"Recursively transforms all map keys from keywords to strings."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/walk.clj#47","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWalkApiDoc#walk","name":"walk","arglists":[["inner","outer","form"]],"doc":"Traverses form, an arbitrary data structure.  inner and outer are\n  functions.  Applies inner to each element of form, building up a\n  data structure of the same type, then applies outer to the result.\n  Recognizes all Clojure data structures except sorted-map-by.\n  Consumes seqs as with doall."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/with_ns.clj#20","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWithNsApiDoc#with-ns","name":"with-ns","arglists":[["ns","&","body"]],"doc":"Evaluates body in another namespace.  ns is either a namespace\n  object or a symbol.  This makes it possible to define functions in\n  namespaces other than the current one."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/with_ns.clj#28","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribWithNsApiDoc#with-temp-ns","name":"with-temp-ns","arglists":[["&","body"]],"doc":"Evaluates body in an anonymous namespace, which is then immediately\n  removed.  The temporary namespace will 'refer' clojure.core."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#65","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterApiDoc#ancestors","name":"ancestors","arglists":[["loc"]],"doc":"Returns a lazy sequence of all ancestors of location loc, starting\n  with loc and proceeding to loc's parent node and on through to the\n  root of the tree."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#45","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterApiDoc#children","name":"children","arglists":[["loc"]],"doc":"Returns a lazy sequence of all immediate children of location loc,\n  left-to-right."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#52","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterApiDoc#children-auto","name":"children-auto","arglists":[["loc"]],"doc":"Returns a lazy sequence of all immediate children of location loc,\n  left-to-right, marked so that a following tag= predicate will auto-descend."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#60","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterApiDoc#descendants","name":"descendants","arglists":[["loc"]],"doc":"Returns a lazy sequence of all descendants of location loc, in\n  depth-first order, left-to-right, starting with loc."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#33","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterApiDoc#left-locs","name":"left-locs","arglists":[["loc"]],"doc":"Returns a lazy sequence of locations to the left of loc, starting with loc."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#37","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterApiDoc#leftmost?","name":"leftmost?","arglists":[["loc"]],"doc":"Returns true if there are no more nodes to the left of location loc."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#29","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterApiDoc#right-locs","name":"right-locs","arglists":[["loc"]],"doc":"Returns a lazy sequence of locations to the right of loc, starting with loc."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#41","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterApiDoc#rightmost?","name":"rightmost?","arglists":[["loc"]],"doc":"Returns true if there are no more nodes to the right of location loc."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#18","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterXmlApiDoc#attr","name":"attr","arglists":[["attrname"],["loc","attrname"]],"doc":"Returns the xml attribute named attrname, of the xml node at location loc."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#23","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterXmlApiDoc#attr_=","name":"attr=","arglists":[["attrname","attrval"]],"doc":"Returns a query predicate that matches a node when it has an\n  attribute named attrname whose value is attrval."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#51","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterXmlApiDoc#seq-test","name":"seq-test","arglists":[["preds"]],"doc":"Returns a query predicate that matches a node when its xml content\n  matches the query expresions given."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#28","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterXmlApiDoc#tag_=","name":"tag=","arglists":[["tagname"]],"doc":"Returns a query predicate that matches a node when its is a tag\n  named tagname."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#38","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterXmlApiDoc#text","name":"text","arglists":[["loc"]],"doc":"Returns the textual contents of the given location, similar to\n  xpaths's value-of"},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#46","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterXmlApiDoc#text_=","name":"text=","arglists":[["s"]],"doc":"Returns a query predicate that matches a node when its textual\n  content equals s."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#57","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterXmlApiDoc#xml->","name":"xml->","arglists":[["loc","&","preds"]],"doc":"The loc is passed to the first predicate.  If the predicate returns\n  a collection, each value of the collection is passed to the next\n  predicate.  If it returns a location, the location is passed to the\n  next predicate.  If it returns true, the input location is passed to\n  the next predicate.  If it returns false or nil, the next predicate\n  is not called.\n\n  This process is repeated, passing the processed results of each\n  predicate to the next predicate.  xml-> returns the final sequence.\n  The entire chain is evaluated lazily.\n\n  There are also special predicates: keywords are converted to tag=,\n  strings to text=, and vectors to sub-queries that return true if\n  they match.\n\n  See the footer of zip-query.clj for examples."},{"source-url":"http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#80","wiki-url":"http://code.google.com/p/clojure-contrib/wiki/ClojureContribZipFilterXmlApiDoc#xml1->","name":"xml1->","arglists":[["loc","&","preds"]],"doc":"Returns the first item from loc based on the query predicates\n  given.  See xml->"}]}