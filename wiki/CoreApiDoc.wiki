#summary core API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for core=
by Laurent Petit (and others)

Usage: 
{{{
(ns <your-namespace>
  (:require clojure.contrib.core))
}}}
==Overview==
<pre> Functions/macros variants of the ones that can be found in clojure.core  
(note to other contrib members: feel free to add to this lib)</pre>


==Public Variables and Functions==
Shortcuts:
[#-?> -?>] [#.?. .?.] [#dissoc-in dissoc-in] [#new-by-name new-by-name] [#seqable? seqable?] 

----
===-?>===
====macro====
<pre>
Usage: *(_-?>_ x form)
       (_-?>_ x form & forms)*
</pre>
<pre> Same as clojure.core/-> but returns nil as soon as the threaded value is nil itself (thus short-circuiting any pending computation). 
Examples : 
(-?> "foo" .toUpperCase (.substring 1)) returns "OO" 
(-?> nil .toUpperCase (.substring 1)) returns nil 
</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/core.clj#30 Source] [http://www.google.com/codesearch?hl=en&lr=&q=-?>+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===.?.===
====macro====
<pre>
Usage: *(_.?._ x form)
       (_.?._ x form & forms)*
</pre>
<pre> Same as clojure.core/.. but returns nil as soon as the threaded value is nil itself (thus short-circuiting any pending computation). 
Examples : 
(.?. "foo" .toUpperCase (.substring 1)) returns "OO" 
(.?. nil .toUpperCase (.substring 1)) returns nil 
</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/core.clj#38 Source] [http://www.google.com/codesearch?hl=en&lr=&q=.?.+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===dissoc-in===
====function====
<pre>
Usage: *(_dissoc-in_ m `[`k & ks :as keys`]`)*
</pre>
<pre> Dissociates an entry from a nested associative structure returning a new 
nested structure. keys is a sequence of keys. Any empty maps that result 
will not be present in the new structure.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/core.clj#49 Source] [http://www.google.com/codesearch?hl=en&lr=&q=dissoc-in+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===new-by-name===
====function====
<pre>
Usage: *(_new-by-name_ class-name & args)*
</pre>
<pre> Constructs a Java object whose class is specified by a String.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/core.clj#63 Source] [http://www.google.com/codesearch?hl=en&lr=&q=new-by-name+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===seqable?===
====function====
<pre>
Usage: *(_seqable?_ x)*
</pre>
<pre> Returns true if (seq x) will succeed, false otherwise.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/core.clj#70 Source] [http://www.google.com/codesearch?hl=en&lr=&q=seqable?+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
