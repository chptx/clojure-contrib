#summary dataflow API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for dataflow=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.dataflow))
}}}


==Public Variables and Functions==
Shortcuts:
[#add-cell-watcher add-cell-watcher] [#add-cells add-cells] [#build-dataflow build-dataflow] [#build-source-cell build-source-cell] [#build-standard-cell build-standard-cell] [#build-validator-cell build-validator-cell] [#cell cell] [#display-cell display-cell] [#eval-cell eval-cell] [#get-cell get-cell] [#get-cells get-cells] [#get-old-value get-old-value] [#get-source-cells get-source-cells] [#get-value get-value] [#get-value-from-cell get-value-from-cell] [#get-values get-values] [#print-dataflow print-dataflow] [#remove-cells remove-cells] [#source-cell? source-cell?] [#update-values update-values] 

----
===add-cell-watcher===
====function====
<pre>
Usage: *(_add-cell-watcher_ cell key fun)*
</pre>
<pre> Adds a watcher to a cell to respond to changes of value.  The is a
 function of 4 values: a key, the cell, its old value, its new
 value.  This is implemented using Clojure's add-watch to the
 underlying ref, and shared its sematics</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#457 Source] [http://www.google.com/codesearch?hl=en&lr=&q=add-cell-watcher+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===add-cells===
====function====
<pre>
Usage: *(_add-cells_ df cells)*
</pre>
<pre> Given a collection of cells, add them to the dataflow.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#207 Source] [http://www.google.com/codesearch?hl=en&lr=&q=add-cells+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===build-dataflow===
====function====
<pre>
Usage: *(_build-dataflow_ cs)*
</pre>
<pre> Given a collection of cells, build and return a dataflow object</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#185 Source] [http://www.google.com/codesearch?hl=en&lr=&q=build-dataflow+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===build-source-cell===
====function====
<pre>
Usage: *(_build-source-cell_ name init)*
</pre>
<pre> Builds a source cell</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#228 Source] [http://www.google.com/codesearch?hl=en&lr=&q=build-source-cell+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===build-standard-cell===
====function====
<pre>
Usage: *(_build-standard-cell_ name deps fun expr)*
</pre>
<pre> Builds a standard cell</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#289 Source] [http://www.google.com/codesearch?hl=en&lr=&q=build-standard-cell+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===build-validator-cell===
====function====
<pre>
Usage: *(_build-validator-cell_ deps fun expr)*
</pre>
<pre> Builds a validator cell</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#295 Source] [http://www.google.com/codesearch?hl=en&lr=&q=build-validator-cell+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===cell===
====macro====
<pre>
Usage: *(_cell_ type & data)*
</pre>
<pre> Build a standard cell, like this:
 
   (cell fred
     (`*` ?mary ?joe))
 
  Which creates a cell named fred that is the product of a cell mary and cell joe
 
  Or:
 
   (cell joe
    (apply `*` ?`*`sally))
 
  Which creates a cell that applies `*` to the collection of all cells named sally
 
  Or:
 
   (cell :source fred 0)
 
  Which builds a source cell fred with initial value 0
 
  Or:
 
    (cell :validator (when (< ?fred ?sally)
                        (throwf "%s must be greater than %s" ?fred ?sally))
 
  Which will perform the validation</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#301 Source] [http://www.google.com/codesearch?hl=en&lr=&q=cell+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===display-cell===
====multimethod====
_No usage documentation available_
<pre> A 'readable' form of the cell</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#345 Source] [http://www.google.com/codesearch?hl=en&lr=&q=display-cell+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===eval-cell===
====multimethod====
_No usage documentation available_
<pre> Evaluate a dataflow cell.  Return `[`changed, old val`]`</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#369 Source] [http://www.google.com/codesearch?hl=en&lr=&q=eval-cell+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===get-cell===
====function====
<pre>
Usage: *(_get-cell_ df name)*
</pre>
<pre> Get the single cell named by name</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#91 Source] [http://www.google.com/codesearch?hl=en&lr=&q=get-cell+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===get-cells===
====function====
<pre>
Usage: *(_get-cells_ df name)*
</pre>
<pre> Get all the cells named by name</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#86 Source] [http://www.google.com/codesearch?hl=en&lr=&q=get-cells+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===get-old-value===
====function====
<pre>
Usage: *(_get-old-value_ df env name)*
</pre>
<pre> Looks up an old value</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#133 Source] [http://www.google.com/codesearch?hl=en&lr=&q=get-old-value+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===get-source-cells===
====function====
<pre>
Usage: *(_get-source-cells_ df)*
</pre>
<pre> Returns a collection of source cells from the dataflow</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#105 Source] [http://www.google.com/codesearch?hl=en&lr=&q=get-source-cells+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===get-value===
====function====
<pre>
Usage: *(_get-value_ df name)*
</pre>
<pre> Gets a value from the df matching the passed symbol.
 Signals an error if the name is not present, or if it not a single
 value.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#112 Source] [http://www.google.com/codesearch?hl=en&lr=&q=get-value+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===get-value-from-cell===
====function====
<pre>
Usage: *(_get-value-from-cell_ cell)*
</pre>
<pre> Given a cell, get its value</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#140 Source] [http://www.google.com/codesearch?hl=en&lr=&q=get-value-from-cell+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===get-values===
====function====
<pre>
Usage: *(_get-values_ df name)*
</pre>
<pre> Gets a collection of values from the df by name</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#123 Source] [http://www.google.com/codesearch?hl=en&lr=&q=get-values+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===print-dataflow===
====function====
<pre>
Usage: *(_print-dataflow_ df)*
</pre>
<pre> Prints a dataflow, one cell per line</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#196 Source] [http://www.google.com/codesearch?hl=en&lr=&q=print-dataflow+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===remove-cells===
====function====
<pre>
Usage: *(_remove-cells_ df cells)*
</pre>
<pre> Given a collection of cells, remove them from the dataflow.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#215 Source] [http://www.google.com/codesearch?hl=en&lr=&q=remove-cells+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===source-cell?===
====function====
<pre>
Usage: *(_source-cell?_ cell)*
</pre>
<pre> Is this cell a source cell?</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#100 Source] [http://www.google.com/codesearch?hl=en&lr=&q=source-cell?+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===update-values===
====function====
<pre>
Usage: *(_update-values_ df data)*
</pre>
<pre> Given a dataflow, and a map of name-value pairs, update the
 dataflow by binding the new values.  Each name must be of a source
 cell</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/dataflow/clojure/contrib/dataflow.clj#435 Source] [http://www.google.com/codesearch?hl=en&lr=&q=update-values+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
