#summary dataflow API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for dataflow=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.dataflow))
}}}


==Public Variables and Functions==
Shortcuts:
[#(_add-cell-watcher_cell_key_fun) add-cell-watcher] [#(_add-cells_df_cells) add-cells] [#(_build-dataflow_cs) build-dataflow] [#(_build-source-cell_name_init) build-source-cell] [#(_build-standard-cell_name_deps_fun_expr) build-standard-cell] [#(_build-validator-cell_deps_fun_expr) build-validator-cell] [#(_cell_type_&_data) cell] [#display-cell display-cell] [#eval-cell eval-cell] [#(_get-cell_df_name) get-cell] [#(_get-cells_df_name) get-cells] [#(_get-old-value_df_env_name) get-old-value] [#(_get-source-cells_df) get-source-cells] [#(_get-value_df_name) get-value] [#(_get-value-from-cell_cell) get-value-from-cell] [#(_get-values_df_name) get-values] [#(_print-dataflow_df) print-dataflow] [#(_remove-cells_df_cells) remove-cells] [#(_source-cell?_cell) source-cell?] [#(_update-values_df_data) update-values] 

----
===(_add-cell-watcher_ cell key fun)===
<pre> Adds a watcher to a cell to respond to changes of value.  The is a
function of 4 values: a key, the cell, its old value, its new
value.  This is implemented using Clojure's add-watch to the
underlying ref, and shared its sematics</pre>
----
===(_add-cells_ df cells)===
<pre> Given a collection of cells, add them to the dataflow.</pre>
----
===(_build-dataflow_ cs)===
<pre> Given a collection of cells, build and return a dataflow object</pre>
----
===(_build-source-cell_ name init)===
<pre> Builds a source cell</pre>
----
===(_build-standard-cell_ name deps fun expr)===
<pre> Builds a standard cell</pre>
----
===(_build-validator-cell_ deps fun expr)===
<pre> Builds a validator cell</pre>
----
===(_cell_ type & data)===
====Macro====
<pre> Build a standard cell, like this:

  (cell fred
    (`*` ?mary ?joe))

 Which creates a cell named fred that is the product of a cell mary and cell joe

 Or:

  (cell joe
   (apply `*` ?`*`sally))

 Which creates a cell that applies `*` to the collection of all cells named sally

 Or:

  (cell :source fred 0)

 Which builds a source cell fred with initial value 0

 Or:

   (cell :validator (when (< ?fred ?sally)
                       (throwf "%s must be greater than %s" ?fred ?sally))

 Which will perform the validation</pre>
----
===_display-cell_===
<pre> A 'readable' form of the cell</pre>
----
===_eval-cell_===
<pre> Evaluate a dataflow cell.  Return `[`changed, old val`]`</pre>
----
===(_get-cell_ df name)===
<pre> Get the single cell named by name</pre>
----
===(_get-cells_ df name)===
<pre> Get all the cells named by name</pre>
----
===(_get-old-value_ df env name)===
<pre> Looks up an old value</pre>
----
===(_get-source-cells_ df)===
<pre> Returns a collection of source cells from the dataflow</pre>
----
===(_get-value_ df name)===
<pre> Gets a value from the df matching the passed symbol.
Signals an error if the name is not present, or if it not a single
value.</pre>
----
===(_get-value-from-cell_ cell)===
<pre> Given a cell, get its value</pre>
----
===(_get-values_ df name)===
<pre> Gets a collection of values from the df by name</pre>
----
===(_print-dataflow_ df)===
<pre> Prints a dataflow, one cell per line</pre>
----
===(_remove-cells_ df cells)===
<pre> Given a collection of cells, remove them from the dataflow.</pre>
----
===(_source-cell?_ cell)===
<pre> Is this cell a source cell?</pre>
----
===(_update-values_ df data)===
<pre> Given a dataflow, and a map of name-value pairs, update the
dataflow by binding the new values.  Each name must be of a source
cell</pre>
