#summary datalog.literals API Reference

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for datalog.literals=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.datalog.literals))
}}}
==Public Variables and Functions==
----
===_adorned-literal_===
When passed a set of bound columns, returns the adorned literal
----
===(_build-atom_ f type)===
Returns an unevaluated expression (to be used in a macro) of an
atom.
----
===_build-literal_===
(Returns an unevaluated expression (to be used in macros) of a
literal.
----
===(_build-seed-bindings_ s)===
Given a seed literal, already adorned and in magic form, convert
its bound constants to new variables.
----
===(_delta-literal_ l)===
Given a literal l, return a delta version
----
===_display-literal_===
Converts a struct representing a literal to a normal list
----
===(_get-adorned-bindings_ pred)===
Get the bindings from this adorned literal.
----
===(_get-base-predicate_ pred)===
Get the base predicate from this predicate.
----
===_get-cs-from-vs_===
From a set of vars, get the columns
----
===_get-self-bound-cs_===
Get the columns that are bound withing the literal.
----
===_get-vs-from-cs_===
From a set of columns, return the vars
----
===_join-literal_===
Given a database (db), a literal (lit) and a seq of bindings (bs),
return a new seq of bindings by joining this literal.
----
===_literal-appropriate?_===
When passed a set of bound vars, determines if this literal can be
used during this point of a SIP computation.
----
===_literal-columns_===
Return the column names this applies to
----
===(_literal-magic?_ lit)===
Is this literal magic?
----
===_literal-predicate_===
Return the predicate/relation this conditional operates over
----
===_literal-vars_===
Returns the logic vars used by this literal
----
===(_magic-literal_ l)===
Create a magic version of this adorned predicate.
----
===(_negated-literal_ l)===
Given a literal l, return a negated version
----
===(_negated?_ l)===
Is this literal a negated literal?
----
===_negative-vars_===
Returns the logic vars used in a negative position
----
===_positive-vars_===
Returns the logic vars used in a positive position
----
===(_positive?_ l)===
Is this a positive literal?
----
===(_project-literal_ db lit bs)===
===(_project-literal_ db lit bs var?)===
Project a stream of bindings onto a literal/relation. Returns a new
db.
