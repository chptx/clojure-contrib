#summary def API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for def=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.def))
}}}


==Public Variables and Functions==
Shortcuts:
[#(_defalias_name_orig) defalias] [#(_defhinted_sym_init) defhinted] [#(_defmacro-_name_&_decls) defmacro-] [#(_defonce-_name_expr) defonce-] [#(_defstruct-_name_&_decls) defstruct-] [#(_defunbound_name) defunbound] [#(_defunbound-_name_&_decls) defunbound-] [#(_defvar_name) defvar] [#(_defvar-_name_&_decls) defvar-] [#(_name-with-attributes_name_macro-args) name-with-attributes] 

----
===(_defalias_ name orig)===
===(_defalias_ name orig doc)===
====Macro====
<pre>Defines an alias for a var: a new var with the same root binding (if
any) and similar metadata. The metadata of the alias is its initial
metadata (as provided by def) merged into the metadata of the original.</pre>
----
===(_defhinted_ sym init)===
====Macro====
<pre>Defines a var with a type hint matching the class of the given
init.  Be careful about using any form of 'def' or 'binding' to a
value of a different type.  See http://paste.lisp.org/display/73344</pre>
----
===(_defmacro-_ name & decls)===
====Macro====
<pre>Same as defmacro but yields a private definition</pre>
----
===(_defonce-_ name expr)===
===(_defonce-_ name expr doc)===
====Macro====
<pre>Same as defonce but yields a private definition</pre>
----
===(_defstruct-_ name & decls)===
====Macro====
<pre>Same as defstruct but yields a private definition</pre>
----
===(_defunbound_ name)===
===(_defunbound_ name doc)===
====Macro====
<pre>Defines an unbound var with optional doc string</pre>
----
===(_defunbound-_ name & decls)===
====Macro====
<pre>Same as defunbound but yields a private definition</pre>
----
===(_defvar_ name)===
===(_defvar_ name init)===
===(_defvar_ name init doc)===
====Macro====
<pre>Defines a var with an optional intializer and doc string</pre>
----
===(_defvar-_ name & decls)===
====Macro====
<pre>Same as defvar but yields a private definition</pre>
----
===(_name-with-attributes_ name macro-args)===
<pre>To be used in macro definitions.
Handles optional docstrings and attribute maps for a name to be defined
in a list of macro arguments. If the first macro argument is a string,
it is added as a docstring to name and removed from the macro argument
list. If afterwards the first macro argument is a map, its entries are
added to the name's metadata map and the map is removed from the
macro argument list. The return value is a vector containing the name
with its extended metadata map and the list of unprocessed macro
arguments.</pre>
