#summary duck-streams API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for duck-streams=
by Stuart Sierra

Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.duck-streams))
}}}
==Overview==
<pre> This file defines "duck-typed" I/O utility functions for Clojure. 
The 'reader' and 'writer' functions will open and return an 
instance of java.io.BufferedReader and java.io.PrintWriter, 
respectively, for a variety of argument types -- filenames as 
strings, URLs, java.io.File's, etc.  'reader' even works on http 
URLs. 
 
Note: this is not really "duck typing" as implemented in languages 
like Ruby.  A better name would have been "do-what-I-mean-streams" 
or "just-give-me-a-stream", but ducks are funnier.</pre>


==Public Variables and Functions==
Shortcuts:
[#file-str file-str] [#pwd pwd] [#read-lines read-lines] [#reader reader] [#slurp* slurp*] [#spit spit] [#with-in-reader with-in-reader] [#with-out-writer with-out-writer] [#write-lines write-lines] [#writer writer] 

----
===file-str===
====function====
<pre>
Usage: *(_file-str_ & args)*
</pre>
<pre> Concatenates args as strings and returns a java.io.File.  Replaces 
all / and \ with File/separatorChar.  Replaces ~ at the start of 
the path with the user.home system property.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#69 Source] [http://www.google.com/codesearch?hl=en&lr=&q=file-str+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pwd===
====function====
<pre>
Usage: *(_pwd_)*
</pre>
<pre> Returns current working directory as a String.  (Like UNIX 'pwd'.) 
Note: In Java, you cannot change the current working directory.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#215 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pwd+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===read-lines===
====function====
<pre>
Usage: *(_read-lines_ f)*
</pre>
<pre> Like clojure.core/line-seq but opens f with reader.  Automatically 
closes the reader AFTER YOU CONSUME THE ENTIRE SEQUENCE.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#186 Source] [http://www.google.com/codesearch?hl=en&lr=&q=read-lines+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===reader===
====multimethod====
<pre>
Usage: *(_reader_ x)*
</pre>
<pre> Attempts to coerce its argument into an open 
java.io.BufferedReader.  Argument may be an instance of Reader, 
BufferedReader, InputStream, File, URI, URL, or String. 
 
If argument is a String, it tries to resolve it first as a URI, then 
as a local file name.  URIs with a 'file' protocol are converted to 
local file names.  Uses `*`default-encoding`*` as the text encoding. 
 
Should be used inside with-open to ensure the Reader is properly 
closed.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#83 Source] [http://www.google.com/codesearch?hl=en&lr=&q=reader+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===slurp`*`===
====function====
<pre>
Usage: *(_slurp`*`_ f)*
</pre>
<pre> Like clojure.core/slurp but opens f with reader.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#197 Source] [http://www.google.com/codesearch?hl=en&lr=&q=slurp*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===spit===
====function====
<pre>
Usage: *(_spit_ f content)*
</pre>
<pre> Opposite of slurp.  Opens f with writer, writes content, then 
closes f.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#208 Source] [http://www.google.com/codesearch?hl=en&lr=&q=spit+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===with-in-reader===
====macro====
<pre>
Usage: *(_with-in-reader_ f & body)*
</pre>
<pre> Opens a PushbackReader on f, binds it to `*`in`*`, and evaluates body.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#230 Source] [http://www.google.com/codesearch?hl=en&lr=&q=with-in-reader+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===with-out-writer===
====macro====
<pre>
Usage: *(_with-out-writer_ f & body)*
</pre>
<pre> Opens a writer on f, binds it to `*`out`*`, and evalutes body.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#223 Source] [http://www.google.com/codesearch?hl=en&lr=&q=with-out-writer+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===write-lines===
====function====
<pre>
Usage: *(_write-lines_ f lines)*
</pre>
<pre> Writes lines (a seq) to f, separated by newlines.  f is opened with 
writer, and automatically closed at the end of the sequence.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#175 Source] [http://www.google.com/codesearch?hl=en&lr=&q=write-lines+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===writer===
====multimethod====
<pre>
Usage: *(_writer_ x)*
</pre>
<pre> Attempts to coerce its argument into an open java.io.PrintWriter 
wrapped around a java.io.BufferedWriter.  Argument may be an 
instance of Writer, PrintWriter, BufferedWriter, OutputStream, File, 
URI, URL, or String. 
 
If argument is a String, it tries to resolve it first as a URI, then 
as a local file name.  URIs with a 'file' protocol are converted to 
local file names. 
 
Should be used inside with-open to ensure the Writer is properly 
closed.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/duck_streams.clj#125 Source] [http://www.google.com/codesearch?hl=en&lr=&q=writer+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
