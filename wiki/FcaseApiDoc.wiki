#summary fcase API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for fcase=
by Stuart Sierra

Usage: 
{{{
(ns <your-namespace>
  (:require clojure.contrib.fcase))
}}}
==Overview==
<pre> This file defines a generic "case" macro called "fcase" which takes 
the equality-testing function as an argument.  It also defines a 
traditional "case" macro that tests using "`=`" and variants that 
test for regular expressions and class membership. 
 
 
Note (December 23, 2008): This library has been supplanted by the 
inclusion of "condp" in clojure.core as of Clojure SVN rev. 1180.</pre>


==Public Variables and Functions==
Shortcuts:
[#case case] [#fcase fcase] [#in-case in-case] [#instance-case instance-case] [#re-case re-case] 

----
===case===
====macro====
<pre>
Usage: *(_case_ test-value & clauses)*
</pre>
<pre> Like cond, but test-value is compared against the value of each 
test expression with `=`.  If they are equal, executes the "body" 
expression.  Optional last expression is executed if none of the 
test expressions match.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/fcase.clj#77 Source] [http://www.google.com/codesearch?hl=en&lr=&q=case+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===fcase===
====macro====
<pre>
Usage: *(_fcase_ compare-fn case-value & test-expr-clauses)*
</pre>
<pre> Generic switch/case macro.  'fcase' is short for 'function case'. 
 
The 'compare-fn' is a fn of two arguments. 
 
The 'test-expr-clauses' are value-expression pairs without 
surrounding parentheses, like in Clojure's 'cond'. 
 
The 'case-value' is evaluated once and cached.  Then, 'compare-fn' 
is called once for each clause, with the clause's test value as its 
first argument and 'case-value' as its second argument.  If 
'compare-fn' returns logical true, the clause's expression is 
evaluated and returned.  If 'compare-fn' returns false/nil, we go to 
the next test value. 
 
If 'test-expr-clauses' contains an odd number of items, the last 
item is the default expression evaluated if no case-value matches. 
If there is no default expression and no case-value matches, fcase 
returns nil. 
 
See specific forms of this macro in 'case' and 're-case'. 
 
The test expressions in 'fcase' are always evaluated linearly, in 
order.  For a large number of case expressions it may be more 
efficient to use a hash lookup.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/fcase.clj#38 Source] [http://www.google.com/codesearch?hl=en&lr=&q=fcase+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===in-case===
====macro====
<pre>
Usage: *(_in-case_ test-value & clauses)*
</pre>
<pre> Like case, but test expressions are sequences.  The test expression 
is true if any item in the sequence is equal (tested with '`=`') to 
the test value.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/fcase.clj#101 Source] [http://www.google.com/codesearch?hl=en&lr=&q=in-case+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===instance-case===
====macro====
<pre>
Usage: *(_instance-case_ test-value & clauses)*
</pre>
<pre> Like case, but the test expressions are Java class names, tested with 
'instance?'.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/fcase.clj#91 Source] [http://www.google.com/codesearch?hl=en&lr=&q=instance-case+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===re-case===
====macro====
<pre>
Usage: *(_re-case_ test-value & clauses)*
</pre>
<pre> Like case, but the test expressions are regular expressions, tested 
with re-find.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/fcase.clj#85 Source] [http://www.google.com/codesearch?hl=en&lr=&q=re-case+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
