#summary generic API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for generic=
<br>by Konrad Hinsen

Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.generic))
}}}
==Overview==
<pre>Generic interface support code 
NOTE: This library is VERY experimental. It WILL change 
      significantly with future release.</pre>


==Public Variables and Functions==
Variables and Functions in generic.collection:
[GenericApiDoc#assoc assoc] [GenericApiDoc#dissoc dissoc] [GenericApiDoc#empty empty] [GenericApiDoc#get get] [GenericApiDoc#into into] [GenericApiDoc#seq seq] 

Variables and Functions in generic.functor:
[GenericApiDoc#fmap fmap] 

Variables and Functions in generic.math-functions:
[GenericApiDoc#approx= approx=] 

==Namespace clojure.contrib.generic.arithmetic==
<pre>Generic arithmetic interface 
This library defines generic versions of + - `*` / as multimethods 
that can be defined for any type. The minimal required  
implementations for a type are binary + and `*` plus unary - and /. 
Everything else is derived from these automatically. Explicit 
binary definitions for - and / can be provided for 
efficiency reasons.</pre>
==Namespace clojure.contrib.generic.collection==
<pre>Generic arithmetic interface 
This library defines generic versions of common 
collection-related functions as multimethods that can be 
defined for any type.</pre>
----
===assoc===
====multimethod====
<pre>
Usage: *(_assoc_ coll & key-val-pairs)*
</pre>
<pre>Returns a new collection in which the values corresponding to the 
given keys are updated by the given values. Each type of collection 
can have specific restrictions on the possible keys.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection/clojure/contrib/generic/collection.clj#26 Source] [http://www.google.com/codesearch?hl=en&lr=&q=assoc+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===dissoc===
====multimethod====
<pre>
Usage: *(_dissoc_ coll & keys)*
</pre>
<pre>Returns a new collection in which the entries corresponding to the 
given keys are removed. Each type of collection can have specific 
restrictions on the possible keys.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection/clojure/contrib/generic/collection.clj#51 Source] [http://www.google.com/codesearch?hl=en&lr=&q=dissoc+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===empty===
====multimethod====
<pre>
Usage: *(_empty_ coll)*
</pre>
<pre>Returns an empty collection of the same kind as the argument</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection/clojure/contrib/generic/collection.clj#65 Source] [http://www.google.com/codesearch?hl=en&lr=&q=empty+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===get===
====multimethod====
<pre>
Usage: *(_get_ coll key)
       (_get_ coll key not-found)*
</pre>
<pre>Returns the element of coll referred to by key. Each type of collection 
can have specific restrictions on the possible keys.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection/clojure/contrib/generic/collection.clj#77 Source] [http://www.google.com/codesearch?hl=en&lr=&q=get+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===into===
====multimethod====
<pre>
Usage: *(_into_ to from)*
</pre>
<pre>Returns a new coll consisting of to-coll with all of the items of 
from-coll conjoined.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection/clojure/contrib/generic/collection.clj#92 Source] [http://www.google.com/codesearch?hl=en&lr=&q=into+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===seq===
====multimethod====
<pre>
Usage: *(_seq_ s)*
</pre>
<pre>Returns a seq on the object s.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/collection/clojure/contrib/generic/collection.clj#106 Source] [http://www.google.com/codesearch?hl=en&lr=&q=seq+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
==Namespace clojure.contrib.generic.comparison==
<pre>Generic comparison interface 
This library defines generic versions of = < > <= >= zero? 
as multimethods that can be defined for any type. Of the 
greater/less-than relations, types must minimally implement >.</pre>
==Namespace clojure.contrib.generic.functor==
<pre>Generic functor interface (fmap)</pre>
----
===fmap===
====multimethod====
<pre>
Usage: *(_fmap_ f s)*
</pre>
<pre>Applies function f to each item in the data structure s and returns 
a structure of the same kind.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/functor/clojure/contrib/generic/functor.clj#20 Source] [http://www.google.com/codesearch?hl=en&lr=&q=fmap+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
==Namespace clojure.contrib.generic.math-functions==
<pre>Generic math function interface 
This library defines generic versions of common mathematical 
functions such as sqrt or sin as multimethods that can be 
defined for any type.</pre>
----
===approx====
====function====
<pre>
Usage: *(_approx=_ x y eps)*
</pre>
<pre>Return true if the absolute value of the difference between x and y 
is less than eps</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/generic/math_functions/clojure/contrib/generic/math_functions.clj#94 Source] [http://www.google.com/codesearch?hl=en&lr=&q=approx=+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
