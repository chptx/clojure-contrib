#summary generic API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for generic=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.generic))
}}}


==Public Variables and Functions==
Variables and Functions in generic.collection:
[GenericApiDoc#(_assoc_coll_&_key-val-pairs) assoc] [GenericApiDoc#(_dissoc_coll_&_keys) dissoc] [GenericApiDoc#(_empty_coll) empty] [GenericApiDoc#(_get_coll_key) get] [GenericApiDoc#(_into_to_from) into] [GenericApiDoc#(_seq_s) seq] 

Variables and Functions in generic.functor:
[GenericApiDoc#(_fmap_f_s) fmap] 

Variables and Functions in generic.math-functions:
[GenericApiDoc#(_approx=_x_y_eps) approx=] 

==Namespace clojure.contrib.generic.collection==
----
===(`_`assoc`_` coll & key-val-pairs)===
<pre> Returns a new collection in which the values corresponding to the
given keys are updated by the given values. Each type of collection
can have specific restrictions on the possible keys.</pre>
----
===(`_`dissoc`_` coll & keys)===
<pre> Returns a new collection in which the entries corresponding to the
given keys are removed. Each type of collection can have specific
restrictions on the possible keys.</pre>
----
===(`_`empty`_` coll)===
<pre> Returns an empty collection of the same kind as the argument</pre>
----
===(`_`get`_` coll key)===
===(`_`get`_` coll key not-found)===
<pre> Returns the element of coll referred to by key. Each type of collection
can have specific restrictions on the possible keys.</pre>
----
===(`_`into`_` to from)===
<pre> Returns a new coll consisting of to-coll with all of the items of
from-coll conjoined.</pre>
----
===(`_`seq`_` s)===
<pre> Returns a seq on the object s.</pre>
==Namespace clojure.contrib.generic.functor==
----
===(`_`fmap`_` f s)===
<pre> Applies function f to each item in the data structure s and returns
a structure of the same kind.</pre>
==Namespace clojure.contrib.generic.math-functions==
----
===(`_`approx=`_` x y eps)===
<pre> Return true if the absolute value of the difference between x and y
is less than eps</pre>
