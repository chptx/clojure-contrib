#summary monads API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for monads=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.monads))
}}}


==Public Variables and Functions==
Shortcuts:
[#call-cc call-cc] [#cont-m cont-m] [#defmonad defmonad] [#defmonadfn defmonadfn] [#domonad domonad] [#identity-m identity-m] [#m-chain m-chain] [#m-fmap m-fmap] [#m-join m-join] [#m-lift m-lift] [#m-map m-map] [#m-reduce m-reduce] [#m-seq m-seq] [#m-when m-when] [#m-when-not m-when-not] [#maybe-m maybe-m] [#maybe-t maybe-t] [#monad monad] [#monad-transformer monad-transformer] [#run-cont run-cont] [#sequence-m sequence-m] [#sequence-t sequence-t] [#set-m set-m] [#state-m state-m] [#state-t state-t] [#with-monad with-monad] [#writer-m writer-m] 

----
===call-cc===
====function====
<pre>
Usage: *(_call-cc_ f)*
</pre>
<pre> A computation in the cont monad that calls function f with a single 
argument representing the current continuation. The function f should 
return a continuation (which becomes the return value of call-cc), 
or call the passed-in current continuation to terminate.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#406 Source] [http://www.google.com/codesearch?hl=en&lr=&q=call-cc+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===cont-m===
====var====
<pre> Monad describing computations in continuation-passing style. The monadic 
values are functions that are called with a single argument representing 
the continuation of the computation, to which they pass their result.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#390 Source] [http://www.google.com/codesearch?hl=en&lr=&q=cont-m+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===defmonad===
====macro====
<pre>
Usage: *(_defmonad_ name doc-string operations)
       (_defmonad_ name operations)*
</pre>
<pre> Define a named monad by defining the monad operations. The definitions 
are written like bindings to the monad operations m-bind and 
m-result (required) and m-zero and m-plus (optional).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#48 Source] [http://www.google.com/codesearch?hl=en&lr=&q=defmonad+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===defmonadfn===
====macro====
<pre>
Usage: *(_defmonadfn_ name docstring? attr-map? args expr)
       (_defmonadfn_ name docstring? attr-map? (args expr) ...)*
</pre>
<pre> Like defn, but for functions that use monad operations and are used inside 
a with-monad block.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#133 Source] [http://www.google.com/codesearch?hl=en&lr=&q=defmonadfn+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===domonad===
====macro====
<pre>
Usage: *(_domonad_ steps expr)
       (_domonad_ name steps expr)*
</pre>
<pre> Monad comprehension. Takes the name of a monad, a vector of steps 
given as binding-form/monadic-expression pairs, and a result value 
specified by expr. The monadic-expression terms can use the binding 
variables of the previous steps. 
If the monad contains a definition of m-zero, the step list can also 
contain conditions of the form :when p, where the predicate p can 
contain the binding variables from all previous steps. 
A clause of the form :let `[`binding-form expr ...`]`, where the bindings 
are given as a vector as for the use in let, establishes additional 
bindings that can be used in the following steps.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#110 Source] [http://www.google.com/codesearch?hl=en&lr=&q=domonad+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===identity-m===
====var====
<pre> Monad describing plain computations. This monad does in fact nothing 
at all. It is useful for testing, for combination with monad 
transformers, and for code that is parameterized with a monad.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#265 Source] [http://www.google.com/codesearch?hl=en&lr=&q=identity-m+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===m-chain===
====macro====
<pre>
Usage: *(_m-chain_ steps)*
</pre>
<pre> Chains together monadic computation steps that are each functions 
of one parameter. Each step is called with the result of the previous 
step as its argument. (m-chain (step1 step2)) is equivalent to 
(fn `[`x`]` (domonad `[`r1 (step1 x) r2 (step2 r1)`]` r2)).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#208 Source] [http://www.google.com/codesearch?hl=en&lr=&q=m-chain+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===m-fmap===
====macro====
<pre>
Usage: *(_m-fmap_ f m)*
</pre>
<pre> Bind the monadic value m to the function returning (f x) for argument x</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#186 Source] [http://www.google.com/codesearch?hl=en&lr=&q=m-fmap+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===m-join===
====macro====
<pre>
Usage: *(_m-join_ m)*
</pre>
<pre> Converts a monadic value containing a monadic value into a 'simple' 
monadic value.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#180 Source] [http://www.google.com/codesearch?hl=en&lr=&q=m-join+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===m-lift===
====macro====
<pre>
Usage: *(_m-lift_ n f)*
</pre>
<pre> Converts a function f of n arguments into a function of n 
monadic arguments returning a monadic value.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#171 Source] [http://www.google.com/codesearch?hl=en&lr=&q=m-lift+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===m-map===
====macro====
<pre>
Usage: *(_m-map_ f xs)*
</pre>
<pre> 'Executes' the sequence of monadic values resulting from mapping 
f onto the values xs. f must return a monadic value.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#202 Source] [http://www.google.com/codesearch?hl=en&lr=&q=m-map+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===m-reduce===
====macro====
<pre>
Usage: *(_m-reduce_ f mvs)
       (_m-reduce_ f val mvs)*
</pre>
<pre> Return the reduction of (m-lift 2 f) over the list of monadic values mvs 
with initial value (m-result val).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#219 Source] [http://www.google.com/codesearch?hl=en&lr=&q=m-reduce+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===m-seq===
====macro====
<pre>
Usage: *(_m-seq_ ms)*
</pre>
<pre> 'Executes' the monadic values in ms and returns a sequence of the 
basic values contained in them.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#191 Source] [http://www.google.com/codesearch?hl=en&lr=&q=m-seq+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===m-when===
====macro====
<pre>
Usage: *(_m-when_ test m-expr)*
</pre>
<pre> If test if logical true, return monadic value m-expr, else return 
(m-result nil).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#232 Source] [http://www.google.com/codesearch?hl=en&lr=&q=m-when+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===m-when-not===
====macro====
<pre>
Usage: *(_m-when-not_ test m-expr)*
</pre>
<pre> If test if logical false, return monadic value m-expr, else return 
(m-result nil).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#238 Source] [http://www.google.com/codesearch?hl=en&lr=&q=m-when-not+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===maybe-m===
====var====
<pre> Monad describing computations with possible failures. Failure is 
represented by nil, any other value is considered valid. As soon as 
a step returns nil, the whole computation will yield nil as well.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#275 Source] [http://www.google.com/codesearch?hl=en&lr=&q=maybe-m+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===maybe-t===
====function====
<pre>
Usage: *(_maybe-t_ m)
       (_maybe-t_ m nothing)
       (_maybe-t_ m nothing which-m-plus)*
</pre>
<pre> Monad transformer that transforms a monad m into a monad in which 
the base values can be invalid (represented by nothing, which defaults 
to nil). The third argument chooses if m-zero and m-plus are inherited 
from the base monad (use :m-plus-from-base) or adopt maybe-like 
behaviour (use :m-plus-from-transformer). The default is :m-plus-from-base 
if the base monad m has a definition for m-plus, and 
:m-plus-from-transformer otherwise.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#446 Source] [http://www.google.com/codesearch?hl=en&lr=&q=maybe-t+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===monad===
====macro====
<pre>
Usage: *(_monad_ operations)*
</pre>
<pre> Define a monad by defining the monad operations. The definitions 
are written like bindings to the monad operations m-bind and 
m-result (required) and m-zero and m-plus (optional).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#33 Source] [http://www.google.com/codesearch?hl=en&lr=&q=monad+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===monad-transformer===
====macro====
<pre>
Usage: *(_monad-transformer_ base which-m-plus operations)*
</pre>
<pre> Define a monad transforer in terms of the monad operations and the base 
monad. The argument which-m-plus chooses if m-zero and m-plus are taken 
from the base monad or from the transformer.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#424 Source] [http://www.google.com/codesearch?hl=en&lr=&q=monad-transformer+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===run-cont===
====function====
<pre>
Usage: *(_run-cont_ c)*
</pre>
<pre> Execute the computation c in the cont monad and return its result.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#401 Source] [http://www.google.com/codesearch?hl=en&lr=&q=run-cont+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===sequence-m===
====var====
<pre> Monad describing multi-valued computations, i.e. computations 
that can yield multiple values. Any object implementing the seq 
protocol can be used as a monadic value.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#288 Source] [http://www.google.com/codesearch?hl=en&lr=&q=sequence-m+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===sequence-t===
====function====
<pre>
Usage: *(_sequence-t_ m)
       (_sequence-t_ m which-m-plus)*
</pre>
<pre> Monad transformer that transforms a monad m into a monad in which 
the base values are sequences. The argument which-m-plus chooses 
if m-zero and m-plus are inherited from the base monad 
(use :m-plus-from-base) or adopt sequence-like 
behaviour (use :m-plus-from-transformer). The default is :m-plus-from-base 
if the base monad m has a definition for m-plus, and 
:m-plus-from-transformer otherwise.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#478 Source] [http://www.google.com/codesearch?hl=en&lr=&q=sequence-t+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===set-m===
====var====
<pre> Monad describing multi-valued computations, like sequence-m, 
but returning sets of results instead of sequences of results.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#302 Source] [http://www.google.com/codesearch?hl=en&lr=&q=set-m+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===state-m===
====var====
<pre> Monad describing stateful computations. The monadic values have the 
structure (fn `[`old-state`]` (list result new-state)).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#315 Source] [http://www.google.com/codesearch?hl=en&lr=&q=state-m+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===state-t===
====function====
<pre>
Usage: *(_state-t_ m)*
</pre>
<pre> Monad transformer that transforms a monad m into a monad of stateful 
computations that have the base monad type as their result.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#505 Source] [http://www.google.com/codesearch?hl=en&lr=&q=state-t+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===with-monad===
====macro====
<pre>
Usage: *(_with-monad_ name & exprs)*
</pre>
<pre> Evaluates an expression after replacing the keywords defining the 
monad operations by the functions associated with these keywords 
in the monad definition given by name.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#99 Source] [http://www.google.com/codesearch?hl=en&lr=&q=with-monad+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===writer-m===
====function====
<pre>
Usage: *(_writer-m_ empty-accumulator)*
</pre>
<pre> Monad describing computations that accumulate data on the side, e.g. for 
logging. The monadic values have the structure `[`value log`]`. Any of the 
accumulators from clojure.contrib.accumulators can be used for storing the 
log data. Its empty value is passed as a parameter.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/monads/clojure/contrib/monads.clj#363 Source] [http://www.google.com/codesearch?hl=en&lr=&q=writer-m+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
==Namespace clojure.contrib.monads.examples==
<pre> Examples for using monads</pre>
