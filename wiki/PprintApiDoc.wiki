#summary pprint API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for pprint=
by Tom Faulhaber

Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.pprint))
}}}
==Overview==
<pre> This module comprises two elements: 
1) A pretty printer for Clojure data structures, implemented in the function "pprint" 
2) A Common Lisp compatible format function, implemented as "cl-format" because 
   Clojure is using the name "format" for its own format. 
 
The most complete documentation can be found at http://github.com/tomfaulhaber/cl-format 
where the markdown README is currently displayed. I will be moving it into the 
clojure.contrib wiki RSN.</pre>


==Public Variables and Functions==
Shortcuts:
[#_*code-dispatch_* *code-dispatch*] [#_*print-circle_* *print-circle*] [#_*print-lines_* *print-lines*] [#_*print-miser-width_* *print-miser-width*] [#_*print-pprint-dispatch_* *print-pprint-dispatch*] [#_*print-pretty_* *print-pretty*] [#_*print-right-margin_* *print-right-margin*] [#_*print-shared_* *print-shared*] [#_*print-suppress-namespaces_* *print-suppress-namespaces*] [#_*simple-dispatch_* *simple-dispatch*] [#cl-format cl-format] [#compile-format compile-format] [#formatter formatter] [#formatter-out formatter-out] [#fresh-line fresh-line] [#pp pp] [#pprint pprint] [#pprint-indent pprint-indent] [#pprint-logical-block pprint-logical-block] [#pprint-newline pprint-newline] [#pprint-tab pprint-tab] [#set-pprint-dispatch set-pprint-dispatch] [#use-method use-method] [#with-pprint-dispatch with-pprint-dispatch] [#write write] [#write-out write-out] 

----
===`*`code-dispatch`*`===
====multimethod====
<pre>
Usage: *(_`*`code-dispatch`*`_ object)*
</pre>
<pre> The pretty print dispatch function for pretty printing Clojure code.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/dispatch.clj#317 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*code-dispatch*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-circle`*`===
====var====
<pre> Mark circular structures (N.B. This is not yet used)</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#54 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-circle*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-lines`*`===
====var====
<pre> Maximum number of lines to print in a pretty print instance (N.B. This is not yet used)</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#49 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-lines*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-miser-width`*`===
====var====
<pre> The column at which to enter miser style. Depending on the dispatch table,  
miser style add newlines in more places to try to keep lines short allowing for further  
levels of nesting.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#42 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-miser-width*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-pprint-dispatch`*`===
====var====
<pre> The pretty print dispatch function. Use with-pprint-dispatch or set-pprint-dispatch 
to modify.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#33 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-pprint-dispatch*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-pretty`*`===
====var====
<pre> Bind to true if you want write to use pretty printing</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#29 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-pretty*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-right-margin`*`===
====var====
<pre> Pretty printing will try to avoid anything going beyond this column.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#38 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-right-margin*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-shared`*`===
====var====
<pre> Mark repeated structures rather than repeat them (N.B. This is not yet used)</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#59 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-shared*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-suppress-namespaces`*`===
====var====
<pre> Don't print namespaces with symbols. This is particularly useful when  
pretty printing the results of macro expansions</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#63 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-suppress-namespaces*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`simple-dispatch`*`===
====multimethod====
<pre>
Usage: *(_`*`simple-dispatch`*`_ object)*
</pre>
<pre> The pretty print dispatch function for simple data structure format.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/dispatch.clj#88 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*simple-dispatch*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===cl-format===
====function====
<pre>
Usage: *(_cl-format_ writer format-in & args)*
</pre>
<pre> An implementation of a Common Lisp compatible format function. cl-format formats its 
arguments to an output stream or string based on the format control string given. It  
supports sophisticated formatting of structured data. 
 
Writer is an instance of java.io.Writer, true to output to `*`out`*` or nil to output  
to a string, format-in is the format control string and the remaining arguments  
are the data to be formatted. 
 
The format control string is a string to be output with embedded 'format directives'  
describing how to format the various arguments passed in. 
 
If writer is nil, cl-format returns the formatted result string. Otherwise, cl-format  
returns nil. 
 
For example: 
 (let `[`results `[`46 38 22`]``]` 
        (cl-format true "There ~`[`are~;is~:;are~`]`~:`*` ~d result~:p: ~{~d~^, ~}~%"  
                   (count results) results)) 
 
Prints to `*`out`*`: 
 There are 3 results: 46, 38, 22 
 
Detailed documentation on format control strings is available in the "Common Lisp the  
Language, 2nd edition", Chapter 22 (available online at: 
http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000)  
and in the Common Lisp HyperSpec at  
http://www.lispworks.com/documentation/HyperSpec/Body/22`_`c.htm</pre>

See also: [http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000 Common Lisp the Language], [http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm Common Lisp HyperSpec]

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/cl-format.clj#26 Source] [http://www.google.com/codesearch?hl=en&lr=&q=cl-format+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===compile-format===
====function====
<pre>
Usage: *(_compile-format_ format-str)*
</pre>
<pre> Compiles format-str into a compiled format which can be used as an argument 
to cl-format just like a plain format string. Use this function for improved  
performance when you're using the same format string repeatedly</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/cl-format.clj#1724 Source] [http://www.google.com/codesearch?hl=en&lr=&q=compile-format+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===formatter===
====macro====
<pre>
Usage: *(_formatter_ format-in)*
</pre>
<pre> Makes a function which can directly run format-in. The function is 
fn `[`stream & args`]` ... and returns nil unless the stream is nil (meaning  
output to a string) in which case it returns the resulting string. 
 
format-in can be either a control string or a previously compiled format.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/cl-format.clj#1792 Source] [http://www.google.com/codesearch?hl=en&lr=&q=formatter+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===formatter-out===
====macro====
<pre>
Usage: *(_formatter-out_ format-in)*
</pre>
<pre> Makes a function which can directly run format-in. The function is 
fn `[`& args`]` ... and returns nil. This version of the formatter macro is 
designed to be used with `*`out`*` set to an appropriate Writer. In particular, 
this is meant to be used as part of a pretty printer dispatch method. 
 
format-in can be either a control string or a previously compiled format.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/cl-format.clj#1806 Source] [http://www.google.com/codesearch?hl=en&lr=&q=formatter-out+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===fresh-line===
====function====
<pre>
Usage: *(_fresh-line_)*
</pre>
<pre> Make a newline if the Writer is not already at the beginning of the line. 
N.B. Only works on ColumnWriters right now.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/cl-format.clj#1128 Source] [http://www.google.com/codesearch?hl=en&lr=&q=fresh-line+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pp===
====macro====
<pre>
Usage: *(_pp_)*
</pre>
<pre> A convenience macro that pretty prints the last thing output. This is 
exactly equivalent to (pprint `*`1).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#209 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pp+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pprint===
====function====
<pre>
Usage: *(_pprint_ object)
       (_pprint_ object writer)*
</pre>
<pre> Pretty print object to the optional output writer. If the writer is not provided,  
print the object to the currently bound value of `*`out`*`.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#198 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pprint+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pprint-indent===
====function====
<pre>
Usage: *(_pprint-indent_ relative-to n)*
</pre>
<pre> Create an indent at this point in the pretty printing stream. This defines how  
following lines are indented. relative-to can be either :block or :current depending  
whether the indent should be computed relative to the start of the logical block or 
the current column position. n is an offset.  
 
Output is sent to `*`out`*` which must be a pretty printing writer.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#278 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pprint-indent+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pprint-logical-block===
====macro====
<pre>
Usage: *(_pprint-logical-block_ options`*` body)*
</pre>
<pre> Execute the body as a pretty printing logical block with output to `*`out`*` which  
must be a pretty printing writer. When used from pprint or cl-format, this can be  
assumed.  
 
Before the body, the caller can optionally specify options: :prefix, :per-line-prefix,  
and :suffix.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#249 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pprint-logical-block+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pprint-newline===
====function====
<pre>
Usage: *(_pprint-newline_ kind)*
</pre>
<pre> Print a conditional newline to a pretty printing stream. kind specifies if the  
newline is :linear, :miser, :fill, or :mandatory.  
 
Output is sent to `*`out`*` which must be a pretty printing writer.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#269 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pprint-newline+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pprint-tab===
====function====
<pre>
Usage: *(_pprint-tab_ kind colnum colinc)*
</pre>
<pre> Tab at this point in the pretty printing stream. kind specifies whether the tab 
is :line, :section, :line-relative, or :section-relative.  
 
Colnum and colinc specify the target column and the increment to move the target 
forward if the output is already past the original target. 
 
Output is sent to `*`out`*` which must be a pretty printing writer. 
 
THIS FUNCTION IS NOT YET IMPLEMENTED.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#290 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pprint-tab+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===set-pprint-dispatch===
====function====
<pre>
Usage: *(_set-pprint-dispatch_ function)*
</pre>
<pre> Set the pretty print dispatch function to a function matching (fn `[`obj`]` ...) 
where obj is the object to pretty print. That function will be called with `*`out`*` set 
to a pretty printing writer to which it should do its printing. 
 
For example functions, see `*`simple-dispatch`*` and `*`code-dispatch`*` in  
clojure.contrib.pprint.dispatch.clj.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#214 Source] [http://www.google.com/codesearch?hl=en&lr=&q=set-pprint-dispatch+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===use-method===
====function====
<pre>
Usage: *(_use-method_ multifn dispatch-val func)*
</pre>
<pre> Installs a function as a new method of multimethod associated with dispatch-value. </pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/dispatch.clj#19 Source] [http://www.google.com/codesearch?hl=en&lr=&q=use-method+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===with-pprint-dispatch===
====macro====
<pre>
Usage: *(_with-pprint-dispatch_ function & body)*
</pre>
<pre> Execute body with the pretty print dispatch function bound to function.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#225 Source] [http://www.google.com/codesearch?hl=en&lr=&q=with-pprint-dispatch+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===write===
====function====
<pre>
Usage: *(_write_ object & kw-args)*
</pre>
<pre> Write an object subject to the current bindings of the printer control variables. 
Use the kw-args argument to override individual variables for this call (and any  
recursive calls). Returns the string result if :stream is nil or nil otherwise. 
 
The following keyword arguments can be passed with values: 
  Keyword              Meaning                              Default value 
  :stream              Writer for output or nil             true (indicates `*`out`*`) 
  :circle`*`             If true, mark circular structures    Current value of `*`print-circle`*` 
  :length              Maximum elements to show in sublists Current value of `*`print-length`*` 
  :level               Maximum depth                        Current value of `*`print-level`*` 
  :lines`*`              Maximum lines of output              Current value of `*`print-lines`*` 
  :miser-width         Width to enter miser mode            Current value of `*`print-miser-width`*` 
  :dispatch            The pretty print dispatch function   Current value of `*`print-pprint-dispatch`*` 
  :pretty              If true, do pretty printing          Current value of `*`print-pretty`*` 
  :readably`*`           If true, print readably              Current value of `*`print-readably`*` 
  :right-margin        The column for the right margin      Current value of `*`print-right-margin`*` 
  :suppress-namespaces If true, no namespaces in symbols    Current value of `*`print-suppress-namespaces`*` 
 
  `*` `=` not yet supported</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#158 Source] [http://www.google.com/codesearch?hl=en&lr=&q=write+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===write-out===
====function====
<pre>
Usage: *(_write-out_ object)*
</pre>
<pre> Write an object to `*`out`*` subject to the current bindings of the printer control  
variables. Use the kw-args argument to override individual variables for this call (and  
any recursive calls). 
 
`*`out`*` must be a PrettyWriter if pretty printing is enabled. This is the responsibility 
of the caller. 
 
This method is primarily intended for use by pretty print dispatch functions that  
already know that the pretty printer will have set up their environment appropriately. 
Normal library clients should use the standard "write" interface. </pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#133 Source] [http://www.google.com/codesearch?hl=en&lr=&q=write-out+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
