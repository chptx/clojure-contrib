#summary pprint API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for pprint=
<br>by Tom Faulhaber

Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.pprint))
}}}
==Overview==
This module comprises two elements:
 # A pretty printer for Clojure data structures, implemented in the function "pprint"
 # A Common Lisp compatible format function, implemented as "cl-format" because Clojure is using the name "format" for its own format.

The most complete documentation can be found at http://github.com/tomfaulhaber/cl-format
where the markdown README is currently displayed. I will be moving it into the 
clojure.contrib wiki RSN.



==Public Variables and Functions==
Shortcuts:
[#*print-circle* *print-circle*] [#*print-lines* *print-lines*] [#*print-miser-width* *print-miser-width*] [#*print-pprint-dispatch* *print-pprint-dispatch*] [#*print-pretty* *print-pretty*] [#*print-right-margin* *print-right-margin*] [#*print-shared* *print-shared*] [#*print-suppress-namespaces* *print-suppress-namespaces*] [#cl-format cl-format] [#compile-format compile-format] [#formatter formatter] [#pp pp] [#pprint pprint] [#pprint-indent pprint-indent] [#pprint-logical-block pprint-logical-block] [#pprint-newline pprint-newline] [#pprint-tab pprint-tab] [#set-pprint-dispatch set-pprint-dispatch] [#with-pprint-dispatch with-pprint-dispatch] [#write write] 

----
===`*`print-circle`*`===
====var====
<pre> Mark circular structures (N.B. This is not yet used)</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#54 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-circle*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-lines`*`===
====var====
<pre> Maximum number of lines to print in a pretty print instance (N.B. This is not yet used)</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#49 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-lines*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-miser-width`*`===
====var====
<pre> The column at which to enter miser style. Depending on the dispatch table, 
miser style add newlines in more places to try to keep lines short allowing for further 
levels of nesting.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#42 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-miser-width*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-pprint-dispatch`*`===
====var====
<pre> The pretty print dispatch table</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#34 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-pprint-dispatch*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-pretty`*`===
====var====
<pre> Bind to true if you want write to use pretty printing</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#29 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-pretty*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-right-margin`*`===
====var====
<pre> Pretty printing will try to avoid anything going beyond this column.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#38 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-right-margin*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-shared`*`===
====var====
<pre> Mark repeated structures rather than repeat them (N.B. This is not yet used)</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#59 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-shared*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`print-suppress-namespaces`*`===
====var====
<pre> Don't print namespaces with symbols. This is particularly useful when 
pretty printing the results of macro expansions</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#63 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*print-suppress-namespaces*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===cl-format===
====function====
<pre>
Usage: *(_cl-format_ stream format-in & args)*
</pre>
<pre> An implementation of a Common Lisp compatible format function</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/cl-format.clj#26 Source] [http://www.google.com/codesearch?hl=en&lr=&q=cl-format+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===compile-format===
====function====
<pre>
Usage: *(_compile-format_ format-str)*
</pre>
<pre> Compiles format-str into a compiled format which can be used as an argument
to cl-format just like a plain format string. Use this function for improved 
performance when you're using the same format string repeatedly</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/cl-format.clj#1671 Source] [http://www.google.com/codesearch?hl=en&lr=&q=compile-format+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===formatter===
====macro====
<pre>
Usage: *(_formatter_ format-in)*
</pre>
<pre> Makes a function which can directly run format-in. The function is
fn `[`stream & args`]` ... and returns nil unless the stream is nil (meaning 
output to a string) in which case it returns the resulting string.

 format-in can be either a control string or a previously compiled format.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/cl-format.clj#1733 Source] [http://www.google.com/codesearch?hl=en&lr=&q=formatter+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pp===
====macro====
<pre>
Usage: *(_pp_)*
</pre>
<pre> A convenience macro that pretty prints the last thing output. This is
exactly equivalent to (pprint `*`1).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#176 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pp+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pprint===
====function====
<pre>
Usage: *(_pprint_ object & more)*
</pre>
<pre> Pretty print object to the optional output writer. If the writer is not provided, 
print the object to the currently bound value of `*`out`*`.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#164 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pprint+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pprint-indent===
====function====
<pre>
Usage: *(_pprint-indent_ relative-to n & more)*
</pre>
<pre> Create an indent at this point in the pretty printing stream. This defines how 
following lines are indented. relative-to can be either :block or :current depending 
whether the indent should be computed relative to the start of the logical block or
the current column position. n is an offset. 

 Optionally, a third argument which is a stream may be used. If supplied, that is 
the writer indented, otherwise `*`out`*` is used.

 If the requested stream is not a PrettyWriter, this function does nothing.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#248 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pprint-indent+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pprint-logical-block===
====macro====
<pre>
Usage: *(_pprint-logical-block_ base-stream & body)*
</pre>
<pre> Execute the body as a pretty printing logical block with output to `*`out`*` which 
is a pretty printing writer wrapping base-stream (unless base-stream is already a pretty 
printing writer in which case `*`out`*` is just bound to base-stream). 

 After the writer, the caller can optionally specify :prefix, :per-line-prefix, and
:suffix.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#212 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pprint-logical-block+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pprint-newline===
====function====
<pre>
Usage: *(_pprint-newline_ kind & more)*
</pre>
<pre> Print a conditional newline to a pretty printing stream. kind specifies if the 
newline is :linear, :miser, :fill, or :mandatory. 

 Optionally, a second argument which is a stream may be used. If supplied, that is 
the writer to which the newline is sent, otherwise `*`out`*` is used.

 If the requested stream is not a PrettyWriter, this function does nothing.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#232 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pprint-newline+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pprint-tab===
====function====
<pre>
Usage: *(_pprint-tab_ kind colnum colinc & more)*
</pre>
<pre> Tab at this point in the pretty printing stream. kind specifies whether the tab
is :line, :section, :line-relative, or :section-relative. 

 Colnum and colinc specify the target column and the increment to move the target
forward if the output is already past the original target.

 Optionally, a fourth argument which is a stream may be used. If supplied, that is 
the writer indented, otherwise `*`out`*` is used.

 If the requested stream is not a PrettyWriter, this function does nothing.

 THIS FUNCTION IS NOT YET IMPLEMENTED.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#267 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pprint-tab+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===set-pprint-dispatch===
====function====
<pre>
Usage: *(_set-pprint-dispatch_ table)*
</pre>
<pre> Set the pretty print dispatch table to TABLE. Currently the supported values are
`*`simple-dispatch`*` or `*`code-dispatch`*`. In the future, this will support custom tables.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#181 Source] [http://www.google.com/codesearch?hl=en&lr=&q=set-pprint-dispatch+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===with-pprint-dispatch===
====macro====
<pre>
Usage: *(_with-pprint-dispatch_ table & body)*
</pre>
<pre> Execute body with the pretty print dispatch table bound to table.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#188 Source] [http://www.google.com/codesearch?hl=en&lr=&q=with-pprint-dispatch+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===write===
====function====
<pre>
Usage: *(_write_ object & kw-args)*
</pre>
<pre> Write an object subject to the current bindings of the printer control variables.
Use the options argument to override individual variables for this call (and any 
recursive calls). Returns the string result if :stream is nil or nil otherwise.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/pprint/pprint_base.clj#128 Source] [http://www.google.com/codesearch?hl=en&lr=&q=write+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
