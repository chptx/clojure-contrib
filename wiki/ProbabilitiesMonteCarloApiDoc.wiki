#summary probabilities.monte-carlo API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for probabilities.monte-carlo=
<br>by Konrad Hinsen

Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.probabilities.monte-carlo))
}}}
==Overview==
<pre>Monte-Carlo method support 
 
Monte-Carlo methods transform an input random number stream 
(usually having a continuous uniform distribution in the 
interval `[`0, 1)) into a random number stream whose distribution 
satisfies certain conditions (usually the expectation value 
is equal to some desired quantity). They are thus 
transformations from one probability distribution to another one. 
 
This library represents a Monte-Carlo method by a function that 
takes as input the state of a random number stream with 
uniform distribution (see 
clojure.contrib.probabilities.random-numbers) and returns a 
vector containing one sample value of the desired output 
distribution and the final state of the input random number 
stream. Such functions are state monad values and can be 
composed using operations defined in clojure.contrib.monads.</pre>


==Public Variables and Functions==
Shortcuts:
[#discrete discrete] [#exponential exponential] [#lognormal lognormal] [#n-sphere n-sphere] [#normal normal] [#normal-box-muller normal-box-muller] [#random-stream random-stream] [#reject reject] [#sample sample] [#sample-mean sample-mean] [#sample-mean-variance sample-mean-variance] [#sample-reduce sample-reduce] [#sample-sum sample-sum] 

----
===discrete===
====function====
<pre>
Usage: *(_discrete_ dist)*
</pre>
<pre>A discrete distribution, defined by a map dist mapping values 
to probabilities. The sum of probabilities must be one.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo/clojure/contrib/probabilities/monte_carlo.clj#87 Source] [http://www.google.com/codesearch?hl=en&lr=&q=discrete+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===exponential===
====function====
<pre>
Usage: *(_exponential_ lambda)*
</pre>
<pre>Transform a sequence of uniform random numbers in the interval `[`0, 1) 
into a sequence of exponential random numbers with parameter lambda.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo/clojure/contrib/probabilities/monte_carlo.clj#146 Source] [http://www.google.com/codesearch?hl=en&lr=&q=exponential+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===lognormal===
====function====
<pre>
Usage: *(_lognormal_ mu sigma)*
</pre>
<pre>Transform a sequence of uniform random numbesr in the interval `[`0, 1) 
into a sequence of lognormal random numbers with mean mu and standard 
deviation sigma.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo/clojure/contrib/probabilities/monte_carlo.clj#137 Source] [http://www.google.com/codesearch?hl=en&lr=&q=lognormal+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===n-sphere===
====function====
<pre>
Usage: *(_n-sphere_ n r)*
</pre>
<pre>Return a uniform distribution of n-dimensional vectors inside an 
n-sphere of radius r.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo/clojure/contrib/probabilities/monte_carlo.clj#228 Source] [http://www.google.com/codesearch?hl=en&lr=&q=n-sphere+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===normal===
====function====
<pre>
Usage: *(_normal_ mu sigma)*
</pre>
<pre>Transform a sequence urs of uniform random number in the interval `[`0, 1) 
into a sequence of normal random numbers with mean mu and standard 
deviation sigma.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo/clojure/contrib/probabilities/monte_carlo.clj#115 Source] [http://www.google.com/codesearch?hl=en&lr=&q=normal+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===normal-box-muller===
====function====
<pre>
Usage: *(_normal-box-muller_ mu sigma)*
</pre>
<pre>Transform a sequence of uniform random numbers in the interval `[`0, 1) 
into a sequence of normal random numbers with mean mu and standard 
deviation sigma.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo/clojure/contrib/probabilities/monte_carlo.clj#162 Source] [http://www.google.com/codesearch?hl=en&lr=&q=normal-box-muller+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===random-stream===
====function====
<pre>
Usage: *(_random-stream_ distribution random-stream-state)*
</pre>
<pre>Define a random stream by a distribution and the state of a 
random number stream with uniform distribution in `[`0, 1).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo/clojure/contrib/probabilities/monte_carlo.clj#61 Source] [http://www.google.com/codesearch?hl=en&lr=&q=random-stream+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===reject===
====function====
<pre>
Usage: *(_reject_ p dist)*
</pre>
<pre>Return the distribution that results from rejecting the values from 
dist that do not satisfy predicate p.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo/clojure/contrib/probabilities/monte_carlo.clj#73 Source] [http://www.google.com/codesearch?hl=en&lr=&q=reject+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===sample===
====function====
<pre>
Usage: *(_sample_ n dist)*
</pre>
<pre>Return the distribution of samples of length n from the 
distribution dist</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo/clojure/contrib/probabilities/monte_carlo.clj#183 Source] [http://www.google.com/codesearch?hl=en&lr=&q=sample+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===sample-mean===
====function====
<pre>
Usage: *(_sample-mean_ n dist)*
</pre>
<pre>Return the distribution of the mean over n samples from the 
distribution dist</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo/clojure/contrib/probabilities/monte_carlo.clj#210 Source] [http://www.google.com/codesearch?hl=en&lr=&q=sample-mean+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===sample-mean-variance===
====function====
<pre>
Usage: *(_sample-mean-variance_ n dist)*
</pre>
<pre>Return the distribution of the mean-and-variance (a vector containing 
the mean and the variance) over n samples from the distribution dist</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo/clojure/contrib/probabilities/monte_carlo.clj#217 Source] [http://www.google.com/codesearch?hl=en&lr=&q=sample-mean-variance+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===sample-reduce===
====function====
<pre>
Usage: *(_sample-reduce_ f n dist)
       (_sample-reduce_ f val n dist)*
</pre>
<pre>Returns the distribution of the reduction of f over n samples from the 
distribution dist.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo/clojure/contrib/probabilities/monte_carlo.clj#189 Source] [http://www.google.com/codesearch?hl=en&lr=&q=sample-reduce+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===sample-sum===
====function====
<pre>
Usage: *(_sample-sum_ n dist)*
</pre>
<pre>Return the distribution of the sum over n samples from the 
distribution dist.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/probabilities/monte_carlo/clojure/contrib/probabilities/monte_carlo.clj#204 Source] [http://www.google.com/codesearch?hl=en&lr=&q=sample-sum+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
