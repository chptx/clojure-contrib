#summary profile API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for profile=
by Stuart Sierra

Usage: 
{{{
(ns <your-namespace>
  (:require clojure.contrib.profile))
}}}
==Overview==
<pre> Simple code profiling & timing measurement. 
 
Wrap any section of code in the prof macro, giving it a name, like this: 
 
       (defn my-function `[`x y`]` 
         (let `[`sum (prof :addition (+ x y)) 
               product (prof :multiplication (`*` x y))`]` 
           `[`sum product`]`)) 
 
The run your code in the profile macro, like this: 
 
       (profile (dotimes `[`i 10000`]` (my-function 3 4))) 
 
Which prints a report for each named section of code: 
 
          Name      mean       min       max     count       sum 
      addition       265         0     37000     10000   2655000 
multiplication       274         0     53000     10000   2747000 
 
Times are measured in nanoseconds, to the maximum precision available 
under the JVM.  See the function documentation for more details.</pre>


==Public Variables and Functions==
Shortcuts:
[#*_enable-profiling_* *enable-profiling*] [#print-summary print-summary] [#prof prof] [#profile profile] [#summarize summarize] [#with-profile-data with-profile-data] 

----
===`*`enable-profiling`*`===
====var====
<pre> Set this to false before loading/compiling to omit 
profiling code.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/profile.clj#42 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*enable-profiling*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===print-summary===
====function====
<pre>
Usage: *(_print-summary_ profile-summary)*
</pre>
<pre> Prints a table of the results returned by summarize.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/profile.clj#95 Source] [http://www.google.com/codesearch?hl=en&lr=&q=print-summary+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===prof===
====macro====
<pre>
Usage: *(_prof_ name & body)*
</pre>
<pre> If `*`enable-profiling`*` is true, wraps body in profiling code. 
Returns the result of body. Profile timings will be stored in 
`*`profile-data`*` using name, which must be a keyword, as the key. 
Timings are measured with System/nanoTime.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/profile.clj#45 Source] [http://www.google.com/codesearch?hl=en&lr=&q=prof+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===profile===
====macro====
<pre>
Usage: *(_profile_ & body)*
</pre>
<pre> Runs body with profiling enabled, then prints a summary of 
results.  Returns nil.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/profile.clj#106 Source] [http://www.google.com/codesearch?hl=en&lr=&q=profile+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===summarize===
====function====
<pre>
Usage: *(_summarize_ profile-data)*
</pre>
<pre> Takes the raw data returned by with-profile-data and returns a map 
from names to summary statistics.  Each value in the map will look 
like: 
 
   {:mean ..., :min ..., :max ..., :count ..., :sum ...} 
 
:mean, :min, and :max are how long the profiled section took to run, 
in nanoseconds.  :count is the total number of times the profiled 
section was executed.  :sum is the total amount of time spent in the 
profiled section, in nanoseconds.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/profile.clj#73 Source] [http://www.google.com/codesearch?hl=en&lr=&q=summarize+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===with-profile-data===
====macro====
<pre>
Usage: *(_with-profile-data_ & body)*
</pre>
<pre> Executes body with `*`profile-data`*` bound to an atom of a new map. 
Returns the raw profile data as a map.  Keys in the map are profile 
names (keywords), and values are lists of elapsed time, in 
nanoseconds.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/profile.clj#63 Source] [http://www.google.com/codesearch?hl=en&lr=&q=with-profile-data+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
