#summary seq-utils API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for seq-utils=
by Stuart Sierra (and others)

Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.seq-utils))
}}}
==Overview==
<pre> Sequence utilities for Clojure</pre>


==Public Variables and Functions==
Shortcuts:
[#find-first find-first] [#flatten flatten] [#frequencies frequencies] [#group-by group-by] [#includes? includes?] [#indexed indexed] [#partition-all partition-all] [#partition-by partition-by] [#rand-elt rand-elt] [#rec-cat rec-cat] [#rec-seq rec-seq] [#reductions reductions] [#rotations rotations] [#separate separate] [#seq-on seq-on] [#shuffle shuffle] 

----
===find-first===
====function====
<pre>
Usage: *(_find-first_ pred coll)*
</pre>
<pre> Returns the first item of coll for which (pred item) returns logical true. 
Consumes sequences up to the first match, will consume the entire sequence 
and return nil if no match is found.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#167 Source] [http://www.google.com/codesearch?hl=en&lr=&q=find-first+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===flatten===
====function====
<pre>
Usage: *(_flatten_ x)*
</pre>
<pre> Takes any nested combination of sequential things (lists, vectors, 
etc.) and returns their contents as a single, flat sequence. 
(flatten nil) returns nil.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#32 Source] [http://www.google.com/codesearch?hl=en&lr=&q=flatten+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===frequencies===
====function====
<pre>
Usage: *(_frequencies_ coll)*
</pre>
<pre> Returns a map from distinct items in coll to the number of times 
they appear.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#86 Source] [http://www.google.com/codesearch?hl=en&lr=&q=frequencies+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===group-by===
====function====
<pre>
Usage: *(_group-by_ f coll)*
</pre>
<pre> Returns a sorted map of the elements of coll keyed by the result of 
f on each element. The value at each key will be a vector of the 
corresponding elements, in the order they appeared in coll.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#63 Source] [http://www.google.com/codesearch?hl=en&lr=&q=group-by+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===includes?===
====function====
<pre>
Usage: *(_includes?_ coll x)*
</pre>
<pre> Returns true if coll contains something equal (with =) to x, 
in linear time.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#46 Source] [http://www.google.com/codesearch?hl=en&lr=&q=includes?+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===indexed===
====function====
<pre>
Usage: *(_indexed_ s)*
</pre>
<pre> Returns a lazy sequence of `[`index, item`]` pairs, where items come 
from 's' and indexes count up from zero. 
 
(indexed '(a b c d))  =>  (`[`0 a`]` `[`1 b`]` `[`2 c`]` `[`3 d`]`)</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#53 Source] [http://www.google.com/codesearch?hl=en&lr=&q=indexed+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===partition-all===
====function====
<pre>
Usage: *(_partition-all_ n coll)
       (_partition-all_ n step coll)*
</pre>
<pre> Returns a lazy sequence of lists like clojure.core/partition, but may 
include lists with fewer than n items at the end.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#132 Source] [http://www.google.com/codesearch?hl=en&lr=&q=partition-all+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===partition-by===
====function====
<pre>
Usage: *(_partition-by_ f coll)*
</pre>
<pre> Applies f to each value in coll, splitting it each time f returns 
a new value.  Returns a lazy seq of lazy seqs.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#76 Source] [http://www.google.com/codesearch?hl=en&lr=&q=partition-by+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===rand-elt===
====function====
<pre>
Usage: *(_rand-elt_ s)*
</pre>
<pre> Return a random element of this seq</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#149 Source] [http://www.google.com/codesearch?hl=en&lr=&q=rand-elt+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===rec-cat===
====macro====
<pre>
Usage: *(_rec-cat_ binding-name & exprs)*
</pre>
<pre> Similar to lazy-cat but binds the resulting sequence to the supplied  
binding-name, allowing for recursive expressions.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#103 Source] [http://www.google.com/codesearch?hl=en&lr=&q=rec-cat+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===rec-seq===
====macro====
<pre>
Usage: *(_rec-seq_ binding-name & body)*
</pre>
<pre> Similar to lazy-seq but binds the resulting seq to the supplied  
binding-name, allowing for recursive expressions.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#96 Source] [http://www.google.com/codesearch?hl=en&lr=&q=rec-seq+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===reductions===
====function====
<pre>
Usage: *(_reductions_ f coll)
       (_reductions_ f init coll)*
</pre>
<pre> Returns a lazy seq of the intermediate values of the reduction (as 
per reduce) of coll by f, starting with init.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#112 Source] [http://www.google.com/codesearch?hl=en&lr=&q=reductions+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===rotations===
====function====
<pre>
Usage: *(_rotations_ x)*
</pre>
<pre> Returns a lazy seq of all rotations of a seq</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#122 Source] [http://www.google.com/codesearch?hl=en&lr=&q=rotations+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===separate===
====function====
<pre>
Usage: *(_separate_ f s)*
</pre>
<pre> Returns a vector: 
`[` (filter f s), (filter (complement f) s) `]`</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#40 Source] [http://www.google.com/codesearch?hl=en&lr=&q=separate+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===seq-on===
====multimethod====
<pre>
Usage: *(_seq-on_ s)*
</pre>
<pre> Returns a seq on the object s. Works like the built-in seq but as 
a multimethod that can have implementations for new classes and types.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#156 Source] [http://www.google.com/codesearch?hl=en&lr=&q=seq-on+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===shuffle===
====function====
<pre>
Usage: *(_shuffle_ coll)*
</pre>
<pre> Return a random permutation of coll</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/seq_utils.clj#142 Source] [http://www.google.com/codesearch?hl=en&lr=&q=shuffle+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
