#summary sql.internal API Reference

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for sql.internal=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.sql.internal))
}}}
==Public Variables and Functions==
Shortcuts:
[#(_connection*_) connection*] [#(_find-connection*_) find-connection*] get-connection [#(_rollback_) rollback] [#(_transaction*_func) transaction*] [#(_with-connection*_db-spec_func) with-connection*] with-query-results* 

----
===(_connection`*`_)===
Returns the current database connection (or throws if there is none)
----
===(_find-connection`*`_)===
Returns the current database connection (or nil if there is none)
----
===(_get-connection_ {:keys [datasource username password classname subprotocol subname], :as db-spec})===
Creates a connection to a database. db-spec is a map containing values
for one of the following parameter sets:

DataSource:
:datasource  (required) a javax.sql.DataSource
:username    (optional) a String
:password    (optional) a String

DriverManager:
:classname   (required) a String, the jdbc driver class name
:subprotocol (required) a String, the jdbc subprotocol
:subname     (required) a String, the jdbc subname
(others)     (optional) passed to the driver as properties.
----
===(_rollback_)===
===(_rollback_ val)===
Accessor for the rollback flag on the current connection
----
===(_transaction`*`_ func)===
Evaluates func as a transaction on the open database connection. Any
nested transactions are absorbed into the outermost transaction. By
default, all database updates are committed together as a group after
evaluating the outermost body, or rolled back on any uncaught
exception. If rollback is set within scope of the outermost transaction,
the entire transaction will be rolled back rather than committed when
complete.
----
===(_with-connection`*`_ db-spec func)===
Evaluates func in the context of a new connection to a database then
closes the connection.
----
===(_with-query-results`*`_ [sql & params :as sql-params] func)===
Executes a query, then evaluates func passing in a seq of the results as
an argument. The first argument is a vector containing the (optionally
parameterized) sql query string followed by values for any parameters.
