#summary str-utils2 API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for str-utils2=
by Stuart Sierra

Usage: 
{{{
(ns <your-namespace>
  (:require clojure.contrib.str-utils2))
}}}
==Overview==
<pre> This is a library of string manipulation functions.  It 
is intented as a replacement for clojure.contrib.str-utils. 
 
You cannot (use 'clojure.contrib.str-utils2) because it defines 
functions with the same names as functions in clojure.core. 
Instead, do (require '`[`clojure.contrib.str-utils2 :as s`]`)  
or something similar. 
 
Goals: 
  1. Be functional 
  2. String argument first, to work with -> 
  3. Performance linear in string length 
 
Some ideas are borrowed from 
http://github.com/francoisdevlin/devlinsf-clojure-utils/</pre>


==Public Variables and Functions==
Shortcuts:
[#blank? blank?] [#butlast butlast] [#chomp chomp] [#chop chop] [#codepoints codepoints] [#dochars dochars] [#docodepoints docodepoints] [#escape escape] [#join join] [#partition partition] [#replace replace] [#replace-first replace-first] [#tail tail] [#take take] 

----
===blank?===
====function====
<pre>
Usage: *(_blank?_ s)*
</pre>
<pre> True if s is nil, empty, or contains only whitespace.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#106 Source] [http://www.google.com/codesearch?hl=en&lr=&q=blank?+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===butlast===
====function====
<pre>
Usage: *(_butlast_ s n)*
</pre>
<pre> Returns s without the last n characters.  Returns an empty string 
if n is greater than the length of s.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#125 Source] [http://www.google.com/codesearch?hl=en&lr=&q=butlast+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===chomp===
====function====
<pre>
Usage: *(_chomp_ s)*
</pre>
<pre> Removes all trailing newline \n or return \r characters from 
string.  Note: String.trim() is similar and faster.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#236 Source] [http://www.google.com/codesearch?hl=en&lr=&q=chomp+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===chop===
====function====
<pre>
Usage: *(_chop_ s)*
</pre>
<pre> Removes the last character of string.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#231 Source] [http://www.google.com/codesearch?hl=en&lr=&q=chop+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===codepoints===
====function====
<pre>
Usage: *(_codepoints_ s)*
</pre>
<pre> Returns a sequence of integer Unicode code points in s.  Handles 
Unicode supplementary characters (above U+FFFF) correctly.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#77 Source] [http://www.google.com/codesearch?hl=en&lr=&q=codepoints+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===dochars===
====macro====
<pre>
Usage: *(_dochars_ bindings & body)*
</pre>
<pre> bindings `=`> `[`name string`]` 
 
Repeatedly executes body, with name bound to each character in 
string.  Does NOT handle Unicode supplementary characters (above 
U+FFFF).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#37 Source] [http://www.google.com/codesearch?hl=en&lr=&q=dochars+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===docodepoints===
====macro====
<pre>
Usage: *(_docodepoints_ bindings & body)*
</pre>
<pre> bindings `=`> `[`name string`]` 
 
Repeatedly executes body, with name bound to the integer code point 
of each Unicode character in the string.  Handles Unicode 
supplementary characters (above U+FFFF) correctly.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#53 Source] [http://www.google.com/codesearch?hl=en&lr=&q=docodepoints+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===escape===
====function====
<pre>
Usage: *(_escape_ s cmap)*
</pre>
<pre> Escapes characters in string according to a cmap, a function or map 
from characters to their replacements.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#90 Source] [http://www.google.com/codesearch?hl=en&lr=&q=escape+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===join===
====function====
<pre>
Usage: *(_join_ separator coll)*
</pre>
<pre> Returns a string of all elements in coll, separated by 
separator.  Like Perl's join.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#225 Source] [http://www.google.com/codesearch?hl=en&lr=&q=join+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===partition===
====function====
<pre>
Usage: *(_partition_ s re)*
</pre>
<pre> Splits the string into a lazy sequence of substrings, alternating 
between substrings that match the patthern and the substrings 
between the matches.  The sequence always starts with the substring 
before the first match, or an empty string if the beginning of the 
string matches. 
 
For example: (partition "abc123def" #"`[`a-z`]`+") 
returns: ("" "abc" "123" "def")</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#204 Source] [http://www.google.com/codesearch?hl=en&lr=&q=partition+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===replace===
====multimethod====
<pre>
Usage: *(_replace_ string pattern replacement)*
</pre>
<pre> Replaces all instances of pattern in string with replacement.   
 
Allowed argument types for pattern and replacement are: 
 1. String and String 
 2. Character and Character 
 3. regex Pattern and String 
    (Uses java.util.regex.Matcher.replaceAll) 
 4. regex Pattern and function 
    (Calls function with re-groups of each match, uses return  
     value as replacement.)</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#140 Source] [http://www.google.com/codesearch?hl=en&lr=&q=replace+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===replace-first===
====multimethod====
<pre>
Usage: *(_replace-first_ s pattern replacement)*
</pre>
<pre> Replaces the first instance of pattern in s with replacement. 
 
Allowed argument types for pattern and replacement are: 
 1. String and String 
 2. regex Pattern and String 
    (Uses java.util.regex.Matcher.replaceAll) 
 3. regex Pattern and function</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#175 Source] [http://www.google.com/codesearch?hl=en&lr=&q=replace-first+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===tail===
====function====
<pre>
Usage: *(_tail_ s n)*
</pre>
<pre> Returns the last n characters of s.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#133 Source] [http://www.google.com/codesearch?hl=en&lr=&q=tail+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===take===
====function====
<pre>
Usage: *(_take_ s n)*
</pre>
<pre> Take first n characters from s, up to the length of s.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils2.clj#111 Source] [http://www.google.com/codesearch?hl=en&lr=&q=take+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
