#summary str-utils API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for str-utils=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.str-utils))
}}}


==Public Variables and Functions==
Shortcuts:
[#chomp chomp] [#chop chop] [#re-gsub re-gsub] [#re-partition re-partition] [#re-split re-split] [#re-sub re-sub] [#str-join str-join] 

----
===chomp===
====function====
<pre>
Usage: *(_chomp_ s)*
</pre>
<pre>Removes all trailing newline \n or return \r characters from 
string.  Note: String.trim() is similar and faster.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils/clojure/contrib/str_utils.clj#93 Source] [http://www.google.com/codesearch?hl=en&lr=&q=chomp+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===chop===
====function====
<pre>
Usage: *(_chop_ s)*
</pre>
<pre>Removes the last character of string.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils/clojure/contrib/str_utils.clj#88 Source] [http://www.google.com/codesearch?hl=en&lr=&q=chop+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===re-gsub===
====function====
<pre>
Usage: *(_re-gsub_ regex replacement string)*
</pre>
<pre>Replaces all instances of 'pattern' in 'string' with 
'replacement'.  Like Ruby's 'String#gsub'. 
 
If (ifn? replacment) is true, the replacement is called with the 
match. 
</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils/clojure/contrib/str_utils.clj#47 Source] [http://www.google.com/codesearch?hl=en&lr=&q=re-gsub+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===re-partition===
====function====
<pre>
Usage: *(_re-partition_ re string)*
</pre>
<pre>Splits the string into a lazy sequence of substrings, alternating 
between substrings that match the patthern and the substrings 
between the matches.  The sequence always starts with the substring 
before the first match, or an empty string if the beginning of the 
string matches. 
 
For example: (re-partition #"`[`a-z`]`+" "abc123def") 
 
Returns: ("" "abc" "123" "def")</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils/clojure/contrib/str_utils.clj#25 Source] [http://www.google.com/codesearch?hl=en&lr=&q=re-partition+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===re-split===
====function====
<pre>
Usage: *(_re-split_ pattern string)
       (_re-split_ pattern string limit)*
</pre>
<pre>Splits the string on instances of 'pattern'.  Returns a sequence of 
strings.  Optional 'limit' argument is the maximum number of 
splits.  Like Perl's 'split'.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils/clojure/contrib/str_utils.clj#18 Source] [http://www.google.com/codesearch?hl=en&lr=&q=re-split+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===re-sub===
====function====
<pre>
Usage: *(_re-sub_ regex replacement string)*
</pre>
<pre>Replaces the first instance of 'pattern' in 'string' with 
'replacement'.  Like Ruby's 'String#sub'. 
 
If (ifn? replacement) is true, the replacement is called with 
the match. 
</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils/clojure/contrib/str_utils.clj#63 Source] [http://www.google.com/codesearch?hl=en&lr=&q=re-sub+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===str-join===
====function====
<pre>
Usage: *(_str-join_ separator sequence)*
</pre>
<pre>Returns a string of all elements in 'sequence', separated by 
'separator'.  Like Perl's 'join'.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/str_utils/clojure/contrib/str_utils.clj#81 Source] [http://www.google.com/codesearch?hl=en&lr=&q=str-join+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
