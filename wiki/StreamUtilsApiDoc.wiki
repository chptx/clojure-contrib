#summary stream-utils API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for stream-utils=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.stream-utils))
}}}


==Public Variables and Functions==
Shortcuts:
[#defst defst] [#defstream defstream] [#pick pick] [#pick-all pick-all] [#stream-drop stream-drop] [#stream-filter stream-filter] [#stream-flatten stream-flatten] [#stream-m stream-m] [#stream-map stream-map] [#stream-next stream-next] [#stream-seq stream-seq] [#stream-type stream-type] 

----
===defst===
<pre>
Usage: *(_defst_ name args streams & body)*
</pre>
====Macro====
<pre> Define the stream transformer name by body.
The non-stream arguments args and the stream arguments streams
are given separately, with args being possibly empty.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#180 Source] [http://www.google.com/codesearch?hl=en&lr=&q=defst+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===defstream===
<pre>
Usage: *(_defstream_ type-tag args & body)*
</pre>
====Macro====
<pre> Define object of the given type as a stream whose implementation
of stream-next is defined by args and body. This macro adds
a type-specific method for stream-next and derives type
from stream-type.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#70 Source] [http://www.google.com/codesearch?hl=en&lr=&q=defstream+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pick===
<pre>
Usage: *(_pick_ n)*
</pre>
<pre> Return the next value of stream argument n inside a stream
transformer. When used inside of defst, the name of the stream
argument can be used instead of its index n.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#146 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pick+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===pick-all===
<pre>
Usage: *(_pick-all_ streams)*
</pre>
<pre> Return a vector containing the next value of each stream argument
inside a stream transformer.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#157 Source] [http://www.google.com/codesearch?hl=en&lr=&q=pick-all+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===stream-drop===
<pre>
Usage: *(_stream-drop_ n stream)*
</pre>
<pre> Return a stream containing all but the first n elements of stream.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#198 Source] [http://www.google.com/codesearch?hl=en&lr=&q=stream-drop+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===stream-filter===
<pre>
Usage: *(_stream-filter_ p stream)*
</pre>
<pre> Return a new stream that contrains the elements of stream
that satisfy the predicate p.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#240 Source] [http://www.google.com/codesearch?hl=en&lr=&q=stream-filter+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===stream-flatten===
<pre>
Usage: *(_stream-flatten_ s)*
</pre>
<pre> Converts a stream of sequences into a stream of the elements of the
sequences. Flattening is not recursive, only one level of nesting
will be removed.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#268 Source] [http://www.google.com/codesearch?hl=en&lr=&q=stream-flatten+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===stream-m===
<pre>
Usage: *_stream-m_*
</pre>
<pre> Monad describing stream computations. The monadic values can be
of any type handled by stream-next.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#132 Source] [http://www.google.com/codesearch?hl=en&lr=&q=stream-m+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===stream-map===
<pre>
Usage: *(_stream-map_ f stream)*
</pre>
<pre> Return a new stream by mapping the function f on the given stream.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#216 Source] [http://www.google.com/codesearch?hl=en&lr=&q=stream-map+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===stream-next===
<pre>
Usage: *(_stream-next_ stream-state)*
</pre>
<pre> Returns a vector `[`next-value new-state`]` where next-value is the next
item in the data stream defined by stream-state and new-state
is the new state of the stream. At the end of the stream,
next-value and new-state are nil.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#88 Source] [http://www.google.com/codesearch?hl=en&lr=&q=stream-next+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===stream-seq===
<pre>
Usage: *(_stream-seq_ s)*
</pre>
<pre> Return a lazy seq on the stream. Also accessible via
clojure.contrib.seq-utils/seq-on and
clojure.contrib.generic.collection/seq for streams.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#110 Source] [http://www.google.com/codesearch?hl=en&lr=&q=stream-seq+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===stream-type===
<pre>
Usage: *_stream-type_*
</pre>
<pre> The root type for the stream hierarchy. For each stream type,
add a derivation from this type.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/stream_utils.clj#66 Source] [http://www.google.com/codesearch?hl=en&lr=&q=stream-type+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
