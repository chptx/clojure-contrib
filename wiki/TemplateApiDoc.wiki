#summary template API Reference

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for template=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.template))
}}}


==Public Variables and Functions==
Shortcuts:
[#(_apply-template_expr_values) apply-template] [#(_do-template_expr_&_args) do-template] [#(_find-holes_form) find-holes] [#(_find-pure-exprs_form) find-pure-exprs] [#(_find-symbols_form) find-symbols] [#(_flatten-map_m) flatten-map] [#(_template_&_form) template] [#(_template?_form) template?] 

----
===(_apply-template_ expr values)===
Replaces _1, _2, _3, etc. in expr with corresponding elements of
values.  Returns the modified expression.  For use in macros.
----
===(_do-template_ expr & args)===
====Macro====
Repeatedly evaluates template expr (in a do block) using values in
args.  args are grouped by the number of holes in the template.
Example: (do-template (check _1 _2) :a :b :c :d)
expands to (do (check :a :b) (check :c :d))
----
===(_find-holes_ form)===
Recursively finds all symbols starting with _ in form.
----
===(_find-pure-exprs_ form)===
Recursively finds all sub-expressions in form that do not contain
any symbols starting with _
----
===(_find-symbols_ form)===
Recursively finds all symbols in form.
----
===(_flatten-map_ m)===
Transforms a map into a vector like [key value key value].
----
===(_template_ & form)===
====Macro====
Expands to a fn using _1, _2, _3, etc. as arguments (_ is the same
as _1).  Any sub-expressions without any _`*` variables are evaluated
when the fn is created, not when it is called.
----
===(_template?_ form)===
Returns true if form is a valid template expression.
