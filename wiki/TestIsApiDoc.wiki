#summary test-is API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for test-is=
by Stuart Sierra, with contributions and suggestions by 
Chas Emerick, Allen Rohner, and Stuart Halloway

Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.test-is))
}}}
==Overview==
<pre> Inspired by many Common Lisp test frameworks and clojure/test, 
this file is a Clojure test framework. 
 
ASSERTIONS 
 
The core of the library is the "is" macro, which lets you make 
assertions of any arbitrary expression: 
 
(is (= 4 (+ 2 2))) 
(is (instance? Integer 256)) 
(is (.startsWith "abcde" "ab")) 
 
You can type an "is" expression directly at the REPL, which will 
print a message if it fails. 
 
    user> (is (= 5 (+ 2 2))) 
 
    FAIL in  (:1) 
    expected: (= 5 (+ 2 2)) 
      actual: (not (= 5 4)) 
    false 
 
The "expected:" line shows you the original expression, and the 
"actual:" shows you what actually happened.  In this case, it 
shows that (+ 2 2) returned 4, which is not = to 5.  Finally, the 
"false" on the last line is the value returned from the 
expression.  The "is" macro always returns the result of the 
inner expression. 
 
There are two special assertions for testing exceptions.  The 
"(is (thrown? c ...))" form tests if an exception of class c is 
thrown: 
 
(is (thrown? ArithmeticException (/ 1 0)))  
 
"(is (thrown-with-msg? c re ...))" does the same thing and also 
tests that the message on the exception matches the regular 
expression re: 
 
(is (thrown-with-msg? ArithmeticException #"Divide by zero" 
                      (/ 1 0))) 
 
DOCUMENTING TESTS 
 
"is" takes an optional second argument, a string describing the 
assertion.  This message will be included in the error report. 
 
(is (= 5 (+ 2 2)) "Crazy arithmetic") 
 
In addition, you can document groups of assertions with the 
"testing" macro, which takes a string followed by any number of 
"is" assertions.  The string will be included in failure reports. 
Calls to "testing" may be nested, and all of the strings will be 
joined together with spaces in the final report, in a style 
similar to RSpec <http://rspec.info/> 
 
(testing "Arithmetic" 
  (testing "with positive integers" 
    (= 4 (+ 2 2)) 
    (= 7 (+ 3 4))) 
  (testing "with negative integers" 
    (= -4 (+ -2 -2)) 
    (= -1 (+ 3 -4)))) 
 
Note that, unlike RSpec, the "testing" macro may only be used 
INSIDE a "deftest" or "with-test" form (see below). 
 
 
DEFINING TESTS 
 
There are two ways to define tests.  The "with-test" macro takes 
a defn or def form as its first argument, followed by any number 
of assertions.  The tests will be stored as metadata on the 
definition. 
 
(with-test 
    (defn my-function `[`x y`]` 
      (+ x y)) 
  (is (= 4 (my-function 2 2))) 
  (is (= 7 (my-function 3 4)))) 
 
As of Clojure SVN rev. 1221, this does not work with defmacro. 
See http://code.google.com/p/clojure/issues/detail?id=51 
 
The other way lets you define tests separately from the rest of 
your code, even in a different namespace: 
 
(deftest addition 
  (is (= 4 (+ 2 2))) 
  (is (= 7 (+ 3 4)))) 
 
(deftest subtraction 
  (is (= 1 (- 4 3))) 
  (is (= 3 (- 7 4)))) 
 
This creates functions named "addition" and "subtraction", which 
can be called like any other function.  Therefore, tests can be 
grouped and composed, in a style similar to the test framework in 
Peter Seibel's "Practical Common Lisp" 
<http://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html> 
 
(deftest arithmetic 
  (addition) 
  (subtraction)) 
 
The names of the nested tests will be joined in a list, like 
"(arithmetic addition)", in failure reports.  You can use nested 
tests to set up a context shared by several tests. 
 
 
RUNNING TESTS 
 
Run tests with the function "(run-tests namespaces...)": 
 
(run-tests 'your.namespace 'some.other.namespace) 
 
If you don't specify any namespaces, the current namespace is 
used.  To run all tests in all namespaces, use "(run-all-tests)". 
 
By default, these functions will search for all tests defined in 
a namespace and run them in an undefined order.  However, if you 
are composing tests, as in the "arithmetic" example above, you 
probably do not want the "addition" and "subtraction" tests run 
separately.  In that case, you must define a special function 
named "test-ns-hook" that runs your tests in the correct order: 
 
(defn test-ns-hook `[``]` 
  (arithmetic)) 
 
 
OMITTING TESTS FROM PRODUCTION CODE 
 
You can bind the variable "`*`load-tests`*`" to false when loading or 
compiling code in production.  This will prevent any tests from 
being created by "with-test" or "deftest". 
 
 
FIXTURES (new) 
 
Fixtures allow you to run code before and after tests, to set up 
the context in which tests should be run. 
 
A fixture is just a function that calls another function passed as 
an argument.  It looks like this: 
 
(defn my-fixture `[`f`]` 
   Perform setup, establish bindings, whatever. 
  (f)  Then call the function we were passed. 
   Tear-down / clean-up code here. 
 ) 
 
Fixtures are attached to namespaces in one of two ways.  "each" 
fixtures are run repeatedly, once for each test function created 
with "deftest" or "with-test".  "each" fixtures are useful for 
establishing a consistent before/after state for each test, like 
clearing out database tables. 
 
"each" fixtures can be attached to the current namespace like this: 
(use-fixtures :each fixture1 fixture2 ...) 
The fixture1, fixture2 are just functions like the example above. 
They can also be anonymous functions, like this: 
(use-fixtures :each (fn `[`f`]` setup... (f) cleanup...)) 
 
The other kind of fixture, a "once" fixture, is only run once, 
around ALL the tests in the namespace.  "once" fixtures are useful 
for tasks that only need to be performed once, like establishing 
database connections, or for time-consuming tasks. 
 
Attach "once" fixtures to the current namespace like this: 
(use-fixtures :once fixture1 fixture2 ...) 
 
 
SAVING TEST OUTPUT TO A FILE 
 
All the test reporting functions write to the var `*`test-out`*`.  By 
default, this is the same as `*`out`*`, but you can rebind it to any 
PrintWriter.  For example, it could be a file opened with 
clojure.contrib.duck-streams/writer. 
 
 
EXTENDING TEST-IS (ADVANCED) 
 
You can extend the behavior of the "is" macro by defining new 
methods for the "assert-expr" multimethod.  These methods are 
called during expansion of the "is" macro, so they should return 
quoted forms to be evaluated. 
 
You can plug in your own test-reporting framework by rebinding 
the "report" function: (report event) 
 
The 'event' argument is a map.  It will always have a :type key, 
whose value will be a keyword signaling the type of event being 
reported.  Standard events with :type value of :pass, :fail, and 
:error are called when an assertion passes, fails, and throws an 
exception, respectively.  In that case, the event will also have 
the following keys: 
 
  :expected   The form that was expected to be true 
  :actual     A form representing what actually occurred 
  :message    The string message given as an argument to 'is' 
 
The "testing" strings will be a list in "`*`testing-contexts`*`", and 
the vars being tested will be a list in "`*`testing-vars`*`". 
 
Your "report" function should wrap any printing calls in the 
"with-test-out" macro, which rebinds `*`out`*` to the current value 
of `*`test-out`*`. 
 
For additional event types, see the examples in the code.</pre>


==Public Variables and Functions==
Shortcuts:
[#*load-tests* *load-tests*] [#*stack-trace-depth* *stack-trace-depth*] [#are are] [#assert-any assert-any] [#assert-predicate assert-predicate] [#compose-fixtures compose-fixtures] [#deftest deftest] [#deftest- deftest-] [#file-position file-position] [#function? function?] [#get-possibly-unbound-var get-possibly-unbound-var] [#inc-report-counter inc-report-counter] [#is is] [#join-fixtures join-fixtures] [#report report] [#run-all-tests run-all-tests] [#run-tests run-tests] [#set-test set-test] [#test-all-vars test-all-vars] [#test-ns test-ns] [#test-var test-var] [#testing testing] [#testing-contexts-str testing-contexts-str] [#testing-vars-str testing-vars-str] [#try-expr try-expr] [#with-test with-test] [#with-test-out with-test-out] 

Variables and Functions in test-is.tap:
[TestIsApiDoc#print-tap-diagnostic print-tap-diagnostic] [TestIsApiDoc#print-tap-fail print-tap-fail] [TestIsApiDoc#print-tap-pass print-tap-pass] [TestIsApiDoc#print-tap-plan print-tap-plan] [TestIsApiDoc#with-tap-output with-tap-output] 

----
===`*`load-tests`*`===
====var====
<pre> True by default.  If set to false, no test functions will 
be created by deftest, set-test, or with-test.  Use this to omit 
tests when compiling or loading production code.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#468 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*load-tests*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`stack-trace-depth`*`===
====var====
<pre> The maximum depth of stack traces to print when an Exception 
is thrown during a test.  Defaults to nil, which means print the  
complete stack trace.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#474 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*stack-trace-depth*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===are===
====macro====
<pre>
Usage: *(_are_ expr & args)*
</pre>
<pre> Checks multiple assertions with a template expression. 
See clojure.contrib.template/do-template for an explanation of 
templates. 
 
Example: (are (= `_`1 `_`2)   
              2 (+ 1 1) 
              4 (`*` 2 2)) 
Expands to:  
         (do (is (= 2 (+ 1 1))) 
             (is (= 4 (`*` 2 2)))) 
 
Note: This breaks some reporting features, such as line numbers.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#747 Source] [http://www.google.com/codesearch?hl=en&lr=&q=are+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===assert-any===
====function====
<pre>
Usage: *(_assert-any_ msg form)*
</pre>
<pre> Returns generic assertion code for any test, including macros, Java 
method calls, or isolated symbols.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#633 Source] [http://www.google.com/codesearch?hl=en&lr=&q=assert-any+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===assert-predicate===
====function====
<pre>
Usage: *(_assert-predicate_ msg form)*
</pre>
<pre> Returns generic assertion code for any functional predicate.  The 
'expected' argument to 'report' will contains the original form, the 
'actual' argument will contain the form with all its sub-forms 
evaluated.  If the predicate returns false, the 'actual' form will 
be wrapped in (not...).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#615 Source] [http://www.google.com/codesearch?hl=en&lr=&q=assert-predicate+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===compose-fixtures===
====function====
<pre>
Usage: *(_compose-fixtures_ f1 f2)*
</pre>
<pre> Composes two fixture functions, creating a new fixture function 
that combines their behavior.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#843 Source] [http://www.google.com/codesearch?hl=en&lr=&q=compose-fixtures+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===deftest===
====macro====
<pre>
Usage: *(_deftest_ name & body)*
</pre>
<pre> Defines a test function with no arguments.  Test functions may call 
other tests, so tests may be composed.  If you compose tests, you 
should also define a function named test-ns-hook; run-tests will 
call test-ns-hook instead of testing all vars. 
 
Note: Actually, the test body goes in the :test metadata on the var, 
and the real function (the value of the var) calls test-var on 
itself. 
 
When `*`load-tests`*` is false, deftest is ignored.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#786 Source] [http://www.google.com/codesearch?hl=en&lr=&q=deftest+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===deftest-===
====macro====
<pre>
Usage: *(_deftest-_ name & body)*
</pre>
<pre> Like deftest but creates a private var.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#802 Source] [http://www.google.com/codesearch?hl=en&lr=&q=deftest-+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===file-position===
====function====
<pre>
Usage: *(_file-position_ n)*
</pre>
<pre> Returns a vector `[`filename line-number`]` for the nth call up the 
stack.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#504 Source] [http://www.google.com/codesearch?hl=en&lr=&q=file-position+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===function?===
====function====
<pre>
Usage: *(_function?_ x)*
</pre>
<pre> Returns true if argument is a function or a symbol that resolves to 
a function (not a macro).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#604 Source] [http://www.google.com/codesearch?hl=en&lr=&q=function?+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===get-possibly-unbound-var===
====function====
<pre>
Usage: *(_get-possibly-unbound-var_ v)*
</pre>
<pre> Like var-get but returns nil if the var is unbound.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#597 Source] [http://www.google.com/codesearch?hl=en&lr=&q=get-possibly-unbound-var+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===inc-report-counter===
====function====
<pre>
Usage: *(_inc-report-counter_ name)*
</pre>
<pre> Increments the named counter in `*`report-counters`*`, a ref to a map. 
Does nothing if `*`report-counters`*` is nil.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#529 Source] [http://www.google.com/codesearch?hl=en&lr=&q=inc-report-counter+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===is===
====macro====
<pre>
Usage: *(_is_ form)
       (_is_ form msg)*
</pre>
<pre> Generic assertion macro.  'form' is any predicate test. 
'msg' is an optional message to attach to the assertion. 
 
Example: (is (= 4 (+ 2 2)) "Two plus two should be 4") 
 
Special forms: 
 
(is (thrown? c body)) checks that an instance of c is thrown from 
body, fails if not; then returns the thing thrown. 
 
(is (thrown-with-msg? c re body)) checks that an instance of c is 
thrown AND that the message on the exception matches (with 
re-matches) the regular expression re.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#730 Source] [http://www.google.com/codesearch?hl=en&lr=&q=is+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===join-fixtures===
====function====
<pre>
Usage: *(_join-fixtures_ fixtures)*
</pre>
<pre> Composes a collection of fixtures, in order.  Always returns a valid 
fixture function, even if the collection is empty.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#849 Source] [http://www.google.com/codesearch?hl=en&lr=&q=join-fixtures+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===report===
====multimethod====
_No usage documentation available_
<pre> Generic reporting function, may be overridden to plug in 
different report formats (e.g., TAP, JUnit).  Assertions such as 
'is' call 'report' to indicate results.  The argument given to 
'report' will be a map with a :type key.  See the documentation at 
the top of test`_`is.clj for more information on the types of 
arguments for 'report'.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#541 Source] [http://www.google.com/codesearch?hl=en&lr=&q=report+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===run-all-tests===
====function====
<pre>
Usage: *(_run-all-tests_)
       (_run-all-tests_ re)*
</pre>
<pre> Runs all tests in all namespaces; prints results. 
Optional argument is a regular expression; only namespaces with 
names matching the regular expression (with re-matches) will be 
tested.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#920 Source] [http://www.google.com/codesearch?hl=en&lr=&q=run-all-tests+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===run-tests===
====function====
<pre>
Usage: *(_run-tests_)
       (_run-tests_ & namespaces)*
</pre>
<pre> Runs all tests in the given namespaces; prints results. 
Defaults to current namespace if none given.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#912 Source] [http://www.google.com/codesearch?hl=en&lr=&q=run-tests+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===set-test===
====macro====
<pre>
Usage: *(_set-test_ name & body)*
</pre>
<pre> Experimental. 
Sets :test metadata of the named var to a fn with the given body. 
The var must already exist.  Does not modify the value of the var. 
 
When `*`load-tests`*` is false, set-test is ignored.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#810 Source] [http://www.google.com/codesearch?hl=en&lr=&q=set-test+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===test-all-vars===
====function====
<pre>
Usage: *(_test-all-vars_ ns)*
</pre>
<pre> Calls test-var on every var interned in the namespace, with fixtures.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#874 Source] [http://www.google.com/codesearch?hl=en&lr=&q=test-all-vars+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===test-ns===
====function====
<pre>
Usage: *(_test-ns_ ns)*
</pre>
<pre> If the namespace defines a function named test-ns-hook, calls that. 
Otherwise, calls test-all-vars on the namespace.  'ns' is a 
namespace object or a symbol. 
 
Internally binds `*`report-counters`*` to a ref initialized to 
`*`inital-report-counters`*`.  Returns the final, dereferenced state of 
`*`report-counters`*`.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#885 Source] [http://www.google.com/codesearch?hl=en&lr=&q=test-ns+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===test-var===
====function====
<pre>
Usage: *(_test-var_ v)*
</pre>
<pre> If v has a function in its :test metadata, calls that function, 
with `*`testing-vars`*` bound to (conj `*`testing-vars`*` v).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#860 Source] [http://www.google.com/codesearch?hl=en&lr=&q=test-var+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===testing===
====macro====
<pre>
Usage: *(_testing_ string & body)*
</pre>
<pre> Adds a new string to the list of testing contexts.  May be nested, 
but must occur inside a test function (deftest).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#763 Source] [http://www.google.com/codesearch?hl=en&lr=&q=testing+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===testing-contexts-str===
====function====
<pre>
Usage: *(_testing-contexts-str_)*
</pre>
<pre> Returns a string representation of the current test context. Joins 
strings in `*`testing-contexts`*` with spaces.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#523 Source] [http://www.google.com/codesearch?hl=en&lr=&q=testing-contexts-str+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===testing-vars-str===
====function====
<pre>
Usage: *(_testing-vars-str_)*
</pre>
<pre> Returns a string representation of the current test.  Renders names 
in `*`testing-vars`*` as a list, then the source file and line of 
current assertion.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#511 Source] [http://www.google.com/codesearch?hl=en&lr=&q=testing-vars-str+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===try-expr===
====macro====
<pre>
Usage: *(_try-expr_ msg form)*
</pre>
<pre> Used by the 'is' macro to catch unexpected exceptions. 
You don't call this.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#715 Source] [http://www.google.com/codesearch?hl=en&lr=&q=try-expr+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===with-test===
====macro====
<pre>
Usage: *(_with-test_ definition & body)*
</pre>
<pre> Takes any definition form (that returns a Var) as the first argument. 
Remaining body goes in the :test metadata function for that Var. 
 
When `*`load-tests`*` is false, only evaluates the definition, ignoring 
the tests.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#774 Source] [http://www.google.com/codesearch?hl=en&lr=&q=with-test+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===with-test-out===
====macro====
<pre>
Usage: *(_with-test-out_ & body)*
</pre>
<pre> Runs body with `*`out`*` bound to the value of `*`test-out`*`.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is.clj#494 Source] [http://www.google.com/codesearch?hl=en&lr=&q=with-test-out+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
==Namespace clojure.contrib.test-is.tap==
----
===print-tap-diagnostic===
====function====
<pre>
Usage: *(_print-tap-diagnostic_ data)*
</pre>
<pre> Prints a TAP diagnostic line.  data is a (possibly multi-line) 
string.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap.clj#51 Source] [http://www.google.com/codesearch?hl=en&lr=&q=print-tap-diagnostic+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===print-tap-fail===
====function====
<pre>
Usage: *(_print-tap-fail_ msg)*
</pre>
<pre> Prints a TAP 'not ok' line.  msg is a string, with no line breaks</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap.clj#63 Source] [http://www.google.com/codesearch?hl=en&lr=&q=print-tap-fail+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===print-tap-pass===
====function====
<pre>
Usage: *(_print-tap-pass_ msg)*
</pre>
<pre> Prints a TAP 'ok' line.  msg is a string, with no line breaks</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap.clj#58 Source] [http://www.google.com/codesearch?hl=en&lr=&q=print-tap-pass+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===print-tap-plan===
====function====
<pre>
Usage: *(_print-tap-plan_ n)*
</pre>
<pre> Prints a TAP plan line like '1..n'.  n is the number of tests</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap.clj#46 Source] [http://www.google.com/codesearch?hl=en&lr=&q=print-tap-plan+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===with-tap-output===
====macro====
<pre>
Usage: *(_with-tap-output_ & body)*
</pre>
<pre> Execute body with modified test-is reporting functions that produce 
TAP output</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap.clj#107 Source] [http://www.google.com/codesearch?hl=en&lr=&q=with-tap-output+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
