#summary test-is API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for test-is=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.test-is))
}}}


==Public Variables and Functions==
Shortcuts:
[#*load-tests* *load-tests*] [#*stack-trace-depth* *stack-trace-depth*] [#are are] [#assert-any assert-any] [#assert-predicate assert-predicate] [#compose-fixtures compose-fixtures] [#deftest deftest] [#deftest- deftest-] [#file-position file-position] [#function? function?] [#get-possibly-unbound-var get-possibly-unbound-var] [#inc-report-counter inc-report-counter] [#is is] [#join-fixtures join-fixtures] [#report report] [#run-all-tests run-all-tests] [#run-tests run-tests] [#set-test set-test] [#test-all-vars test-all-vars] [#test-ns test-ns] [#test-var test-var] [#testing testing] [#testing-contexts-str testing-contexts-str] [#testing-vars-str testing-vars-str] [#try-expr try-expr] [#with-test with-test] [#with-test-out with-test-out] 

Variables and Functions in test-is.tap:
[TestIsApiDoc#print-tap-diagnostic print-tap-diagnostic] [TestIsApiDoc#print-tap-fail print-tap-fail] [TestIsApiDoc#print-tap-pass print-tap-pass] [TestIsApiDoc#print-tap-plan print-tap-plan] [TestIsApiDoc#with-tap-output with-tap-output] 

----
===`*`load-tests`*`===
====var====
<pre>True by default.  If set to false, no test functions will 
be created by deftest, set-test, or with-test.  Use this to omit 
tests when compiling or loading production code.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#255 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*load-tests*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===`*`stack-trace-depth`*`===
====var====
<pre>The maximum depth of stack traces to print when an Exception 
is thrown during a test.  Defaults to nil, which means print the  
complete stack trace.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#261 Source] [http://www.google.com/codesearch?hl=en&lr=&q=*stack-trace-depth*+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===are===
====macro====
<pre>
Usage: *(_are_ expr & args)*
</pre>
<pre>Checks multiple assertions with a template expression. 
See clojure.contrib.template/do-template for an explanation of 
templates. 
 
Example: (are (= `_`1 `_`2)   
              2 (+ 1 1) 
              4 (`*` 2 2)) 
Expands to:  
         (do (is (= 2 (+ 1 1))) 
             (is (= 4 (`*` 2 2)))) 
 
Note: This breaks some reporting features, such as line numbers.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#534 Source] [http://www.google.com/codesearch?hl=en&lr=&q=are+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===assert-any===
====function====
<pre>
Usage: *(_assert-any_ msg form)*
</pre>
<pre>Returns generic assertion code for any test, including macros, Java 
method calls, or isolated symbols.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#420 Source] [http://www.google.com/codesearch?hl=en&lr=&q=assert-any+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===assert-predicate===
====function====
<pre>
Usage: *(_assert-predicate_ msg form)*
</pre>
<pre>Returns generic assertion code for any functional predicate.  The 
'expected' argument to 'report' will contains the original form, the 
'actual' argument will contain the form with all its sub-forms 
evaluated.  If the predicate returns false, the 'actual' form will 
be wrapped in (not...).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#402 Source] [http://www.google.com/codesearch?hl=en&lr=&q=assert-predicate+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===compose-fixtures===
====function====
<pre>
Usage: *(_compose-fixtures_ f1 f2)*
</pre>
<pre>Composes two fixture functions, creating a new fixture function 
that combines their behavior.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#630 Source] [http://www.google.com/codesearch?hl=en&lr=&q=compose-fixtures+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===deftest===
====macro====
<pre>
Usage: *(_deftest_ name & body)*
</pre>
<pre>Defines a test function with no arguments.  Test functions may call 
other tests, so tests may be composed.  If you compose tests, you 
should also define a function named test-ns-hook; run-tests will 
call test-ns-hook instead of testing all vars. 
 
Note: Actually, the test body goes in the :test metadata on the var, 
and the real function (the value of the var) calls test-var on 
itself. 
 
When `*`load-tests`*` is false, deftest is ignored.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#573 Source] [http://www.google.com/codesearch?hl=en&lr=&q=deftest+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===deftest-===
====macro====
<pre>
Usage: *(_deftest-_ name & body)*
</pre>
<pre>Like deftest but creates a private var.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#589 Source] [http://www.google.com/codesearch?hl=en&lr=&q=deftest-+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===file-position===
====function====
<pre>
Usage: *(_file-position_ n)*
</pre>
<pre>Returns a vector `[`filename line-number`]` for the nth call up the 
stack.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#291 Source] [http://www.google.com/codesearch?hl=en&lr=&q=file-position+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===function?===
====function====
<pre>
Usage: *(_function?_ x)*
</pre>
<pre>Returns true if argument is a function or a symbol that resolves to 
a function (not a macro).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#391 Source] [http://www.google.com/codesearch?hl=en&lr=&q=function?+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===get-possibly-unbound-var===
====function====
<pre>
Usage: *(_get-possibly-unbound-var_ v)*
</pre>
<pre>Like var-get but returns nil if the var is unbound.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#384 Source] [http://www.google.com/codesearch?hl=en&lr=&q=get-possibly-unbound-var+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===inc-report-counter===
====function====
<pre>
Usage: *(_inc-report-counter_ name)*
</pre>
<pre>Increments the named counter in `*`report-counters`*`, a ref to a map. 
Does nothing if `*`report-counters`*` is nil.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#316 Source] [http://www.google.com/codesearch?hl=en&lr=&q=inc-report-counter+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===is===
====macro====
<pre>
Usage: *(_is_ form)
       (_is_ form msg)*
</pre>
<pre>Generic assertion macro.  'form' is any predicate test. 
'msg' is an optional message to attach to the assertion. 
 
Example: (is (= 4 (+ 2 2)) "Two plus two should be 4") 
 
Special forms: 
 
(is (thrown? c body)) checks that an instance of c is thrown from 
body, fails if not; then returns the thing thrown. 
 
(is (thrown-with-msg? c re body)) checks that an instance of c is 
thrown AND that the message on the exception matches (with 
re-matches) the regular expression re.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#517 Source] [http://www.google.com/codesearch?hl=en&lr=&q=is+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===join-fixtures===
====function====
<pre>
Usage: *(_join-fixtures_ fixtures)*
</pre>
<pre>Composes a collection of fixtures, in order.  Always returns a valid 
fixture function, even if the collection is empty.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#636 Source] [http://www.google.com/codesearch?hl=en&lr=&q=join-fixtures+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===report===
====multimethod====
_No usage documentation available_
<pre>Generic reporting function, may be overridden to plug in 
different report formats (e.g., TAP, JUnit).  Assertions such as 
'is' call 'report' to indicate results.  The argument given to 
'report' will be a map with a :type key.  See the documentation at 
the top of test`_`is.clj for more information on the types of 
arguments for 'report'.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#328 Source] [http://www.google.com/codesearch?hl=en&lr=&q=report+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===run-all-tests===
====function====
<pre>
Usage: *(_run-all-tests_)
       (_run-all-tests_ re)*
</pre>
<pre>Runs all tests in all namespaces; prints results. 
Optional argument is a regular expression; only namespaces with 
names matching the regular expression (with re-matches) will be 
tested.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#704 Source] [http://www.google.com/codesearch?hl=en&lr=&q=run-all-tests+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===run-tests===
====function====
<pre>
Usage: *(_run-tests_)
       (_run-tests_ & namespaces)*
</pre>
<pre>Runs all tests in the given namespaces; prints results. 
Defaults to current namespace if none given.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#696 Source] [http://www.google.com/codesearch?hl=en&lr=&q=run-tests+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===set-test===
====macro====
<pre>
Usage: *(_set-test_ name & body)*
</pre>
<pre>Experimental. 
Sets :test metadata of the named var to a fn with the given body. 
The var must already exist.  Does not modify the value of the var. 
 
When `*`load-tests`*` is false, set-test is ignored.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#597 Source] [http://www.google.com/codesearch?hl=en&lr=&q=set-test+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===test-all-vars===
====function====
<pre>
Usage: *(_test-all-vars_ ns)*
</pre>
<pre>Calls test-var on every var interned in the namespace, with fixtures.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#661 Source] [http://www.google.com/codesearch?hl=en&lr=&q=test-all-vars+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===test-ns===
====function====
<pre>
Usage: *(_test-ns_ ns)*
</pre>
<pre>If the namespace defines a function named test-ns-hook, calls that. 
Otherwise, calls test-all-vars on the namespace.  'ns' is a 
namespace object or a symbol. 
 
Internally binds `*`report-counters`*` to a ref initialized to 
`*`inital-report-counters`*`.  Returns the final, dereferenced state of 
`*`report-counters`*`.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#672 Source] [http://www.google.com/codesearch?hl=en&lr=&q=test-ns+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===test-var===
====function====
<pre>
Usage: *(_test-var_ v)*
</pre>
<pre>If v has a function in its :test metadata, calls that function, 
with `*`testing-vars`*` bound to (conj `*`testing-vars`*` v).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#647 Source] [http://www.google.com/codesearch?hl=en&lr=&q=test-var+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===testing===
====macro====
<pre>
Usage: *(_testing_ string & body)*
</pre>
<pre>Adds a new string to the list of testing contexts.  May be nested, 
but must occur inside a test function (deftest).</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#550 Source] [http://www.google.com/codesearch?hl=en&lr=&q=testing+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===testing-contexts-str===
====function====
<pre>
Usage: *(_testing-contexts-str_)*
</pre>
<pre>Returns a string representation of the current test context. Joins 
strings in `*`testing-contexts`*` with spaces.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#310 Source] [http://www.google.com/codesearch?hl=en&lr=&q=testing-contexts-str+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===testing-vars-str===
====function====
<pre>
Usage: *(_testing-vars-str_)*
</pre>
<pre>Returns a string representation of the current test.  Renders names 
in `*`testing-vars`*` as a list, then the source file and line of 
current assertion.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#298 Source] [http://www.google.com/codesearch?hl=en&lr=&q=testing-vars-str+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===try-expr===
====macro====
<pre>
Usage: *(_try-expr_ msg form)*
</pre>
<pre>Used by the 'is' macro to catch unexpected exceptions. 
You don't call this.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#502 Source] [http://www.google.com/codesearch?hl=en&lr=&q=try-expr+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===with-test===
====macro====
<pre>
Usage: *(_with-test_ definition & body)*
</pre>
<pre>Takes any definition form (that returns a Var) as the first argument. 
Remaining body goes in the :test metadata function for that Var. 
 
When `*`load-tests`*` is false, only evaluates the definition, ignoring 
the tests.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#561 Source] [http://www.google.com/codesearch?hl=en&lr=&q=with-test+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===with-test-out===
====macro====
<pre>
Usage: *(_with-test-out_ & body)*
</pre>
<pre>Runs body with `*`out`*` bound to the value of `*`test-out`*`.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/clojure/contrib/test_is.clj#281 Source] [http://www.google.com/codesearch?hl=en&lr=&q=with-test-out+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
==Namespace clojure.contrib.test-is.tap==
----
===print-tap-diagnostic===
====function====
<pre>
Usage: *(_print-tap-diagnostic_ data)*
</pre>
<pre>Prints a TAP diagnostic line.  data is a (possibly multi-line) 
string.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap/clojure/contrib/test_is/tap.clj#51 Source] [http://www.google.com/codesearch?hl=en&lr=&q=print-tap-diagnostic+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===print-tap-fail===
====function====
<pre>
Usage: *(_print-tap-fail_ msg)*
</pre>
<pre>Prints a TAP 'not ok' line.  msg is a string, with no line breaks</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap/clojure/contrib/test_is/tap.clj#63 Source] [http://www.google.com/codesearch?hl=en&lr=&q=print-tap-fail+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===print-tap-pass===
====function====
<pre>
Usage: *(_print-tap-pass_ msg)*
</pre>
<pre>Prints a TAP 'ok' line.  msg is a string, with no line breaks</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap/clojure/contrib/test_is/tap.clj#58 Source] [http://www.google.com/codesearch?hl=en&lr=&q=print-tap-pass+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===print-tap-plan===
====function====
<pre>
Usage: *(_print-tap-plan_ n)*
</pre>
<pre>Prints a TAP plan line like '1..n'.  n is the number of tests</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap/clojure/contrib/test_is/tap.clj#46 Source] [http://www.google.com/codesearch?hl=en&lr=&q=print-tap-plan+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===with-tap-output===
====macro====
<pre>
Usage: *(_with-tap-output_ & body)*
</pre>
<pre>Execute body with modified test-is reporting functions that produce 
TAP output</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/test_is/tap/clojure/contrib/test_is/tap.clj#107 Source] [http://www.google.com/codesearch?hl=en&lr=&q=with-tap-output+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
