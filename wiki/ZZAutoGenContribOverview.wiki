#summary An overview of the components of clojure.contrib

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=Clojure.contrib Overview=
*clojure.contrib.accumulators* [ZZAutoGenAccumulators api]


*clojure.contrib.accumulators.examples* [ZZAutoGenAccumulatorsExamples api]


*clojure.contrib.agent-utils* [ZZAutoGenAgentUtils api]


*clojure.contrib.auto-agent* [ZZAutoGenAutoAgent api]


*clojure.contrib.combinatorics* [ZZAutoGenCombinatorics api]


*clojure.contrib.command-line* [ZZAutoGenCommandLine api]


*clojure.contrib.complex-numbers* [ZZAutoGenComplexNumbers api]


*clojure.contrib.cond* [ZZAutoGenCond api]


*clojure.contrib.condt* [ZZAutoGenCondt api]


*clojure.contrib.core* [ZZAutoGenCore api]


*clojure.contrib.core.tests* [ZZAutoGenCoreTests api]


*clojure.contrib.dataflow* [ZZAutoGenDataflow api]


*clojure.contrib.datalog* [ZZAutoGenDatalog api]


*clojure.contrib.datalog.database* [ZZAutoGenDatalogDatabase api]


*clojure.contrib.datalog.literals* [ZZAutoGenDatalogLiterals api]


*clojure.contrib.datalog.magic* [ZZAutoGenDatalogMagic api]


*clojure.contrib.datalog.rules* [ZZAutoGenDatalogRules api]


*clojure.contrib.datalog.softstrat* [ZZAutoGenDatalogSoftstrat api]


*clojure.contrib.datalog.util* [ZZAutoGenDatalogUtil api]


*clojure.contrib.def* [ZZAutoGenDef api]


*clojure.contrib.duck-streams* [ZZAutoGenDuckStreams api]


*clojure.contrib.error-kit* [ZZAutoGenErrorKit api]


*clojure.contrib.except* [ZZAutoGenExcept api]


*clojure.contrib.fcase* [ZZAutoGenFcase api]


*clojure.contrib.gen-html-docs* [ZZAutoGenGenHtmlDocs api]


*clojure.contrib.generic* [ZZAutoGenGeneric api]


*clojure.contrib.generic.arithmetic* [ZZAutoGenGenericArithmetic api]


*clojure.contrib.generic.collection* [ZZAutoGenGenericCollection api]


*clojure.contrib.generic.comparison* [ZZAutoGenGenericComparison api]


*clojure.contrib.generic.functor* [ZZAutoGenGenericFunctor api]


*clojure.contrib.generic.math-functions* [ZZAutoGenGenericMathFunctions api]


*clojure.contrib.graph* [ZZAutoGenGraph api]


*clojure.contrib.greatest-least* [ZZAutoGenGreatestLeast api]


*clojure.contrib.import-static* [ZZAutoGenImportStatic api]


*clojure.contrib.java-utils* [ZZAutoGenJavaUtils api]


*clojure.contrib.javadoc.browse* [ZZAutoGenJavadocBrowse api]


*clojure.contrib.javalog* [ZZAutoGenJavalog api]


*clojure.contrib.json.read* [ZZAutoGenJsonRead api]


*clojure.contrib.json.write* [ZZAutoGenJsonWrite api]


*clojure.contrib.lazy-seqs* [ZZAutoGenLazySeqs api]


*clojure.contrib.lazy-xml* [ZZAutoGenLazyXml api]


*clojure.contrib.macros* [ZZAutoGenMacros api]


*clojure.contrib.map-utils* [ZZAutoGenMapUtils api]


*clojure.contrib.math* [ZZAutoGenMath api]


*clojure.contrib.math.tests* [ZZAutoGenMathTests api]


*clojure.contrib.miglayout* [ZZAutoGenMiglayout api]


*clojure.contrib.miglayout.internal* [ZZAutoGenMiglayoutInternal api]


*clojure.contrib.miglayout.test* [ZZAutoGenMiglayoutTest api]


*clojure.contrib.mmap* [ZZAutoGenMmap api]


*clojure.contrib.monads* [ZZAutoGenMonads api]


*clojure.contrib.monads.examples* [ZZAutoGenMonadsExamples api]


*clojure.contrib.ns-utils* [ZZAutoGenNsUtils api]


*clojure.contrib.pprint* [ZZAutoGenPprint api]
<br>by Tom Faulhaber

This module comprises two elements:
 # A pretty printer for Clojure data structures, implemented in the function "pprint"
 # A Common Lisp compatible format function, implemented as "cl-format" because Clojure is using the name "format" for its own format.

The most complete documentation can be found at http://github.com/tomfaulhaber/cl-format
where the markdown README is currently displayed. I will be moving it into the 
clojure.contrib wiki RSN.


*clojure.contrib.pprint.ColumnWriter* [ZZAutoGenPprintColumnwriter api]


*clojure.contrib.pprint.PrettyWriter* [ZZAutoGenPprintPrettywriter api]


*clojure.contrib.pprint.examples.hexdump* [ZZAutoGenPprintExamplesHexdump api]


*clojure.contrib.pprint.examples.multiply* [ZZAutoGenPprintExamplesMultiply api]


*clojure.contrib.pprint.examples.props* [ZZAutoGenPprintExamplesProps api]


*clojure.contrib.pprint.examples.show-doc* [ZZAutoGenPprintExamplesShowDoc api]


*clojure.contrib.pprint.utilities* [ZZAutoGenPprintUtilities api]


*clojure.contrib.probabilities.dist* [ZZAutoGenProbabilitiesDist api]


*clojure.contrib.probabilities.dist.examples* [ZZAutoGenProbabilitiesDistExamples api]


*clojure.contrib.prxml* [ZZAutoGenPrxml api]


*clojure.contrib.repl-ln* [ZZAutoGenReplLn api]


*clojure.contrib.repl-utils* [ZZAutoGenReplUtils api]


*clojure.contrib.seq-utils* [ZZAutoGenSeqUtils api]


*clojure.contrib.server-socket* [ZZAutoGenServerSocket api]


*clojure.contrib.set* [ZZAutoGenSet api]


*clojure.contrib.shell-out* [ZZAutoGenShellOut api]


*clojure.contrib.singleton* [ZZAutoGenSingleton api]


*clojure.contrib.sql* [ZZAutoGenSql api]


*clojure.contrib.sql.internal* [ZZAutoGenSqlInternal api]


*clojure.contrib.sql.test* [ZZAutoGenSqlTest api]


*clojure.contrib.stacktrace* [ZZAutoGenStacktrace api]


*clojure.contrib.str-utils* [ZZAutoGenStrUtils api]


*clojure.contrib.stream-utils* [ZZAutoGenStreamUtils api]


*clojure.contrib.stream-utils.examples* [ZZAutoGenStreamUtilsExamples api]


*clojure.contrib.template* [ZZAutoGenTemplate api]


*clojure.contrib.test-is* [ZZAutoGenTestIs api]


*clojure.contrib.test-is.tap* [ZZAutoGenTestIsTap api]


*clojure.contrib.test-is.test-fixtures* [ZZAutoGenTestIsTestFixtures api]


*clojure.contrib.test-is.tests* [ZZAutoGenTestIsTests api]


*clojure.contrib.trace* [ZZAutoGenTrace api]


*clojure.contrib.types* [ZZAutoGenTypes api]


*clojure.contrib.types.examples* [ZZAutoGenTypesExamples api]


*clojure.contrib.walk* [ZZAutoGenWalk api]


*clojure.contrib.with-ns* [ZZAutoGenWithNs api]


*clojure.contrib.zip-filter* [ZZAutoGenZipFilter api]


*clojure.contrib.zip-filter.xml* [ZZAutoGenZipFilterXml api]


