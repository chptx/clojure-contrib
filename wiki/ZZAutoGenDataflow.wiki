#summary An api-out of the API of clojure.contrib.dataflow

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for clojure.contrib.dataflow=
==Public Variables and Functions==
----
===(_add-cell-watcher_ cell key fun)===
Adds a watcher to a cell to respond to changes of value.  The is a
function of 4 values: a key, the cell, its old value, its new
value.  This is implemented using Clojure's add-watch to the
underlying ref, and shared its sematics
----
===(_add-cells_ df cells)===
Given a collection of cells, add them to the dataflow.
----
===(_build-dataflow_ cs)===
Given a collection of cells, build and return a dataflow object
----
===(_build-source-cell_ name init)===
Builds a source cell
----
===(_build-standard-cell_ name deps fun expr)===
Builds a standard cell
----
===(_build-validator-cell_ deps fun expr)===
Builds a validator cell
----
===(_cell_ type & data)===
====Macro====
Build a standard cell, like this:

(cell fred
(* ?mary ?joe))

Which creates a cell named fred that is the product of a cell mary and cell joe

Or:

(cell joe
(apply * ?*sally))

Which creates a cell that applies * to the collection of all cells named sally

Or:

(cell :source fred 0)

Which builds a source cell fred with initial value 0

Or:

(cell :validator (when (< ?fred ?sally)
(throwf "%s must be greater than %s" ?fred ?sally))

Which will perform the validation
----
===_display-cell_===
A 'readable' form of the cell
----
===_eval-cell_===
Evaluate a dataflow cell.  Return [changed, old val]
----
===(_get-cell_ df name)===
Get the single cell named by name
----
===(_get-cells_ df name)===
Get all the cells named by name
----
===(_get-old-value_ df env name)===
Looks up an old value
----
===(_get-source-cells_ df)===
Returns a collection of source cells from the dataflow
----
===(_get-value_ df name)===
Gets a value from the df matching the passed symbol.
Signals an error if the name is not present, or if it not a single
value.
----
===(_get-value-from-cell_ cell)===
Given a cell, get its value
----
===(_get-values_ df name)===
Gets a collection of values from the df by name
----
===(_print-dataflow_ df)===
Prints a dataflow, one cell per line
----
===(_remove-cells_ df cells)===
Given a collection of cells, remove them from the dataflow.
----
===(_source-cell?_ cell)===
Is this cell a source cell?
----
===(_update-values_ df data)===
Given a dataflow, and a map of name-value pairs, update the
dataflow by binding the new values.  Each name must be of a source
cell
