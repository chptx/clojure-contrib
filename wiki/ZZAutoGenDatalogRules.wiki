#summary An api-out of the API of clojure.contrib.datalog.rules

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for clojure.contrib.datalog.rules=
==Public Variables and Functions==
[[#<-]]
----
===(_<-_ hd & body)===
====Macro====
Build a datalog rule.  Like this:

   (<- (:head :x ?x :y ?y) (:body-1 :x ?x :y ?y) (:body-2 :z ?z) (not! :body-3 :x ?x) (if > ?y ?z))
[[#?-]]
----
===(_?-_ & q)===
====Macro====
Define a datalog query
[[#all-predicates]]
----
===(_all-predicates_ rs)===
Given a rules-set, return all defined predicates
[[#apply-rule]]
----
===(_apply-rule_ db rule)===
===(_apply-rule_ db-1 db-2 rule)===
Apply the rule against db-1, adding the results to the appropriate
   relation in db-2.  The relation will be created if needed.
[[#apply-rules-set]]
----
===(_apply-rules-set_ db rs)===
[[#build-rule]]
----
===(_build-rule_ hd bd)===
[[#compute-sip]]
----
===(_compute-sip_ bindings i-preds rule)===
Given a set of bound column names, return an adorned sip for this
   rule.  A set of intensional predicates should be provided to
   determine what should be adorned.
[[#datalog-rule]]
----
===(_datalog-rule_)===
[[#display-query]]
----
===(_display-query_ query)===
Return a query in a readable format.
[[#display-rule]]
----
===(_display-rule_ rule)===
Return the rule in a readable format.
[[#empty-bindings]]
----
===(_empty-bindings_)===
[[#empty-rules-set]]
----
===(_empty-rules-set_)===
[[#is-safe?]]
----
===(_is-safe?_ rule)===
Is the rule safe according to the datalog protocol?
[[#make-rules-set]]
----
===(_make-rules-set_ rs)===
Given an existing set of rules, make it a 'rules-set' for
   printing.
[[#non-base-rules]]
----
===(_non-base-rules_ rs)===
Return a collection of rules that depend, somehow, on other rules
[[#predicate-map]]
----
===(_predicate-map_ rs)===
Given a rules-set, return a map of rules keyed by their predicates.
   Each value will be a set of rules.
[[#return-rule-data]]
----
===(_return-rule-data_ rule)===
Returns an untypted rule that will be fully printed
[[#rules-set]]
----
===(_rules-set_ & rules)===
Given a collection of rules return a rules set
