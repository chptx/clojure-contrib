#summary An api-out of the API of clojure.contrib.error-kit

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for clojure.contrib.error-kit=
==Public Variables and Functions==
[[#bind-continue]]
----
===(_bind-continue_ continue-name [args*] & body)===
Special form to be used inside a 'with-handler'.
  Control can be passed to this 'continue' form from a 'raise' enclosed
  in this with-handler's dynamic scope, when this 'continue-name' is
  given to a 'continue' form.
[[#continue]]
----
===(_continue_ continue-name & args)===
====Macro====
[[#continue-with]]
----
===(_continue-with_ value)===
====Macro====
[[#deferror]]
----
===(_deferror_ name [parent-error?] doc-string? [args*] & body)===
===(_deferror_ name [parent-error?] doc-string? args-destruct-map & body)===
====Macro====
Define a new error type
[[#do-not-handle]]
----
===(_do-not-handle_)===
====Macro====
Use in a tail position of a 'handle' form to indicate 'raise' should
  not consider the error handled, but should continue searching for an
  appropriate 'handle' form.  Allows finer-grain control over catching
  than just the error type.
[[#error]]
----
===(_error_ details)===
Base type for all error-kit errors
[[#handle]]
----
===(_handle_ error-name? [args*] & body)===
===(_handle_ error-name? args-destruct-map-args & body)===
Special form to be used inside a 'with-handler'.  When
  any error is 'raised' from withing the dynamic scope of 'body' that
  is of error-name's type or a derived type, the args will be bound
  and the body executed.  If no 'error-name' is given, the body will
  be executed for regardless of the type of error raised.  The body
  may return a value, in which case that will be the return value of
  the entire 'with-handler' form, or it may use any of the special
  return forms, 'do-not-handle', 'continue-with', or 'continue'.
[[#raise]]
----
===(_raise_ err-name & args)===
====Macro====
Raise an error of the type err-name, constructed with the given args
[[#raise*]]
----
===(_raise*_ err)===
Raise the given error object, best if created by an error
  constructor defined with deferror.  See also 'raise' macro.
[[#rebind-fn]]
----
===(_rebind-fn_ func)===
[[#throw-msg]]
----
===(_throw-msg_ class-name)===
====Macro====
Returns a function that throws a Java Exception with the given
  name.  Useful to associate a new error-kit error type with a
  particular Java Exception class, via the :unhandled error key.
[[#with-handler]]
----
===(_with-handler_ & forms)===
====Macro====
This is error-kit's dynamic scope form.  The body will be executed
  in a dynamic context that includes all of the following 'handle' and
  'bind-continue' forms.
