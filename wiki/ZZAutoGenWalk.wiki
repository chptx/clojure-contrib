#summary An api-out of the API of clojure.contrib.walk

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for clojure.contrib.walk=
==Public Variables and Functions==
[[#keywordize-keys]]
----
===(_keywordize-keys_ m)===
Recursively transforms all map keys from strings to keywords.
[[#macroexpand-all]]
----
===(_macroexpand-all_ form)===
Recursively performs all possible macroexpansions in form.
[[#postwalk]]
----
===(_postwalk_ f form)===
Performs a depth-first, post-order traversal of form.  Calls f on
  each sub-form, uses f's return value in place of the original.
  Recognizes all Clojure data structures except sorted-map-by.
  Consumes seqs as with doall.
[[#postwalk-demo]]
----
===(_postwalk-demo_ form)===
Demonstrates the behavior of postwalk by printing each form as it is
  walked.  Returns form.
[[#postwalk-replace]]
----
===(_postwalk-replace_ smap form)===
Recursively transforms form by replacing keys in smap with their
  values.  Like clojure/replace but works on any data structure.  Does
  replacement at the leaves of the tree first.
[[#prewalk]]
----
===(_prewalk_ f form)===
Like postwalk, but does pre-order traversal.
[[#prewalk-demo]]
----
===(_prewalk-demo_ form)===
Demonstrates the behavior of prewalk by printing each form as it is
  walked.  Returns form.
[[#prewalk-replace]]
----
===(_prewalk-replace_ smap form)===
Recursively transforms form by replacing keys in smap with their
  values.  Like clojure/replace but works on any data structure.  Does
  replacement at the root of the tree first.
[[#stringify-keys]]
----
===(_stringify-keys_ m)===
Recursively transforms all map keys from keywords to strings.
[[#walk]]
----
===(_walk_ inner outer form)===
Traverses form, an arbitrary data structure.  inner and outer are
  functions.  Applies inner to each element of form, building up a
  data structure of the same type, then applies outer to the result.
  Recognizes all Clojure data structures except sorted-map-by.
  Consumes seqs as with doall.
