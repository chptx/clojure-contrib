#summary zip-filter API Reference

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for zip-filter=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.zip-filter))
}}}
==Public Variables and Functions==
Shortcuts:
[#(_ancestors_loc) ancestors] [#(_children_loc) children] [#(_children-auto_loc) children-auto] [#(_descendants_loc) descendants] [#(_left-locs_loc) left-locs] [#(_leftmost?_loc) leftmost?] [#(_right-locs_loc) right-locs] [#(_rightmost?_loc) rightmost?] 
----
===(_ancestors_ loc)===
Returns a lazy sequence of all ancestors of location loc, starting
with loc and proceeding to loc's parent node and on through to the
root of the tree.
----
===(_children_ loc)===
Returns a lazy sequence of all immediate children of location loc,
left-to-right.
----
===(_children-auto_ loc)===
Returns a lazy sequence of all immediate children of location loc,
left-to-right, marked so that a following tag= predicate will auto-descend.
----
===(_descendants_ loc)===
Returns a lazy sequence of all descendants of location loc, in
depth-first order, left-to-right, starting with loc.
----
===(_left-locs_ loc)===
Returns a lazy sequence of locations to the left of loc, starting with loc.
----
===(_leftmost?_ loc)===
Returns true if there are no more nodes to the left of location loc.
----
===(_right-locs_ loc)===
Returns a lazy sequence of locations to the right of loc, starting with loc.
----
===(_rightmost?_ loc)===
Returns true if there are no more nodes to the right of location loc.
