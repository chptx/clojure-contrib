#summary zip-filter API Reference
#sidebar ApiDocSidebar

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for zip-filter=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.zip-filter))
}}}


==Public Variables and Functions==
Shortcuts:
[#ancestors ancestors] [#children children] [#children-auto children-auto] [#descendants descendants] [#left-locs left-locs] [#leftmost? leftmost?] [#right-locs right-locs] [#rightmost? rightmost?] 

Variables and Functions in zip-filter.xml:
[ZipFilterApiDoc#attr attr] [ZipFilterApiDoc#attr= attr=] [ZipFilterApiDoc#seq-test seq-test] [ZipFilterApiDoc#tag= tag=] [ZipFilterApiDoc#text text] [ZipFilterApiDoc#text= text=] [ZipFilterApiDoc#xml-> xml->] [ZipFilterApiDoc#xml1-> xml1->] 

----
===ancestors===
====function====
<pre>
Usage: *(_ancestors_ loc)*
</pre>
<pre> Returns a lazy sequence of all ancestors of location loc, starting
with loc and proceeding to loc's parent node and on through to the
root of the tree.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#60 Source] [http://www.google.com/codesearch?hl=en&lr=&q=ancestors+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===children===
====function====
<pre>
Usage: *(_children_ loc)*
</pre>
<pre> Returns a lazy sequence of all immediate children of location loc,
left-to-right.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#40 Source] [http://www.google.com/codesearch?hl=en&lr=&q=children+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===children-auto===
====function====
<pre>
Usage: *(_children-auto_ loc)*
</pre>
<pre> Returns a lazy sequence of all immediate children of location loc,
left-to-right, marked so that a following tag= predicate will auto-descend.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#47 Source] [http://www.google.com/codesearch?hl=en&lr=&q=children-auto+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===descendants===
====function====
<pre>
Usage: *(_descendants_ loc)*
</pre>
<pre> Returns a lazy sequence of all descendants of location loc, in
depth-first order, left-to-right, starting with loc.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#55 Source] [http://www.google.com/codesearch?hl=en&lr=&q=descendants+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===left-locs===
====function====
<pre>
Usage: *(_left-locs_ loc)*
</pre>
<pre> Returns a lazy sequence of locations to the left of loc, starting with loc.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#28 Source] [http://www.google.com/codesearch?hl=en&lr=&q=left-locs+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===leftmost?===
====function====
<pre>
Usage: *(_leftmost?_ loc)*
</pre>
<pre> Returns true if there are no more nodes to the left of location loc.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#32 Source] [http://www.google.com/codesearch?hl=en&lr=&q=leftmost?+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===right-locs===
====function====
<pre>
Usage: *(_right-locs_ loc)*
</pre>
<pre> Returns a lazy sequence of locations to the right of loc, starting with loc.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#24 Source] [http://www.google.com/codesearch?hl=en&lr=&q=right-locs+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===rightmost?===
====function====
<pre>
Usage: *(_rightmost?_ loc)*
</pre>
<pre> Returns true if there are no more nodes to the right of location loc.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter.clj#36 Source] [http://www.google.com/codesearch?hl=en&lr=&q=rightmost?+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
==Namespace clojure.contrib.zip-filter.xml==
----
===attr===
====function====
<pre>
Usage: *(_attr_ attrname)
       (_attr_ loc attrname)*
</pre>
<pre> Returns the xml attribute named attrname, of the xml node at location loc.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#18 Source] [http://www.google.com/codesearch?hl=en&lr=&q=attr+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===attr====
====function====
<pre>
Usage: *(_attr=_ attrname attrval)*
</pre>
<pre> Returns a query predicate that matches a node when it has an
attribute named attrname whose value is attrval.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#23 Source] [http://www.google.com/codesearch?hl=en&lr=&q=attr=+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===seq-test===
====function====
<pre>
Usage: *(_seq-test_ preds)*
</pre>
<pre> Returns a query predicate that matches a node when its xml content
matches the query expresions given.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#51 Source] [http://www.google.com/codesearch?hl=en&lr=&q=seq-test+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===tag====
====function====
<pre>
Usage: *(_tag=_ tagname)*
</pre>
<pre> Returns a query predicate that matches a node when its is a tag
named tagname.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#28 Source] [http://www.google.com/codesearch?hl=en&lr=&q=tag=+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===text===
====function====
<pre>
Usage: *(_text_ loc)*
</pre>
<pre> Returns the textual contents of the given location, similar to
xpaths's value-of</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#38 Source] [http://www.google.com/codesearch?hl=en&lr=&q=text+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===text====
====function====
<pre>
Usage: *(_text=_ s)*
</pre>
<pre> Returns a query predicate that matches a node when its textual
content equals s.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#46 Source] [http://www.google.com/codesearch?hl=en&lr=&q=text=+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===xml->===
====function====
<pre>
Usage: *(_xml->_ loc & preds)*
</pre>
<pre> The loc is passed to the first predicate.  If the predicate returns
a collection, each value of the collection is passed to the next
predicate.  If it returns a location, the location is passed to the
next predicate.  If it returns true, the input location is passed to
the next predicate.  If it returns false or nil, the next predicate
is not called.

 This process is repeated, passing the processed results of each
predicate to the next predicate.  xml-> returns the final sequence.
The entire chain is evaluated lazily.

 There are also special predicates: keywords are converted to tag=,
strings to text=, and vectors to sub-queries that return true if
they match.

 See the footer of zip-query.clj for examples.</pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#57 Source] [http://www.google.com/codesearch?hl=en&lr=&q=xml->+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
----
===xml1->===
====function====
<pre>
Usage: *(_xml1->_ loc & preds)*
</pre>
<pre> Returns the first item from loc based on the query predicates
given.  See xml-></pre>

[http://code.google.com/p/clojure-contrib/source/browse/trunk/src/clojure/contrib/zip_filter/xml.clj#80 Source] [http://www.google.com/codesearch?hl=en&lr=&q=xml1->+package%3Ahttp%3A%2F%2Fclojure-contrib\.googlecode\.com&sbtn=Search Search for references in contrib]
