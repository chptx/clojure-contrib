#summary zip-filter.xml API Reference

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=API for zip-filter.xml=
Usage: 
{{{
(ns <your-namespace>
  (:use clojure.contrib.zip-filter.xml))
}}}
==Public Variables and Functions==
Shortcuts:
[#(_attr_attrname) attr] [#(_attr=_attrname_attrval) attr=] [#(_seq-test_preds) seq-test] [#(_tag=_tagname) tag=] [#(_text_loc) text] [#(_text=_s) text=] [#(_xml->_loc_&_preds) xml->] [#(_xml1->_loc_&_preds) xml1->] 
----
===(_attr_ attrname)===
===(_attr_ loc attrname)===
Returns the xml attribute named attrname, of the xml node at location loc.
----
===(_attr=_ attrname attrval)===
Returns a query predicate that matches a node when it has an
attribute named attrname whose value is attrval.
----
===(_seq-test_ preds)===
Returns a query predicate that matches a node when its xml content
matches the query expresions given.
----
===(_tag=_ tagname)===
Returns a query predicate that matches a node when its is a tag
named tagname.
----
===(_text_ loc)===
Returns the textual contents of the given location, similar to
xpaths's value-of
----
===(_text=_ s)===
Returns a query predicate that matches a node when its textual
content equals s.
----
===(_xml->_ loc & preds)===
The loc is passed to the first predicate.  If the predicate returns
a collection, each value of the collection is passed to the next
predicate.  If it returns a location, the location is passed to the
next predicate.  If it returns true, the input location is passed to
the next predicate.  If it returns false or nil, the next predicate
is not called.

This process is repeated, passing the processed results of each
predicate to the next predicate.  xml-> returns the final sequence.
The entire chain is evaluated lazily.

There are also special predicates: keywords are converted to tag=,
strings to text=, and vectors to sub-queries that return true if
they match.

See the footer of zip-query.clj for examples.
----
===(_xml1->_ loc & preds)===
Returns the first item from loc based on the query predicates
given.  See xml->
