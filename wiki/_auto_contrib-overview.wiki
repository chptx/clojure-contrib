#summary An overview of the components of clojure.contrib

<wiki:comment>
This document was auto-generated from the clojure.contrib source by contrib-autodoc.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
</wiki:comment>
=Clojure.contrib Overview=
*clojure.contrib.accumulators* [_auto_accumulators api]


*clojure.contrib.accumulators.examples* [_auto_accumulators.examples api]


*clojure.contrib.agent-utils* [_auto_agent-utils api]


*clojure.contrib.auto-agent* [_auto_auto-agent api]


*clojure.contrib.combinatorics* [_auto_combinatorics api]


*clojure.contrib.command-line* [_auto_command-line api]


*clojure.contrib.complex-numbers* [_auto_complex-numbers api]


*clojure.contrib.cond* [_auto_cond api]


*clojure.contrib.condt* [_auto_condt api]


*clojure.contrib.core* [_auto_core api]


*clojure.contrib.core.tests* [_auto_core.tests api]


*clojure.contrib.dataflow* [_auto_dataflow api]


*clojure.contrib.datalog* [_auto_datalog api]


*clojure.contrib.datalog.database* [_auto_datalog.database api]


*clojure.contrib.datalog.literals* [_auto_datalog.literals api]


*clojure.contrib.datalog.magic* [_auto_datalog.magic api]


*clojure.contrib.datalog.rules* [_auto_datalog.rules api]


*clojure.contrib.datalog.softstrat* [_auto_datalog.softstrat api]


*clojure.contrib.datalog.util* [_auto_datalog.util api]


*clojure.contrib.def* [_auto_def api]


*clojure.contrib.duck-streams* [_auto_duck-streams api]


*clojure.contrib.error-kit* [_auto_error-kit api]


*clojure.contrib.except* [_auto_except api]


*clojure.contrib.fcase* [_auto_fcase api]


*clojure.contrib.gen-html-docs* [_auto_gen-html-docs api]


*clojure.contrib.generic* [_auto_generic api]


*clojure.contrib.generic.arithmetic* [_auto_generic.arithmetic api]


*clojure.contrib.generic.collection* [_auto_generic.collection api]


*clojure.contrib.generic.comparison* [_auto_generic.comparison api]


*clojure.contrib.generic.functor* [_auto_generic.functor api]


*clojure.contrib.generic.math-functions* [_auto_generic.math-functions api]


*clojure.contrib.graph* [_auto_graph api]


*clojure.contrib.greatest-least* [_auto_greatest-least api]


*clojure.contrib.import-static* [_auto_import-static api]


*clojure.contrib.java-utils* [_auto_java-utils api]


*clojure.contrib.javadoc.browse* [_auto_javadoc.browse api]


*clojure.contrib.javalog* [_auto_javalog api]


*clojure.contrib.json.read* [_auto_json.read api]


*clojure.contrib.json.write* [_auto_json.write api]


*clojure.contrib.lazy-seqs* [_auto_lazy-seqs api]


*clojure.contrib.lazy-xml* [_auto_lazy-xml api]


*clojure.contrib.macros* [_auto_macros api]


*clojure.contrib.map-utils* [_auto_map-utils api]


*clojure.contrib.math* [_auto_math api]


*clojure.contrib.math.tests* [_auto_math.tests api]


*clojure.contrib.miglayout* [_auto_miglayout api]


*clojure.contrib.miglayout.internal* [_auto_miglayout.internal api]


*clojure.contrib.miglayout.test* [_auto_miglayout.test api]


*clojure.contrib.mmap* [_auto_mmap api]


*clojure.contrib.monads* [_auto_monads api]


*clojure.contrib.monads.examples* [_auto_monads.examples api]


*clojure.contrib.ns-utils* [_auto_ns-utils api]


*clojure.contrib.pprint* [_auto_pprint api]
<br>by Tom Faulhaber

This module comprises two elements:
# A pretty printer for Clojure data structures, implemented in the function "pprint"
# A Common Lisp compatible format function, implemented as "cl-format" because
Clojure is using the name "format" for its own format.

The most complete documentation can be found at http://github.com/tomfaulhaber/cl-format
where the markdown README is currently displayed. I will be moving it into 
clojure.contrib (either to the wiki or some other document structure) RSN.


*clojure.contrib.pprint.ColumnWriter* [_auto_pprint.ColumnWriter api]


*clojure.contrib.pprint.PrettyWriter* [_auto_pprint.PrettyWriter api]


*clojure.contrib.pprint.examples.hexdump* [_auto_pprint.examples.hexdump api]


*clojure.contrib.pprint.examples.multiply* [_auto_pprint.examples.multiply api]


*clojure.contrib.pprint.examples.props* [_auto_pprint.examples.props api]


*clojure.contrib.pprint.examples.show-doc* [_auto_pprint.examples.show-doc api]


*clojure.contrib.pprint.utilities* [_auto_pprint.utilities api]


*clojure.contrib.probabilities.dist* [_auto_probabilities.dist api]


*clojure.contrib.probabilities.dist.examples* [_auto_probabilities.dist.examples api]


*clojure.contrib.prxml* [_auto_prxml api]


*clojure.contrib.repl-ln* [_auto_repl-ln api]


*clojure.contrib.repl-utils* [_auto_repl-utils api]


*clojure.contrib.seq-utils* [_auto_seq-utils api]


*clojure.contrib.server-socket* [_auto_server-socket api]


*clojure.contrib.set* [_auto_set api]


*clojure.contrib.shell-out* [_auto_shell-out api]


*clojure.contrib.singleton* [_auto_singleton api]


*clojure.contrib.sql* [_auto_sql api]


*clojure.contrib.sql.internal* [_auto_sql.internal api]


*clojure.contrib.sql.test* [_auto_sql.test api]


*clojure.contrib.stacktrace* [_auto_stacktrace api]


*clojure.contrib.str-utils* [_auto_str-utils api]


*clojure.contrib.stream-utils* [_auto_stream-utils api]


*clojure.contrib.stream-utils.examples* [_auto_stream-utils.examples api]


*clojure.contrib.template* [_auto_template api]


*clojure.contrib.test-is* [_auto_test-is api]


*clojure.contrib.test-is.tap* [_auto_test-is.tap api]


*clojure.contrib.test-is.test-fixtures* [_auto_test-is.test-fixtures api]


*clojure.contrib.test-is.tests* [_auto_test-is.tests api]


*clojure.contrib.trace* [_auto_trace api]


*clojure.contrib.types* [_auto_types api]


*clojure.contrib.types.examples* [_auto_types.examples api]


*clojure.contrib.walk* [_auto_walk api]


*clojure.contrib.with-ns* [_auto_with-ns api]


*clojure.contrib.zip-filter* [_auto_zip-filter api]


*clojure.contrib.zip-filter.xml* [_auto_zip-filter.xml api]


